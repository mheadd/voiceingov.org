<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2019-01-04 13:00"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Vox Populi</title>
<link>http://voiceingov.org</link>
<description>“Ministers… cannot in any country be uninfluenced by the voice of the people.”</description>
<pubDate>Fri, 04 Jan 2019 13:00:11 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://voiceingov.org</wp:base_blog_url>
<wp:author>
  <wp:author_login>mheadd</wp:author_login>
  <wp:author_email>mheadd@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[mheadd]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>25809</wp:term_id>
  <wp:category_nicename>asterisk</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Asterisk]]></wp:cat_name>
  <wp:category_description><![CDATA[Category to discuss Digium's Asterisk product.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>34462</wp:term_id>
  <wp:category_nicename>cell-phones</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Cell Phones]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1786871</wp:term_id>
  <wp:category_nicename>couchdb</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[CouchDB]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>74558</wp:term_id>
  <wp:category_nicename>development-tools</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Development Tools]]></wp:cat_name>
  <wp:category_description><![CDATA[Category for discussing development tools and IDE's for VoiceXML and voice applications.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>3285</wp:term_id>
  <wp:category_nicename>digital-divide</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Digital Divide]]></wp:cat_name>
  <wp:category_description><![CDATA[This category is for discussion of technologies to help bridge the digital divide.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>6359</wp:term_id>
  <wp:category_nicename>general-discussion</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[General Discussion]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>84391776</wp:term_id>
  <wp:category_nicename>headd-scratchers</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Headd Scratchers]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>610</wp:term_id>
  <wp:category_nicename>linux</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Linux]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>103</wp:term_id>
  <wp:category_nicename>news</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[News]]></wp:cat_name>
  <wp:category_description><![CDATA[This category is for news items relating to voice technologies, VoiceXML and the voice technology industry.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>202022</wp:term_id>
  <wp:category_nicename>open-government</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Open Government]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>25</wp:term_id>
  <wp:category_nicename>open-source</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Open Source]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>864504</wp:term_id>
  <wp:category_nicename>phone-voting</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Phone Voting]]></wp:cat_name>
  <wp:category_description><![CDATA[This category is for disucssions around the use of VoiceXML and telephone basd applications to support voting.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>15764</wp:term_id>
  <wp:category_nicename>standards</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Standards]]></wp:cat_name>
  <wp:category_description><![CDATA[For discussions of speech technology standards.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>328178</wp:term_id>
  <wp:category_nicename>trixbox</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[trixbox]]></wp:cat_name>
  <wp:category_description><![CDATA[Category for posts relating to Fonality's trixbox product. ]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>2277779</wp:term_id>
  <wp:category_nicename>tropo</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Tropo]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1124</wp:term_id>
  <wp:category_nicename>tutorials</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Tutorials]]></wp:cat_name>
  <wp:category_description><![CDATA[This category contains tutorials or examples that demonstrate how to use VoiceXML and other voice technologies.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>599182</wp:term_id>
  <wp:category_nicename>twitter</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Twitter]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>811</wp:term_id>
  <wp:category_nicename>voip</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[VoIP]]></wp:cat_name>
  <wp:category_description><![CDATA[Cateogry for discussing issues rlating to VoIP technoloiges and regulatory issues.]]></wp:category_description>
</wp:category>
<wp:tag>
  <wp:term_id>624544</wp:term_id>
  <wp:tag_slug>311</wp:tag_slug>
  <wp:tag_name><![CDATA[311]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>753956</wp:term_id>
  <wp:tag_slug>agi</wp:tag_slug>
  <wp:tag_name><![CDATA[AGI]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>141</wp:term_id>
  <wp:tag_slug>ajax</wp:tag_slug>
  <wp:tag_name><![CDATA[AJAX]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>135016</wp:term_id>
  <wp:tag_slug>amber-alert</wp:tag_slug>
  <wp:tag_name><![CDATA[Amber Alert]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4276</wp:term_id>
  <wp:tag_slug>api</wp:tag_slug>
  <wp:tag_name><![CDATA[API]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>47297598</wp:term_id>
  <wp:tag_slug>apps09</wp:tag_slug>
  <wp:tag_name><![CDATA[apps09]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>25809</wp:term_id>
  <wp:tag_slug>asterisk</wp:tag_slug>
  <wp:tag_name><![CDATA[Asterisk]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>57597</wp:term_id>
  <wp:tag_slug>att</wp:tag_slug>
  <wp:tag_name><![CDATA[AT&amp;T]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1337</wp:term_id>
  <wp:tag_slug>california</wp:tag_slug>
  <wp:tag_name><![CDATA[california]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1311636</wp:term_id>
  <wp:tag_slug>civicrm</wp:tag_slug>
  <wp:tag_name><![CDATA[CiviCRM]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>23157525</wp:term_id>
  <wp:tag_slug>cloud-telephony</wp:tag_slug>
  <wp:tag_name><![CDATA[Cloud Telephony]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>71762</wp:term_id>
  <wp:tag_slug>colbert</wp:tag_slug>
  <wp:tag_name><![CDATA[Colbert]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1786871</wp:term_id>
  <wp:tag_slug>couchdb</wp:tag_slug>
  <wp:tag_name><![CDATA[CouchDB]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3426</wp:term_id>
  <wp:tag_slug>delaware</wp:tag_slug>
  <wp:tag_name><![CDATA[Delaware]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>74558</wp:term_id>
  <wp:tag_slug>development-tools</wp:tag_slug>
  <wp:tag_name><![CDATA[Development Tools]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>378453</wp:term_id>
  <wp:tag_slug>dial-plan</wp:tag_slug>
  <wp:tag_name><![CDATA[dial plan]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>84391788</wp:term_id>
  <wp:tag_slug>digitsal-divide</wp:tag_slug>
  <wp:tag_name><![CDATA[digitsal divide]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4656931</wp:term_id>
  <wp:tag_slug>digsby</wp:tag_slug>
  <wp:tag_name><![CDATA[Digsby]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>654241</wp:term_id>
  <wp:tag_slug>disaster-response</wp:tag_slug>
  <wp:tag_name><![CDATA[disaster response]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3897</wp:term_id>
  <wp:tag_slug>economic-development</wp:tag_slug>
  <wp:tag_name><![CDATA[economic development]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>214932</wp:term_id>
  <wp:tag_slug>geocode</wp:tag_slug>
  <wp:tag_name><![CDATA[geocode]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>830620</wp:term_id>
  <wp:tag_slug>geotag</wp:tag_slug>
  <wp:tag_name><![CDATA[geotag]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>81</wp:term_id>
  <wp:tag_slug>google</wp:tag_slug>
  <wp:tag_name><![CDATA[Google]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9662282</wp:term_id>
  <wp:tag_slug>gov20</wp:tag_slug>
  <wp:tag_name><![CDATA[gov20]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>31418729</wp:term_id>
  <wp:tag_slug>government-outreach</wp:tag_slug>
  <wp:tag_name><![CDATA[government outreach]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10518</wp:term_id>
  <wp:tag_slug>http</wp:tag_slug>
  <wp:tag_name><![CDATA[HTTP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2787234</wp:term_id>
  <wp:tag_slug>identica</wp:tag_slug>
  <wp:tag_name><![CDATA[Identi.ca]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3320</wp:term_id>
  <wp:tag_slug>im</wp:tag_slug>
  <wp:tag_name><![CDATA[IM]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>72721</wp:term_id>
  <wp:tag_slug>json</wp:tag_slug>
  <wp:tag_name><![CDATA[JSON]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>84391790</wp:term_id>
  <wp:tag_slug>limonadephp</wp:tag_slug>
  <wp:tag_name><![CDATA[limonadephp]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6253</wp:term_id>
  <wp:tag_slug>meebo</wp:tag_slug>
  <wp:tag_name><![CDATA[Meebo]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>851999</wp:term_id>
  <wp:tag_slug>microblogging</wp:tag_slug>
  <wp:tag_name><![CDATA[microblogging]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>517661</wp:term_id>
  <wp:tag_slug>multimodality</wp:tag_slug>
  <wp:tag_name><![CDATA[multimodality]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4419</wp:term_id>
  <wp:tag_slug>mysql</wp:tag_slug>
  <wp:tag_name><![CDATA[mysql]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>31896918</wp:term_id>
  <wp:tag_slug>nodejs</wp:tag_slug>
  <wp:tag_name><![CDATA[Node.js]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>249014</wp:term_id>
  <wp:tag_slug>open-data</wp:tag_slug>
  <wp:tag_name><![CDATA[Open Data]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>25</wp:term_id>
  <wp:tag_slug>open-source</wp:tag_slug>
  <wp:tag_name><![CDATA[Open Source]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>32430056</wp:term_id>
  <wp:tag_slug>open311</wp:tag_slug>
  <wp:tag_name><![CDATA[Open311]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1092055</wp:term_id>
  <wp:tag_slug>openfire</wp:tag_slug>
  <wp:tag_name><![CDATA[OpenFire]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>13472912</wp:term_id>
  <wp:tag_slug>opengov</wp:tag_slug>
  <wp:tag_name><![CDATA[opengov]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>377209</wp:term_id>
  <wp:tag_slug>pew-internet</wp:tag_slug>
  <wp:tag_name><![CDATA[pew internet]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>22628</wp:term_id>
  <wp:tag_slug>philadelphia</wp:tag_slug>
  <wp:tag_name><![CDATA[Philadelphia]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>458</wp:term_id>
  <wp:tag_slug>php</wp:tag_slug>
  <wp:tag_name><![CDATA[PHP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>42369</wp:term_id>
  <wp:tag_slug>prophecy</wp:tag_slug>
  <wp:tag_name><![CDATA[Prophecy]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5997735</wp:term_id>
  <wp:tag_slug>pstv</wp:tag_slug>
  <wp:tag_name><![CDATA[pstv]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15873670</wp:term_id>
  <wp:tag_slug>screen-pop</wp:tag_slug>
  <wp:tag_name><![CDATA[Screen Pop]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>84391794</wp:term_id>
  <wp:tag_slug>semantic-interpretation</wp:tag_slug>
  <wp:tag_name><![CDATA[semantic interpretation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>32527</wp:term_id>
  <wp:tag_slug>sip</wp:tag_slug>
  <wp:tag_name><![CDATA[SIP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7579</wp:term_id>
  <wp:tag_slug>sms</wp:tag_slug>
  <wp:tag_name><![CDATA[SMS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8791</wp:term_id>
  <wp:tag_slug>soap</wp:tag_slug>
  <wp:tag_name><![CDATA[SOAP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>101585</wp:term_id>
  <wp:tag_slug>speech-recognition</wp:tag_slug>
  <wp:tag_name><![CDATA[speech recognition]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15764</wp:term_id>
  <wp:tag_slug>standards</wp:tag_slug>
  <wp:tag_name><![CDATA[Standards]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>423418</wp:term_id>
  <wp:tag_slug>sunlight</wp:tag_slug>
  <wp:tag_name><![CDATA[sunlight]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1575</wp:term_id>
  <wp:tag_slug>texas</wp:tag_slug>
  <wp:tag_name><![CDATA[texas]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>84391797</wp:term_id>
  <wp:tag_slug>transcirption</wp:tag_slug>
  <wp:tag_name><![CDATA[transcirption]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8377</wp:term_id>
  <wp:tag_slug>transit</wp:tag_slug>
  <wp:tag_name><![CDATA[transit]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>636</wp:term_id>
  <wp:tag_slug>transparency</wp:tag_slug>
  <wp:tag_name><![CDATA[transparency]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>328178</wp:term_id>
  <wp:tag_slug>trixbox</wp:tag_slug>
  <wp:tag_name><![CDATA[trixbox]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2277779</wp:term_id>
  <wp:tag_slug>tropo</wp:tag_slug>
  <wp:tag_name><![CDATA[Tropo]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1124</wp:term_id>
  <wp:tag_slug>tutorials</wp:tag_slug>
  <wp:tag_name><![CDATA[Tutorials]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>13794425</wp:term_id>
  <wp:tag_slug>twilio</wp:tag_slug>
  <wp:tag_name><![CDATA[Twilio]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>599182</wp:term_id>
  <wp:tag_slug>twitter</wp:tag_slug>
  <wp:tag_name><![CDATA[Twitter]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>255</wp:term_id>
  <wp:tag_slug>ubuntu</wp:tag_slug>
  <wp:tag_name><![CDATA[Ubuntu]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10266</wp:term_id>
  <wp:tag_slug>utilities</wp:tag_slug>
  <wp:tag_name><![CDATA[utilities]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2355</wp:term_id>
  <wp:tag_slug>voice</wp:tag_slug>
  <wp:tag_name><![CDATA[voice]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>32526</wp:term_id>
  <wp:tag_slug>voicexml</wp:tag_slug>
  <wp:tag_name><![CDATA[VoiceXML]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>811</wp:term_id>
  <wp:tag_slug>voip</wp:tag_slug>
  <wp:tag_name><![CDATA[VoIP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3906930</wp:term_id>
  <wp:tag_slug>voxeo</wp:tag_slug>
  <wp:tag_name><![CDATA[Voxeo]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2872</wp:term_id>
  <wp:tag_slug>w3c</wp:tag_slug>
  <wp:tag_name><![CDATA[W3C]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2358</wp:term_id>
  <wp:tag_slug>web-services</wp:tag_slug>
  <wp:tag_name><![CDATA[Web Services]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>995</wp:term_id>
  <wp:tag_slug>website</wp:tag_slug>
  <wp:tag_name><![CDATA[website]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1560481</wp:term_id>
  <wp:tag_slug>wengophone</wp:tag_slug>
  <wp:tag_name><![CDATA[WengoPhone]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>355</wp:term_id>
  <wp:tag_slug>wireless</wp:tag_slug>
  <wp:tag_name><![CDATA[wireless]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>283485</wp:term_id>
  <wp:tag_slug>xmpp</wp:tag_slug>
  <wp:tag_name><![CDATA[XMPP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6567</wp:term_id>
  <wp:tag_slug>youtube</wp:tag_slug>
  <wp:tag_name><![CDATA[YouTube]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s0.wp.com/i/buttonw-com.png</url>
		<title>Vox Populi</title>
		<link>http://voiceingov.org</link>
	</image>
	<item>
  <title>About</title>
  <link>http://voiceingov.org/about/</link>
  <pubDate>Wed, 19 Sep 2012 14:17:55 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.wordpress.com/?page_id=2</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Overview</strong>

Providing high quality information and timely services to the public can be a difficult job. Throw in challenges like the Digital Divide and limited IT resources and it can become next to impossible.

<img src="http://voiceingov.files.wordpress.com/2012/09/voicexml_forum_certif_devel.gif" alt="Certified VoiceXML Application Developer" title="Certified VoiceXML Application Developer" style="float:right;padding:15px;margin:10px;" />

To help governments and non-profits face these challenges, a host of new standards have been developed that are changing the service delivery equation.  These standards will allow public sector and non-profit organizations to deliver web content and Internet services to ordinary household telephones and other devices quickly, easily and cost effectively. These new technologies promise to change the way that governments interact with citizens, and will fundamentally change the direction of e-Government.
<blockquote><a href="../blog/">Vox Populi</a> (Latin for “Voice of the People”) aims to provide useful information on interactive communication technologies and social networking tools that can be used by government officials to improve services to citizens and taxpayers.</blockquote>
<strong>Site Creator</strong>

<a href="http://www.linkedin.com/pub/dir/mark/headd" target="_blank">Mark J. Headd</a> is an experienced voice, mobile and web application developer who has been certified as a VoiceXML Application Developer by the VoiceXML Forum.  He currently works as a Developer Evangelist for <a href="http://labs.voxeo.com/">Voxeo Labs</a>, where he helps developers build open government and civic applications using the <a href="https://www.tropo.com/">Tropo</a> and <a href="http://phono.com/">Phono</a> platforms.
 
He holds a Master's degree in Public Administration from the <a href="http://www1.maxwell.syr.edu/default.aspx" target="_blank">Maxwell School of Citizenship and Public Affairs</a> at Syracuse University, and is a former adjunct instructor at the University of Delaware teaching a course in electronic government.

He served for three years as the chief policy and budget advisor for the State of Delaware's Department of Technology and Information. He has also served as Director of the Delaware Government Information Center and as Technology Adviser to former Delaware Governor Thomas Carper.

Mark has built open source solutions using open government data and APIs for the District of Columbia, the Sunlight Foundation, the New York State Senate, and the cities of New York, San Francisco, Toronto, Baltimore and Philadelphia.

<strong>Awards and Recognition</strong>
<ul>
	<li>Silver Medalist: <a href="http://www.appsfordemocracy.org/dc-crime-finder/" target="_blank">Apps for Democracy Contest</a>, sponsored by the Government of the District of Columbia.</li>
	<li>Honorable Mention: <a href="http://sunlightlabs.com/contests/appsforamerica/apps/hear-me-say-this/" target="_blank">Apps for America Contest</a>, sponsored by the sunlight Foundation.</li>
	<li><a href="http://dti.delaware.gov/services/egov.shtml" target="_blank">2003 Accenture and MIT Digital Government award competition</a>. (Winner for best pilot project).</li>
</ul>
<strong>Get Social</strong>
<ul>
	<li>Follow me on <a href="http://twitter.com/mheadd">Twitter</a>.</li>
	<li>Friend me on <a href="http://www.facebook.com/mheadd">Facebook</a>.</li>
	<li>Join my <a href="http://www.linkedin.com/pub/mark-headd/3/706/644">LinkedIn</a> Network.</li>
</ul>
<strong>Disclaimer:</strong> All opinions expressed on this site are my own and in no way represent the opinions of any employers or clients unless explicitly stated.

<strong>Note: </strong>The quotation in the site title is from Thomas Jefferson.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2012-09-19 14:17:55</wp:post_date>
  <wp:post_date_gmt>2012-09-19 14:17:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[3801781]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>twitter_cards_summary_img_size</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{i:0;i:119;i:1;i:150;i:2;i:1;i:3;s:24:"width="119" height="150"";s:4:"bits";i:6;s:8:"channels";i:3;s:4:"mime";s:9:"image/gif";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>VoiceXML_FORUM_Certif_Devel</title>
  <link>http://voiceingov.org/about/voicexml_forum_certif_devel/#main</link>
  <pubDate>Wed, 19 Sep 2012 14:23:35 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2012/09/voicexml_forum_certif_devel.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2012-09-19 14:23:35</wp:post_date>
  <wp:post_date_gmt>2012-09-19 14:23:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>voicexml_forum_certif_devel</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2012/09/voicexml_forum_certif_devel.gif</wp:attachment_url>
</item>
<item>
  <title>Grammar Support in Opera 8</title>
  <link>http://voiceingov.org/2005/06/17/grammar-support-in-opera-8/</link>
  <pubDate>Fri, 17 Jun 2005 10:38:26 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=11</guid>
  <description/>
  <content:encoded><![CDATA[Conflicting posts in newsgroups dealing with the new multimodal browser released from Opera raise the question of which grammar formats are supported in the new browser.

<a href="http://www.voicexml.org/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic;f=7;t=000006">This post</a> on the VoiceXML Forum Community Message Board bemoans the lack of support for the SRGS (Speech Recognition Grammar Specification) format for speech grammars in Opera 8.  It suggests that the new browser only supports the JSGF (Java Speech Grammar Format).

This would be a major issue in my opinion, as <a href="http://www.w3.org/TR/speech-grammar/">the SRGS specification</a> is closely tied to the VoiceXML standard "“ both were developed under the auspices of the W3C, both were adopted as standards on the same day and the certification of both <a href="http://www.voicexml.org/certification/developer.html">developers</a> and <a href="http://www.voicexml.org/certification/platform.html">platforms</a> by the VoiceXML Forum is contingent on support for the SRGS.  If one of the benefits of XHTML+Voice is that it will leverage the existing skills of VoiceXML developers, why wouldn't the first XHTML+Voice browser support the designated standard for grammars under the VoiceXML specification?

After further research, I came across <a href="http://my.opera.com/forums/showthread.php?s=c77dd1d8426abe986c9dc010c6aebed8&amp;threadid=83252">this post</a> on the Opera Developer forum.  It states pretty clearly that the SRGS spec is indeed supported in Opera 8.  The only way to be sure, however, is to set up a quick test.

Using <a href="http://my.opera.com/community/dev/voice/xv-script/">one of the examples</a> on the Opera developer site, which is designed to use a JSGF grammar, I modified the example to use an SRGS grammar (in XML format).  These two sample files can be tested by pointing the <a href="http://my.opera.com/mheadd/affiliate/"> latest version of the Opera Browser</a> at  the links below:
<ul>
<li><a href="http://www.voiceingov.org/files/x_plus_v/grammar_test1.xml">Grammar Test 1</a> (using JSGF grammar)</li>
<li><a href="http://www.voiceingov.org/files/x_plus_v/grammar_test2.xml">Grammar Test 2</a> (using SRGS grammar)</li>
</ul>


Both work identically, demonstrating that the new <a href="http://my.opera.com/mheadd/affiliate/">XHTML+Voice enabled browser from Opera</a> does indeed support the SRGS grammar format.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>11</wp:post_id>
  <wp:post_date>2005-06-17 06:38:26</wp:post_date>
  <wp:post_date_gmt>2005-06-17 10:38:26</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>grammar-support-in-opera-8</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>SALT</title>
  <link>http://voiceingov.org/technologies/salt/</link>
  <pubDate>Fri, 17 Jun 2005 12:17:08 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=12</guid>
  <description/>
  <content:encoded><![CDATA[<strong>What is SALT?</strong>

Speech Application Language Tags (SALT) are a lightweight set of extensions to existing markup languages, in particular HTML and XHTML that enable multimodal and telephony access to information, applications and Web services from PCs, telephones, tablet PCs and wireless personal digital assistants (PDAs).

<strong>Comparing VoiceXML and SALT</strong>

VoiceXML and SALT are both markup languages. As one way of comparing the two, VoiceXML is a stand alone language while SALT is embedded into other web publishing languages, such as HTML or XHTML. For more on the differences between VoiceXML and SALT, check out the links to the left, or this <a href="http://www.networkworld.com/buzz/2002/salt.html">article from Network World</a>.

<strong>Current Status</strong>

SALT is still a developing technology that is part of a broader effort focused on promoting "multi-modal" applications, or applications that users can interact with by means of keyboard, stylus, voice, etc. Multimodal applications are expected to be more broadly deployed as cell phones and hand-held computers merge into single devices that provide both local computation and connectivity to back-end servers. It is hoped that these applications will overcome the problems with the voice-only interfaces of phones and the GUI-only interfaces of hand-held computers.

In March 2002 the SALT Forum published a specification for speech tags called SALT (Speech Application Language Tags). In August 2002, The SALT Forum asked the <a href="http://www.w3.org/2002/mmi/">W3C Multimodal Interaction Working Group</a> and Voice Browser Working Group to review the SALT specification as part of their development of standards for promoting multimodal interaction and voice enabling the Web.

In early 2003, the SALT Forum <a href="http://www.saltforum.org/press/030331.asp">overhauled its membership structure</a> to allow for easier participation and collaboration by member entities. A number of <a href="http://www.saltforum.org/products/products1.asp">featured products</a> that incorporate the SALT specification have also been made available on the SALT Forum site, along with a number of <a href="http://www.saltforum.org/devforum/default.asp">other developer resources</a>.

<strong>SALT Links</strong>
<ul>
<li><a href="http://www.saltforum.org/default.asp">SALT Forum</a></li>
<li><a href="http://www.microsoft.com/speech/">Microsoft .NET Speech Technologies</a></li>
<li><a href="http://www.voicewebsolutions.net/community/tutorials/SALT_reference/">SALT Reference</a></li>
<li><a href="http://www.developer.com/voice/article.php/1565431">SALT Tutorial</a></li>
<li><a href="http://www.voicewebsolutions.net/products/vweb/license.asp">"Voice Web Studio" (SALT Development Tool)</a></li>
<li><a href="http://www.voicexmlforum.org/salt/comparisons.html">Comparing SALT and VoiceXML</a></li>
<li><a href="http://xml.com/pub/a/2003/05/14/salt.html">How to Add SALT to HTML Pages</a></li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2005-06-17 08:17:08</wp:post_date>
  <wp:post_date_gmt>2005-06-17 12:17:08</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>salt</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2243</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[12]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[12]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>XHTML + Voice</title>
  <link>http://voiceingov.org/technologies/xhtml-voice/</link>
  <pubDate>Fri, 17 Jun 2005 12:22:48 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=13</guid>
  <description/>
  <content:encoded><![CDATA[<strong>What is X+V?</strong>

<p>XHTML+Voice brings spoken interaction to standard web content by integrating a set of existing technologies (i.e., XHTML and VoiceXML) that will enable multimodal and telephony access to information, applications and Web services from PCs, telephones, tablet PCs and wireless personal digital assistants (PDAs).</p>

<strong>Comparing X+V and SALT</strong>

<p>Like SALT, X+V is intended to support the development of applications that combine speech recognition with other forms of input such as a keyboard, stylus or keypad. These applications, called "multimodal" applications, will allow users to access information or services through a combination of different inputs.
</p>

<strong>Current Status</strong>

<p>X+V is still a developing technology. To better understand the differences and similarities between X+V and SALT, check out this excellent <a href="http://www.eweek.com/print_article/0,3668,a=22911,00.asp">article from eWeek</a>.
</p>

<p>Multimodal applications -- the focus of both X+V and SALT -- are expected to be more broadly deployed as cell phones and hand-held computers merge into single devices that provide both local computation and connectivity to back-end servers. It is hoped that these applications will overcome the problems with the voice-only interfaces of phones and the GUI-only interfaces of hand-held computers.
</p>
<p>In early 2003, the VoiceXML Forum (of which both IBM and Motorola are members) released <a href="http://www.voicexml.org/specs/multimodal/x+v/11/">X+V 1.1</a> -- an update to the original X+V specification.   This version of X+V has been updated to match VoiceXML 2.0 (now a W3C Candidate Recommendation).  In addition, the consortium has made <a href="http://www.voicexml.org/specs/multimodal/x+v/11/examples/">a number of X+V sample applications</a> available for X+V developers.  The fourm released <a href="http://www.voicexmlforum.com/specs/multimodal/x+v/12/">Version 1.2</a> of the XHTML+Voice Profile in March of 2004.</p>

<p>In May of 2005, Opera Software released <a href="http://my.opera.com/mheadd/affiliate/">Opera 8.0</a>.  The Windows version of the browser has an option that enables voice interaction through XHTML+Voice. This functionality is provided by the IBMÂ® Multimodal Runtime Environment, which connects the Opera Browser to IBM Embedded ViaVoiceÂ® (the same technology currently shipping in certain auto navigation systems)
</p>

<strong>X+V Links</strong>
<ul>
<li><a href="http://www.w3.org/TR/xhtml+voice/">XHTML+Voice Profile</a></li>
<li><a href="http://www.voicexmlreview.org/Jun2002/features/xhtmlvoice.html">XHTML+Voice: Bringing Spoken Interaction To The WWW</a></li>
<li><a href="http://www.opera.com/products/verticals/multimodal/">IBM, Opera push XHTML+Voice</a></li>
<li><a href="http://my.opera.com/community/dev/voice/">Adding Voice to XHTML</a></li>
<li><a href="http://xml.coverpages.org/ni2004-03-23-b.html">IBM, Opera to develop browser</a></li>
<li><a href="http://www-306.ibm.com/software/pervasive/multimodal/">Multimodal Browser and Toolkit</a></li>
<li><a href="http://www-128.ibm.com/developerworks/wireless/library/wi-message.html">As easy as X+V</a> (great tutorial!)</li>
<li><a href="http://www-128.ibm.com/developerworks/wireless/library/wi-message.html">X+V-based SMS sending</a> (another great tutorial!)</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>13</wp:post_id>
  <wp:post_date>2005-06-17 08:22:48</wp:post_date>
  <wp:post_date_gmt>2005-06-17 12:22:48</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>xhtml-voice</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2243</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[13]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[13]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>PHPGrammar</title>
  <link>http://voiceingov.org/built-by-me/phpgrammar/</link>
  <pubDate>Fri, 17 Jun 2005 21:57:05 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=16</guid>
  <description/>
  <content:encoded><![CDATA[<strong>What is PHPGrammar?</strong>
<p>Grammars are a central component to voice applications which define the set of words or word combinations that are recognized by speech recognition technologies, and allow a user to interact with a voice application. Grammars can be thought of as the vocal counterpart to the menu items in a traditional HTML web form.  When a voice application recognizes a word or phrase defined within a grammar file, it triggers a programmatic response based
on the logic of the application.</p>

<a href="http://www.phpclasses.org/award/innovation/" target="_blank"><img src="logo.gif" title="PHP Innovation Award Winner" alt="PHP Innovation Award Winner" style="padding:5px;float:right;" /></a>

<p><acronym title="PHP Hypertext Preprocessor">PHP</acronym> is a server-side scripting language that is supported on multiple platforms and can be used in conjunction with a large number of web servers and databases. PHP runs on Windows, Linux and UNIX platforms, it works with Apache or IIS and can support a <a href="http://thekramers.net/phpdemo/dbphp.html" target="_blank">wide variety</a> of databases. Best of all, PHP is open source with <a href="http://www.php.net/usage.php" target="_blank">a large and active</a> community of users. If you are creating a web application (whether visual or voice) PHP is a powerful, widely supported, low-cost tool that should be seriously considered.</p>

<p>PHPGrammar is a small set of PHP classes that make it extremely easy to generate <a href="http://www.w3.org/TR/speech-grammar/" target="_blank">W3C Grammar files</a> in XML format. The XML format for speech grammars is part of the <acronym title="Speech Recognition Grammar Specification">SRGS</acronym> specification.  Platforms conforming to the VoiceXML 2.0 specification are required to support this format. In addition, XML grammars are also supported within the <a href="http://www.voiceingov.org/blog/?page_id=12">SALT</a> and <a href="http://www.voiceingov.org/blog/?page_id=13">XHTML + Voice</a> specifications. Finally, an <acronym title="eXtensible Stylesheet Language for Transformations">XSLT</acronym> Stylesheet is <a href="http://www.w3.org/TR/speech-grammar/grammar-transformer.xsl">available from the W3C</a> that allows developers to convert XML grammars to Augmented BNF Form, the other format required to be supported under the VoiceXML 2.0 specification.  As grammar formats go, the W3C XML format is the most broadly supported and has the most utility for voice application developers.</p>

<strong>Download PHPGrammar</strong>

<p>PHPGrammar is <a href="http://www.phpclasses.org/browse/package/1885.html" target="_blank">available free for download</a>. Please note the license restrictions (very fair in MHO), and be sure to share any modifications or enhancements that you make with me so that I can continue to improve this tool.</p>

<strong>Example</strong>

<p>Simple Grammar :: <a href="../grammars/grammar_test1_php.txt">PHP Code</a> :: <a href="../grammars/grammar_test1_xml.txt">XML Grammar</a></p>
<p>Moderately Complex Grammar :: <a href="../grammars/grammar_test2_php.txt">PHP Code</a> :: <a href="../grammars/grammar_test2_xml.txt">XML Grammar</a></p>
<p>Complex Simple Grammar :: <a href="../grammars/grammar_test3_php.txt">PHP Code</a> :: <a href="../grammars/grammar_test3_xml.txt">XML Grammar</a></p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>2005-06-17 17:57:05</wp:post_date>
  <wp:post_date_gmt>2005-06-17 21:57:05</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>phpgrammar</wp:post_name>
  <wp:status>private</wp:status>
  <wp:post_parent>825</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[16]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[16]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>(old) News</title>
  <link>http://voiceingov.org/?page_id=17</link>
  <pubDate>Fri, 17 Jun 2005 22:02:19 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=17</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Voice Industry News</strong>
<ul>
<li><a href="http://www.voicexmlreview.org/Apr2005/features/opera.html">Opera 8 Ships One Million Browsers with X+V Multimodal Technology</a></li>
<li><a href="http://internetnews.com/dev-news/article.php/3484641">TV, Tell Me What's On</a></li>
<li><a href="http://www.w3.org/2004/09/ssml-pressrelease">World Wide Web Consortium Issues SSML 1.0 as a W3C Recommendation</a></li>
<li><a href="http://www.eweek.com/article2/0,1759,465570,00.asp">SALT Forum Submits Spec to W3C</a></li>
<li><a href="http://www.linuxinsider.com/story/36086.html">Linux and VoiceXML in the Call Center</a></li>
<li><a href="http://www.computerworld.co.nz/news.nsf/UNID/0D284A62CFC3C830CC256E8200756182?OpenDocument">Govt listening carefully to speech apps</a></li>
<li><a href="http://www.w3.org/TR/2004/WD-voicexml21-20040323/">First working draft of VoiceXML 2.1 released</a> </li>
<li><a href="http://news.com.com/2100-1012_3-5180272.html?tag=cd_lede">Voice apps sounding better to big firms, says IBM</a></li>
<li><a href="http://www.internetnews.com/dev-news/article.php/3330981">The Redmond Giant Speaks Out</a></li>
<li><a href="http://www.internetnews.com/dev-news/article.php/3329801">Opera Finds Its Voice </a></li>
<li><a href="http://www.w3.org/2004/03/voicexml2-pressrelease">VoiceXML 2.0 and SRGS become official W3C standards</a></li>
<li><a href="http://news.com.com/2100-1041_3-5098197.html?tag=nefd_top">Web whispers about Microsoft voice plan</a></li>
<li><a href="http://www.nytimes.com/2003/10/26/business/yourmoney/26vall.html">As Silicon Valley Reboots, the Geeks Take Charge</a> (requires free registration)</li>
<li><a href="http://www.nytimes.com/2003/10/22/automobiles/22RANE.html">Help Moves Out of the Dashboard and Into the Phone</a> (requires free registration)</li>
<li><a href="http://news.com.com/2100-1012-5080866.html">IBM vows to make computing pervasive</a></li>
<li><a href="http://xml.coverpages.org/ni2003-09-02-a.html">W3C Device Independence Working Group Publishes Specs for a Universally Accessible Web</a></li>
<li><a href="http://www.internetnews.com/dev-news/article.php/2239281">IBM Takes Wraps Off Multimodal Toolkit</a></li>
<li><a href="http://news.com.com/2100-1008_3-1023966.html?tag=fd_top">Talking computers nearing reality</a></li>
<li><a href="http://www.speechtechmag.com/pub/industry/2149-1.html">Listen Up! Big Brother is Talking to You</a></li>
<li><a href="http://www.speechtechmag.com/issues/8_3/cover/1999-1.html">Speech Wars &mdash; Round Two</a></li>
<li><a href="http://www.speechtechmag.com/issues/8_3/cover/1992-1.html">The Role of Speech in Multimodal Applications</a> </li>
<li><a href="http://news.com.com/2100-1032-995069.html">Web speech effort gets Microsoft boost</a></li>
<li><a href="http://www.speechtechmag.com/pub/industry/1875-1.html">Microsoft Releases SALT-based Sample Applications</a></li>
<li><a href="http://www.microsoft.com/speech/techinfo/sampleapplications/">Download the Sample SALT Applications</a></li>
<li><a href="http://www.cconvergence.com/article/CTM20021202S0001">MultimodalityStarts Walking and Talking</a></li>
<li><a href="http://www.internetnews.com/dev-news/article.php/1492621">Adding SALT to the Mix</a></li>
<li><a href="http://www.alphaworks.ibm.com/aw.nsf/FAQs/mmbextension">IBM Announces Multimodal Browser Extension</a></li>
<li><a href="http://www.wirelessfuturemagazine.com/multimodality.html">Multimodality: the Coming Revolution</a></li>
<li><a href="http://www.developer.com/voice/article.php/1567051">Top 10 Best Practices for Voice User Interface Design</a></li>
<li><a href="http://www.nwfusion.com/buzz/2002/salt.html">Shakin' on the SALT</a></li>
<li><a href="http://computerworld.com.sg/pcwsg.nsf/unidlookup/C1BB5FC2A1E7367148256B65002F4D82?OpenDocument">VoiceXML vs SALT</a></li>
<li><a href="http://www.fawcette.com/xmlmag/2002_06/magazine/columns/signal/apatrizio2/default_pf.asp">Speech Web Apps Gain Boost from VoiceXML</a></li>
<li><a href="http://www.eweek.com/print_article/0,3668,a=22911,00.asp">Can we talk?</a></li>
<li><a href="http://www.speechtechmag.com/issues/7_3/cover/742-1.html">VoiceXML and SALT: How are they different, and why</a></li>
<li><a href="http://www.netbytel.com/e-gram/egramdetail.asp?ID=7">VoiceXML vs. SALT: Is that the Right Question?</a></li>
</ul>

<strong>Recent Government Voice Tech News / Articles</strong>
<ul>
<li><a href="http://www.govtech.net/news/news.php?id=2003.06.23-57251">Delaware Recognized for Access System</a></li>
<li><a href="http://www.state.de.us/dti/pressReleases/refund_vxml_press.pdf">State Unveils Enhancement to Web Based Tax Services</a></li>
<li><a href="http://www.state.de.us/dti/pressReleases/PollingPlaceVXML.pdf">DE launches polling place locator</a></li>
<li><a href="http://www.gcn.com/vol1_no1/daily-updates/19872-1.html">IRS: Tax forms will talk</a></li>
<li><a href="http://www.fcw.com/geb/articles/2002/0225/web-drive-02-28-02.asp">States round up 511 resources</a></li>
<li><a href="http://www.fcw.com/fcw/articles/2002/0318/cov-tech2-03-18-02.asp">A Voice from the near future</a></li>
<li><a href="http://www.fcw.com/geb/articles/2002/0211/web-utah-02-11-02.asp">A call for help</a></li>
<li><a href="http://www.gcn.com/vol1_no1/daily-updates/4639-1.html">Voice browsing is on the way</a></li>
</ul>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>2005-06-17 18:02:19</wp:post_date>
  <wp:post_date_gmt>2005-06-17 22:02:19</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>news-archive</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[17]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[17]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tools</title>
  <link>http://voiceingov.org/development-tools/</link>
  <pubDate>Sun, 19 Jun 2005 11:41:33 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=18</guid>
  <description/>
  <content:encoded><![CDATA[<strong>VoiceXML and Multimodal Tools</strong>
<ul>
<li>IBM's <a href="http://www-3.ibm.com/software/pervasive/multimodal/?Open&amp;ca=daw-prod-mmb">Multimodal Toolkit for WebSphere Studio</a> provides developers with a way to create XHTML+Voice multimodal applications within an integrated development environment.</li>
<li><a href="http://www.opera.com/">Opera 8.0 Web Browser</a> The Windows version of this browser now has an option that enables voice interaction through XHTML+Voice. This functionality is provided by the IBMÂ® Multimodal Runtime Environment, which connects the Opera Browser to IBM Embedded ViaVoiceÂ® (the same technology currently shipping in certain auto navigation systems)</li>
<li><a href="http://www.alphaworks.ibm.com/aw.nsf/FAQs/mmbextension">Multimodal Browser Extension</a> is a technology that enables Microsoft Internet Explorer to render multimodal applications written in XHTML+Voice.</li>
<li>Carnegie Mellon University's <a href="http://hap.speech.cs.cmu.edu/salt/">OpenSALT project</a> makes available a SALT 1.0 compliant open-source browser based on the open source Mozilla web browser and make use of open source Sphinx recognition and Festival synthesis software.</li>
<li>The latest release of the <a href="http://216.162.203.249/speech/ordersdk.asp?EventType=dl">Microsoft .NET Speech SDK V1.0</a> is now available for developers. Get your free copy today.</li>
<li><a href="http://www.chami.com/html-kit/">HTML-Kit</a> is a full-featured, highly customizable development environment that can be used to create, edit, validate, preview and publish web pages and scripts. It has a <a href="http://www.chami.com/html-kit/plugins/Dir/Authoring/Voice/">number of plugins available</a> that support the
authoring of VoiceXML documents.</li>
<li><a href="http://community.voxeo.com/designer/home.jsp">Voxeo Designer 2.0</a> is the first visual phone markup design tool to fully support round-trip development. You can use the designer to visually design phone applications and it will automatically generate the VoiceXML or <a href="http://community.voxeo.com/cxml/">CallXML</a> markup for you. This allows a voice application developer to focus on important issues like usability and functionality, without having to worry about syntax.</li>
<li><a href="http://www.grammarserver.com/">NuGram Hosted Server</a> is a hosted service for the development and deployment of dynamic and static speech recognition grammars.</li>
<li>In addition to the tools listed above, there is a very good listing <a href="http://www.kenrehor.com/voicexml/#tools">here</a> - however, some of the links in this list may be a bit dated.</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>18</wp:post_id>
  <wp:post_date>2005-06-19 07:41:33</wp:post_date>
  <wp:post_date_gmt>2005-06-19 11:41:33</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>development-tools</wp:post_name>
  <wp:status>private</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[18]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[18]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>RSS To VXML Pt. II</title>
  <link>http://voiceingov.org/tutorials/rss-to-vxml-pt-ii/</link>
  <pubDate>Sun, 19 Jun 2005 20:33:47 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=19</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Building a "Smarter" Voice Feed</strong>

<p>One of the many nice things about RSS feeds is that they are updated regularly &ndash;  this means that your voice application will provide a steady stream of updated headlines or events.  Unfortunately, it means that you have less control over how the content is presented. Its always a good practice in developing VoiceXML applications to prerecord prompt and messages &ndash; this helps avoid user confusion when a text-to-speech engine has difficulty pronouncing a word. But because RSS feeds are so dynamic, prerecording prompts is not possible.</p>

<p>This wouldn't be such a problem if RSS didn't have its roots in news delivery. Because RSS feeds are typically used to provide up to the minute headlines or news stories, the content of these feeds may not lend themselves to aural presentation.   Headlines are meant to be eye-catching, not ear-catching. This is particularly true of technology feeds, which can be littered with
acronyms, abbreviations and other strange anomalies.</p>

<p>For example, consider the following example headline: &ldquo;IBM introduces new UNIX OS to support customer IT efforts.&rdquo; Depending on which TTS engine is being used, your results on rendering this written sentence as spoken text will vary. Some TTS engines will assume that words composed of all upper case letters are meant to be sounded out by individual letters (for example, IBM would be rendered in speech as eye-bee-em). However, the above sentence shows the limitations of such an approach. The word UNIX is typically written in upper case but is pronounced &ldquo;yoo-niks.&rdquo; Fortunately, with XSLT it is possible to create "smarter" voice feeds.</p>

<strong>Replacing Words</strong>

<p>Using XSLT templates, it is possible to identify troublesome words or text strings and replace them with other, more easily pronounceable words or phrases. These replacements can be the full spelling of abbreviated words, or the phonetic spelling of acronyms and other pesky items. I'll skip the details in this tutorial because there is an excellent overview of this technique available on <a href="http://www.xml.com/pub/a/2002/06/05/transforming.html">XML.com</a>.  My example of a "search and replace" XSLT document to improve the pronunciation quality of the of the CNET news RSS feed we have been working with <a href="../xfiles/tutorials/cnet_news_vxml2.xsl">can be found here</a>.</p>

<p>Once you have your search and replace XSLT file, you have some decisions to make. You must decide what words you want to replace as your XSLT file converts the source RSS data into VoiceXML. You must also decide what you want to replace these words with. For acronyms or abbreviated words, I recommend replacement using the entire word (for example, replace OS with Operating System).  This will probably be the cleanest and most efficient way of ensuring your users hear the headlines correctly.</p>

<strong>Alternate Approaches</strong>

<p>VoiceXML provides a way to phonetically pronounce words.  The <a href="http://www.w3.org/TR/speech-synthesis/#S3.1.9">&lt;phoneme&gt;</a> element provides guidance to the TTS engine to instruct it on how to pronounce words properly.  Note &ndash;  this element is actually part of the Speech Synthesis Markup Language (SSML) specification, as is the &lt;voice&gt; element discussed previously, but it is available for use in VoiceXML.  (There is some excellent information on this available from the <a href="http://developer.voicegenie.com/voicexml2tagref.php?tag=ssvs_phoneme&amp;display=ssmltags">VoiceGenie</a> web site.) </p>

<p>The SSML specification also provides another option for dealing with words that are sometimes troublesome for TTS engines to pronounce. The <a href="http://www.w3.org/TR/speech-synthesis/#edef_say-as">&lt;say-as&gt;</a> element allows developers to specify the kind of data to be rendered as speech, to help the TTS engine pronounce it properly. This element has two different attributes ("format" and "interpret-as") to provide the appropriate context for the text to be rendered as speech to the
caller.</p>

<p>For example, to help a TTS engine properly render an e-mail address, the following code could be used:</p>

<pre>&lt;prompt&gt; This is a test to show proper rendering of an email address
&lt;break size=&ldquo;100&rdquo;/&gt;
&lt;say-as interpret-as=&ldquo;net&rdquo; format=&ldquo;email&rdquo;&gt;tester@mydomain.com&lt;/say-as&gt;<br />
&lt;/prompt&gt;
</pre>

<p>This is nice, but the options provided for the &lt;say-as&gt; element are somewhat limited. As a result, the implementation of this specification can very greatly between different VoiceXML hosting providers. If you decide to take the &lt;say-as&gt; approach to deal with unique pronunciations, you should read the implementation materials for your provider carefully.  Information from the major VoiceXML hosting providers can be reviewed at the following links:</p>
<ul>
<li><a href="http://cafe.bevocal.com/docs/vxml/say-as.html#287683">BeVocal</a> Hosting Platform (custom implementation)</li>
<li><a href="http://studio.tellme.com/vxml2/ref/ssml/say-as.html">TellMe</a> Hosting Platform (custom
implementation)</li>
<li><a href="http://community.voxeo.com/vxml/docs/vxml_m_2.0/say-as.htm">Voxeo</a> Hosting Platform (appears to conform to SSML specification)</li>
</ul>

<strong>Conclusion</strong>
<p>This tutorial provides a basic overview of how to convert RSS feeds into dynamic VoiceXML. It demonstrates the power of XSLT to convert content in one XML format to VoiceXML. XSLT is a powerful enabler of VoiceXML documents and applications, as subsequent tutorials will demonstrate.</p>

<br /><br />
<!-- Creative Commons License -->
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a>
This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike 2.5 License</a>.</p>
<!-- /Creative Commons License -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2005-06-19 16:33:47</wp:post_date>
  <wp:post_date_gmt>2005-06-19 20:33:47</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>rss-to-vxml-pt-ii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2248</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[19]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[19]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Detecting Answering Machines</title>
  <link>http://voiceingov.org/tutorials/detecting-answering-machines/</link>
  <pubDate>Sun, 19 Jun 2005 20:45:24 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=20</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Wait for the beep...</strong>
<p>Applications that utilize outbound calling, whether done through services offered by <a href="http://cafe.bevocal.com/docs/svc_outnotification/index.html">VoiceXML hosting providers</a> or <a href="http://docs.voxeo.com/ccxml/1.0/appendixf_ccxml.htm">through CCXML,</a> must have some way of dealing with answering machines.  This can be a tricky business, because the number of different types of answering machines (to say nothing of voice mail, answering services, etc.) makes it hard to create a standard interface for identifying machines and responding accordingly.</p>

<p>There is an <a href="http://studio.tellme.com/notifier/ansmach/ansmach.html">interesting tutorial</a> available on answering machine detection from the TellMe Studio site.  The following paragraphs and sample code are my own humble attempt to address this pesky dilemma.  Please feel free to use (and modify) the code described on this page.  Future thanks for sharing any enhancements you make with me.</p>

<strong>Assumptions</strong>
<p>If we assume that customers are aware that from time to time they may get a call with information about a service (e.g., a campground or park reservation, notice to make a payment), then it should be fairly easy to place an out bound call that presents the user with an introductory message.  This message will include a VoiceXML form that accepts only a specific sequence of dtmf keys as a valid response - something only a human could understand and interact with. If this assumption is reasonable, then the approach described below for detecting answering machines should be fairly straightforward to follow.</p>

<strong>The Answering Machine Detection Script</strong>
<p>The file presents the caller with an introductory message, and accepts only *-9-8 as a valid entry.  An answering machine message should throw a nomatch event -- the nomatch logic checks the length of the call and tests it against a pre-established limit.  If the call limit has not been exceeded, a reprompt is thrown but there is no text in the second prompt.  This means that there will be no strange utterances left on the answering machine of the call recipient if the answering machine starts recording before the threshold is exceeded.</p>

<p>Any utterance (or lack of utterance) that doesn't match the grammar continues this cycle until the threshold is exceeded.  It then transitions to a listener form that waits to hear the end of the answering machine message.  After 2.5 seconds of silence (following, hopefully, the answering machine beep) it transitions to a message form that plays the message for the call recipient's answering machine.</p>

<a href="../xfiles/tutorials/ans_machine_detect.vxml">Download the script</a>

<p>(Note - you may notice that this file includes the BeVocal DTD.  I make use of a BeVocal extension - the session variable <a href="http://cafe.bevocal.com/docs/vxml/variables.html#274638">"session.bevocal.timeincall"</a>- to make this work.   As such, the BeVocal DTD is required and it must be run on the BeVocal platform.)</p>

<br /><br />
<!-- Creative Commons License -->
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a>
This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike 2.5 License</a>.</p>
<!-- /Creative Commons License -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>20</wp:post_id>
  <wp:post_date>2005-06-19 16:45:24</wp:post_date>
  <wp:post_date_gmt>2005-06-19 20:45:24</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>detecting-answering-machines</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2248</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[20]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[20]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Adventures in Client Side Scripting</title>
  <link>http://voiceingov.org/tutorials/adventures-in-client-side-scripting/</link>
  <pubDate>Sun, 19 Jun 2005 20:54:13 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=21</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Increased Functionality = Increased Complexity?</strong>
<p>Sophisticated VoiceXML applications, like their visual counterparts rely heavily on information stored in back-end databases. Such applications may be executed in an application environment where the code that is consumed by the VoiceXML interpreter is generated at run time. It is quite feasible, and sometime very desirable, to engineer VoiceXML applications in this way using programming languages like PHP, ASP and JSP (among others). For example, a VoiceXML application that provides information updates might be designed to query a database at run time to alert the caller to any new updates. The trade off for this level of sophistication is greater complexity and additional points of failure for an application.</p>

<p>To understand these issues better, it helps to have an understanding of the different parts of a dynamic VoiceXML application.</p>

<img src="../images/vxml_app_arch.JPG" alt="VoiceXML Application Architecture" />

<p>Clearly, an application designed like this will require components that a more streamlined VoiceXML application would not. In addition to the standard web sever, a run time environment, where application code is executed must be established, as must a database server to process SQL queries.  And while all of these components can reside on the same physical server, production performance requirements typically result in these components being placed on separate servers.</p>

<p>As a result, a problem with any one server can negatively impact the application. Other problems, like an error in executing the application code or a problem with the network connecting the different servers can also cause major problems.  Unfortunately, if your VoiceXML application is heavily reliant on data stored in a back-end database, there aren't a lot of really
good options.</p>

<strong>Working on the client</strong>
<p>Distilled to its essence, the real power of VoiceXML is that it extends the traditional web development paradigm to the telephone. This underlying development paradigm includes a host of features that help boost the performance of web applications.For example, storing web content and files in a local cache can speed up the delivery of information to end users. Most users are never even aware of this process, but it is a fundamental feature of visual browsers and traditional web pages/applications.</p>
<p>Visual web application developers have learned to leverage this client-side cache by using client side scripting and (where appropriate) storing look up data on the client as well. This is typically done through the use of JavaScript arrays, which act in a way not unlike flat database files. (There is an excellent overview of multidimensional JavaScript arrays at <a href="http://developer.netscape.com/viewsource/goodman_arrays.html">http://developer.netscape.com/viewsource/goodman_arrays.html</a>.)
</p>
<p>This same approach can be used in VoiceXML applications as well. As evidenced by some of the other tutorials on this site, JavaScript is fully incorporated into VoiceXML.</p>

<strong>Multidimensional JavaScript Arrays in VoiceXML</strong>
<p>In order to demonstrate the power of multidimensional arrays in voice applications, we need to identify a suitable example whose functions we will emulate. For this example, I have chosen an application created by the State of Delaware - the Internet Access Locater (<a href="http://www.state.de.us/dti/vxml.shtml">http://www.state.de.us/dti/vxml.shtml</a>). This application follows the traditional multi-tier architecture found in most web applications with a separation of presentation, application and database layers.</p>

<p>To be clear, this application works well, and the architectural model used is sound. However, the data that is used by this application changes infrequently. Since, the application utilizes and external VoiceXML interpreter, there is always the potential for a degradation in performances caused by problems with the connection between the VoiceXML interpreter and the underlying application layer. This potential degradation can be avoided by storing the data used by the application on the client side (e.g., the VoiceXML interpreter), instead of in a back end database.</p>

<strong>Caching Data on the Client Side</strong>
<p>In a VoiceXML application, the "client" is actually the VoiceXML interpreter which acts as sort of proxy client for a caller's telephone. (In the VoiceXML application architecture, it isn't really feasible to store information on an end users phone.) In order to cache files on a VoiceXML interpreter, the appropriate HTTP headers need to be sent when the document is fetched. There is an excellent article on the benefits of caching data to improve the performance of VoiceXML applications available at <a href="http://www.voicexmlreview.org/Dec2002/features/vxml_app_performance.html">http://www.voicexmlreview.org/Dec2002/features/vxml_app_performance.html</a>
which provides more detail on this point.</p>

<strong>Conclusion</strong>
<p>The powerful combination of multidimensional JavaScript arrays and the caching features of VoiceXML interpreters (when used for the right kinds of data-driven voice applications) can go a long way toward improving performance. This approach is probably not right for every application, particularly if the data being used is updated regularly or changes frequently. But for applications where data does not change with great frequency, it is a viable approach to enhance performance.</p>

<p>A complete re-write of the State of Delaware's Internet Access Locater system using client-side VoiceXML and multidimensional JavaScript arrays <a href="../xfiles/tutorials/mda_cache_vxml.zip">can be obtained here</a>. This application is optimized to run on the BeVocal platform, but it could be modified easily to work on other VoiceXML platforms.</p>

<br /><br />
<!-- Creative Commons License -->
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a>
This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike 2.5 License</a>.</p>
<!-- /Creative Commons License -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>2005-06-19 16:54:13</wp:post_date>
  <wp:post_date_gmt>2005-06-19 20:54:13</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>adventures-in-client-side-scripting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2248</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[21]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[21]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_256357c0d28ac8711a8293885aa69c03</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8e46c216b5a33b71f7ad8ca376d89af2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_66f6e1d8d48f263c868169a4bb975ba1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Obfuscating User Input</title>
  <link>http://voiceingov.org/tutorials/obfuscating-user-inpuit/</link>
  <pubDate>Sun, 19 Jun 2005 21:09:14 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=22</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Controlling sensitive information on hosting platforms</strong>

<p>When deploying voice applications, the first question developers often face is whether to host their own voice gateway or outsource this function to an application service provider (ASP). To help with this question, there is a great <a href="http://www.developer.com/voice/article.php/1569431">article in Developer.com</a>.  If you are outsourcing this function, then there are several things you will need to keep in mind - most of these are discussed in the Developer.com article. One very important consideration for governments deploying voice applications using the ASP model is the protection of citizen information.</p>

<p>VoiceXML ASPs like <a href="http://cafe.bevocal.com/docs/tools/logbrowser.html#192640">BeVocal</a> and <a href="http://studio.tellme.com/help/debuglegend.html">TellMe</a> provide suites of online tools for developers, among them are tools to help developers analyze calls. Typically, these log analyzing tools capture information that is spoken or input via DTMF by users -- there are a number of instances where having this information is useful in debugging an application and/or analyzing how it is working. However, if you are creating voice applications that will be used by citizens and taxpayers, chances are these applications will utilize citizen-specific identifiers (e.g., Social Security numbers).</p>

<p>For some very obvious reasons, it is generally not a very good idea to have this information stored in the log files of a VoiceXML ASP. Fortunately, there is something developers can do.</p>

<strong>BeVocal Platform</strong>

<p>The BeVocal Platform provides an extension to the VoiceXML 2.0 specification to allow developers to control the logging of user input. The <a href="http://cafe.bevocal.com/docs/vxml/index.html?content=properties.html#285537">bevocal.logging</a> property lets a developer manipulate when information is recorded in the trace logs used in BeVocal's log browser tool. The following code sets the value of the bevocal.logging property to &ldquo;false&rdquo; and prevents user input from being logged (the default value is &ldquo;true&rdquo;).</p>

<pre>
&lt;property name=&ldquo;bevocal.logging&rdquo; value=&ldquo;false&rdquo;/&gt;
</pre>

The BeVocal platform also allows devleopers to have their log files (and any captured utterances) encrypted.  This is accomplised through the use of naother extension - the <a href="http://cafe.bevocal.com/docs/vxml/properties.html#312498">bevocal.securelogging.enabled</a> property.

<strong>TellMe Platform</strong>
<p>Just like the BeVocal Platform, the TellMe platform has its own extension to control logging. TellMe provides the &ldquo;tellme.confidential&rdquo; attribute to the <a href="http://studio.tellme.com/vxml2/ref/elements/property.html">Property Tag</a>.  One point of contrast between the two platforms -- unlike the BeVocal extension, the &ldquo;tellme.confidential&rdquo; attribute must be set to &ldquo;true&rdquo; in order to control logging.</p>

<br /><br />
<!-- Creative Commons License -->
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a>
This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike 2.5 License</a>.</p>
<!-- /Creative Commons License -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>22</wp:post_id>
  <wp:post_date>2005-06-19 17:09:14</wp:post_date>
  <wp:post_date_gmt>2005-06-19 21:09:14</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>obfuscating-user-inpuit</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2248</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[22]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[22]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Voice Tax Calculator</title>
  <link>http://voiceingov.org/tutorials/voice-tax-calculator/</link>
  <pubDate>Sun, 19 Jun 2005 21:14:28 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=23</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Tax Returns: Accuracy Matters!</strong>
<p>Every year, as taxpayers begin the annual rite of filling out tax forms, governments struggle with ways to streamline the processing and improve the accuracy of tax returns. Tax returns that contain errors are bad for citizens - it can mean the difference between getting a big, or not so big tax refund. It can also dramatically impact how fast refunds are issued. Inaccurate returns are also bad for governments - inaccurate tax returns require more resources to process, particularly if those returns are filed the old fashioned way: on paper.</p>

<p>To be sure, the Internet era has ushered in a host of different options for taxpayers that can help governments better ensure the accuracy of tax return data. Online tax filing, which is <a href="http://www.zwire.com/site/news.cfm?newsid=7970440&amp;BRD=1643&amp;PAG=461&amp;dept_id=10486&amp;rfi=6">growing in popularity</a>, can automatically correct mistakes on tax returns and automatically calculate a tax liability - dramatically reducing the chance for errors. In addition, software tools used by professional tax preparers can generate error free returns quickly and easily.</p>

<p>However, concerns about online filing <a href="http://www.gcn.com/vol1_no1/daily-updates/22679-1.html">continue to linger</a>. Governments need to have multi-tiered strategies to enable the submission of accurate tax returns, even for those who still insist on filing paper returns. By using VoiceXML and JavaScript, governments can provide one such mechanism in a way that is simple, cheap and easy to deploy.</p>

<strong>A Simple VoiceXML Tax Calculator</strong>
<p>Building a simple tax calculator that is available through any standard telephone is one way that governments can help ensure greater accuracy on tax returns. Who hasn't gotten to the end of their tax return at one time or another and thought - "Gee, did I calculate that right?"</p>

<strong>JavaScript Code</strong>
<p>To begin, we'll need to assemble some JavaScript code to do a tax calculation. <a href="http://www.taxadmin.org/fta/rate/ind_inc.html">Most states</a> and the federal government use graduated tax rates to calculate a tax liability. In addition, pretax deductions (which reduce taxable income) and post-tax credits (which provide a dollar for dollar reduction in tax liability) are common features. As such, we'll use the State of Delaware in this example since all of these features are used for Delaware tax purposes.  However, we'll take care in building the "guts" of our voice tax calculator to make it easy to modify for other governments that have a similar tax structure.</p>

<p>To begin with, lets declare some variables that we'll use to calculate a tax liability. We'll do this using the JavaScript keyword "var":</p>

<pre>
/* A variable to hold our AGI amount */
var agi_amt;

/* A variable to hold our deduction amount */
var deduct_amt;

/* A variable to hold the number of post-tax credits */
var credit_num;

/* These variables will hold some interim tax calculations.
We'll initialize them now by setting their value equal to zero */

var amt_1=0;
var amt_2=0;
var amt_3=0;
var amt_4=0;
var amt_5=0;
var amt_6=0;
var amt_7=0;

/* Set income tax brackets */
var bracket_1_low = 0;
var bracket_1_high = 2000;<br />
var bracket_2_low = 2001;<br />
var bracket_2_high = 5000;<br />
var bracket_3_low = 5001;<br />
var bracket_3_high = 10000;<br />
var bracket_4_low = 10001;<br />
var bracket_4_high = 20000;<br />
var bracket_5_low = 20001;<br />
var bracket_5_high = 25000;<br />
var bracket_6_low = 25001;<br />
var bracket_6_high = 60000;<br />
var bracket_7 = 60001;<br />

/* Declare income tax rates */<br />
var rate_1 = 0;<br />
var rate_2 = .022;<br />
var rate_3 = .039;<br />
var rate_4 = .048;<br />
var rate_5 = .052;<br />
var rate_6 = .055;<br />
var rate_7 = .0595;<br />

/* Declare personal credit and standard deduction amounts */
var pers_credit = 110;<br />
var standard_deduct = 3250;<br />
</pre>

<p>OK - we now have all of the pieces that we'll need to calculate a tax liability. To carry out this calculation, we'll use a <a href="http://www.juicystudio.com/tutorial/javascript/functions.asp">JavaScript function</a> that we can call rom the appropriate part of our VoiceXML document (we haven't built that part yet, but we'll get there shortly). We do this using the JavaScript "function" keyword.</p>

<pre>/* Tax Calculation Function<br />
a = adjusted gross income; b = deduction amount; c = number of
personal credits. */<br />
function liability (a, b, c) {<br />
<br />
/* Deduction amount must be at least as much as standard
deduction. */<br />

if (b&gt;standard_deduct) { var deduct_amt=b; } else { var
deduct_amt=standard_deduct; }<br />

<br />
/*At least one personal credit must be taken*/<br />
if (c&lt;1) { var num_cred=1; } else { var num_cred=c; }  <br />
<br />
var tax_inc = (a-deduct_amt);<br />
if (tax_inc&gt;bracket_1_high) {
amt_1=((bracket_1_high-bracket_1_low)*rate_1); } else if
(tax_inc&gt;=bracket_1_low) {
amt_1=((tax_inc-bracket_1_low)*rate_1); } else { amt_1=0; }<br />

<br />
if (tax_inc&gt;bracket_2_high) {
amt_2=((bracket_2_high-bracket_2_low)*rate_2); } else if
(tax_inc&gt;=bracket_2_low) {
amt_2=((tax_inc-bracket_2_low)*rate_2); } else { amt_2=0; }<br />

<br />
if (tax_inc&gt;bracket_3_high) {
amt_3=((bracket_3_high-bracket_3_low)*rate_3); } else if
(tax_inc&gt;=bracket_3_low) {
amt_3=((tax_inc-bracket_3_low)*rate_3); } else { amt_3=0; }<br />
<br />
if (tax_inc&gt;bracket_4_high) {
amt_4=((bracket_4_high-bracket_4_low)*rate_4); } else if
(tax_inc&gt;=bracket_4_low) {
amt_4=((tax_inc-bracket_4_low)*rate_4); } else { amt_4=0; }<br />
<br />

if (tax_inc&gt;bracket_5_high) {
amt_5=((bracket_5_high-bracket_5_low)*rate_5); } else if
(tax_inc&gt;=bracket_5_low) {
amt_5=((tax_inc-bracket_5_low)*rate_5); } else { amt_5=0; }<br />
<br />
if (tax_inc&gt;bracket_6_high) {
amt_6=((bracket_6_high-bracket_6_low)*rate_6); } else if
(tax_inc&gt;=bracket_6_low) {
amt_6=((tax_inc-bracket_6_low)*rate_6); } else { amt_6=0; }<br />

<br />
if (tax_inc&gt;bracket_7) { amt_7=((tax_inc-bracket_7)*rate_7);}
else { amt_7=0; }<br />
<br />
var tax_amt = amt_1+amt_2+amt_3+amt_4+amt_5+amt_6+amt_7;<br />

var tax_liab = tax_amt-(num_cred*pers_credit);<br />
<br />
/* Tax liability can not be lower than zero */<br />
if (tax_liab &gt; 0) {<br />
return Math.round(tax_liab);<br />

}<br />
else { return 0;<br />
}</pre>

<p>Although this looks complicated, the tax calculation is really very straightforward. There are probably more efficient ways of writing this function, but doing it this way makes the tax calculation more transparent - for you, and for future developers who might modify or build on your work.</p>

<p>Our function requires three parameters - defined generically as <strong>a</strong>, <strong>b</strong> and <strong>c</strong>.   These values are passed to the function as "arguments" that are collected from the user in different parts of the VoiceXML application. These values will be used to calculate the tax liability. We first check to make sure that the deduction amount that is entered by the user is larger than the standard deduction amount. If it isn't, we'll assign the value of the standard deduction. This helps make sure that the user is not claiming less than the standard deduction amount - a common mistake on self prepared returns.</p>

<p>Similarly, we'll make sure that at least one personal credit is taken. Every taxpayer gets at least one credit for themselves, and more if they can claim others as dependents. To avoid a common mistake, we'll make sure that each user gets at least one credit. Next, we'll use our deduction amount to calculate taxable income. This is the amount of income that is run through our rate structure.</p>

<p>Graduated tax structures apply a specified rate to a given range of income. The final tax liability is the sum of the amounts generated from applying the different rates to these "tax brackets." This might help clarify why we declared some variables earlier to hold our interim calculations (i.e., amt_1, amt_2, etc.).</p>

<p>The interim liability for each tax bracket is equal to the the amount of taxable income in that bracket multiplied by the rate for that bracket. Employing an "If / Else" control structure, our JavaScript function uses the taxable income amount that we calculated and first checks to see if it is larger than the high end of the first bracket. If it is, then the tax amount for that bracket is equal to the high end of the bracket minus the low end of the bracket multiplied by that bracket's rate. It assigns this value to our temporary variable amt_1. We then move on to the next bracket and repeat this exercise.</p>

<pre>
<u>For example</u>:<br />
Interim amount = (High end of the bracket - low end of the
bracket) * bracket rate<br />
or<br />
amt_1=((bracket_1_high-bracket_1_low)*rate_1)
</pre>

<p>In practice, we will reach a point where the amount of taxable income is exceeded by the high end of one of our brackets.  When we reach that point, we want to take our taxable income amount and subtract the low end of the bracket. We then apply the final tax rate and sum up all of our temporary variables (i.e., amt_1 through amt_7, one for each of our tax brackets). This is the unadjusted tax liability amount.</p>

<p>Next we reduce our tax liability by the value of our personal credits. We make sure that the amount we calculate is not less than zero and then we round the result. Note - our check to ensure that the final liability is greater than zero is a function of our example state's tax structure. Some states (and the federal government) use "refundable" credits which can actually result in a negative tax liability, which means that the taxpayer can get a check for the overage amount. A notable example of a refundable credit used by some states and the federal government is the <a href="http://www.irs.gov/individuals/article/0,,id=96456,00.html">Earned Income Tax Credit</a>.</p>

<strong>VoiceXML Code</strong>
<p>Blocks of JavaScript can be contained within VoiceXML documents using the &lt;script&gt; element. This isn't the only place you can use JavaScript in a VoiceXML document (a number of VoiceXML elements can utilize JavaScript expressions through the "expr" attribute - as demonstrated below), but if you are reusing functions or variables in multiple parts of your document, its a good idea to keep your code self contained. Because several of  the operators in JavaScript (&lt;, &gt;, &amp;, &amp;&amp;) have special significance in XML, we'll enclose our script in a CDATA section, like so:</p>

<pre>
&lt;script&gt;<br />

&lt;![CDATA[<br />
... JavaScript goes here ...<br />

]]&gt;<br />
&lt;/script&gt;
</pre>

<p>Next we'll build some VoiceXML dialogs to collect the necessary information from the caller to be used in our JavaScript tax calculator.</p>

<p>In a nutshell, we want to create dialogs to collect three items: the adjusted gross income amount, the deduction amount and the number of personal credits. Each of these values can be mapped to a specific line on a tax return, so it is relatively simple to create these parts of our VoiceXML document. We'll just ask the user to enter the number on a specific line of the return. We also want to provide a dialog to read back the values that are entered by the user. This will help us avoid confusing taxpayers with inaccurate results from misinterpreted input.</p>

<p>After we have collected and verified the necessary information, we need to pass these values to our JavaScript function so that it can calculate our tax liability. We do this by "calling" our function from within our VoiceXML document and passing it the arguments it needs to return a tax calculation, like so:</p>

<pre>
&lt;prompt&gt;<br />
&lt;value expr="liability(agi_amt, deduct_amt, credit_num)"/&gt;<br />

&lt;/prompt&gt;
</pre>

<p>We call our function by name - we previously named it "liability", the word that appears immediately after the function keyword above - and include the arguments in parenthesis separated by commas. You may now better understand why the last statement or two in our function include the word "return" - we have provided our JavaScript function with some values and are asking it to return a calculation.</p>

<p>By inserting the &lt;value&gt; element between the &lt;prompt&gt;&lt;/prompt&gt; tags, we are telling the VoiceXML interpreter to speak the result of the function call. We use the "expr" attribute to assign the amount returned from the function to the &lt;value&gt; element. If the amount returned is, for example, $400 the result would be the same as if we put the words "four hundred" between the &lt;prompt&gt;&lt;/prompt&gt; tags, like so:</p>

<pre>
&lt;prompt&gt;<br />
Four hundred<br />
&lt;/prompt&gt;</pre>

<p>Finally, we'll offer a simple dialog for taxpayers that run into trouble. Users can access this section by uttering the word "help" at selected points in the application.</p>

<p>The completed VoiceXML/JavaScript tax checker application <a href="../xfiles/tutorials/tax_calc.zip">can be obtained here</a>. Note - this application is optimized to work on the BeVocal platform, but it could easily be modified to work on other VoiceXML implimentations.</p>

<strong>Conclusion</strong>
<p>By offering multiple options to taxpayers to better enable them to submit accurate tax returns, governments can cut processing costs, speed refunds and provide better customer service. Adding voice applications to the mix - either through the use of a simple, highly available tax checking application like the one discussed here, or through a full blown telephone tax filing application - can help achieve this goal.</p>
<br /><br />
<!-- Creative Commons License -->
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a>
This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike 2.5 License</a>.</p>
<!-- /Creative Commons License -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2005-06-19 17:14:28</wp:post_date>
  <wp:post_date_gmt>2005-06-19 21:14:28</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voice-tax-calculator</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2248</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[23]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[23]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>VoiceXML and the Democratic Divide</title>
  <link>http://voiceingov.org/2005/06/20/voicexml-and-the-democratic-divide/</link>
  <pubDate>Mon, 20 Jun 2005 15:32:47 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=24</guid>
  <description/>
  <content:encoded><![CDATA[An interesting paper appears in the Internet journal "<a href="http://www.firstmonday.org/">First Monday</a>" written by Stephanie Birdsall of Brown University discussing the issue of <a href="http://www.firstmonday.org/issues/issue10_4/birdsall/index.html">remote voting and its impact on political participation.</a>

Ms. Birdsall makes some important observations about voting over the Internet, and the policy implications of the uneven distribution of Internet access (popularly referred to as the Digital Divide):



<blockquote>Problems with security, authentication, and privacy are generally cited as the more significant barriers to an online voting system, but even if those more technical problems were addressed, this paper argues that merging voting and ICT [information and communications technology] gives new relevance to the concerns raised originally by the emergence of the digital divide. Both voter turnout and Internet usage rates have well documented demographic components, income groups, racial groups, age groups, and education groups have different usage rates.

Internet use is not an ethereal, boundary"“less activity, it is situated in a spatial/geographic context.
</blockquote>


This is an excellent paper, and I agree with the concerns it raises.  However, if it is fair to argue that Internet use does indeed happen in a physical place, its fair to point out that the "place" is less and less frequently in front of a desktop computer.  Increasingly, governments are looking to alternative delivery channels for Internet based content and services, and telephones (as the most ubiquitous communications device of all) are an obvious consideration.

There is enormous potential for developing phone-based voting system that addresses issues of security, privacy and accuracy and also addresses the access issues raised by Ms. Birdsall.  And while <a href="http://www.fcc.gov/Bureaus/Common_Carrier/Reports/FCC-State_Link/IAD/pntris04.pdf">telephone penetration</a> is still an issue in many areas, particularly with lower income citizens, penetration rates are significantly higher than for Internet-connected computers.

VoiceXML (most notably some of the features in the <a href="http://www.w3.org/TR/2005/CR-voicexml21-20050613/">developing 2.1 specification</a>) holds enormous promise for supporting a telephone-based voting system.  Read my <a href="http://vote.nist.gov/ecposstatements/phone_voting_whitepaper.doc">paper submitted to the National Institute of Standards and Technology</a> on this subject (Word format).

In the next month, I'll be releasing an <a href="http://sourceforge.net/projects/vdemocracy/">open source implementation</a> of the principles discussed in this paper "“ stay tuned.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2005-06-20 11:32:47</wp:post_date>
  <wp:post_date_gmt>2005-06-20 15:32:47</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voicexml-and-the-democratic-divide</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="phone-voting"><![CDATA[Phone Voting]]></category>
</item>
<item>
  <title>Who's using phone voting?</title>
  <link>http://voiceingov.org/2005/06/22/whos-using-phone-voting/</link>
  <pubDate>Thu, 23 Jun 2005 01:56:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=25</guid>
  <description/>
  <content:encoded><![CDATA[<p>Voting is one of the most fundamental activities of a representative democracy, yet the issue of Internet voting continues to be <a href="http://www.wired.com/news/business/0,1367,62109,00.html">a contentious one</a> for governments in the USA and Europe. The issue of phone-based voting is <a href="http://vote.org/televote.htm">not new</a> , although its consideration by and large predates the development of VoiceXML. Most current discussions of phone-based voting involve the use of cell phones with WAP technologies or text messaging.</p>

<p>Telephone voting is currently used in England (as is voting by text message).  Some interesting information on the use of phone voting in England can be found <a href="http://www.govtech.net/magazine/story.php?id=29354">here</a>.  I have read in some places that Oregon is testing telephone voting for absentee voters, but I've found no hard information on this.</p>

<p>An argument could be made that phone-based voting - using VoiceXML and related technologies - could go a long way towards addressing the issues raised in the current Internet voting debate.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>2005-06-22 21:56:45</wp:post_date>
  <wp:post_date_gmt>2005-06-23 01:56:45</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>whos-using-phone-voting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <category domain="category" nicename="phone-voting"><![CDATA[Phone Voting]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[25]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[25]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>68.34.252.71</wp:comment_author_IP>
    <wp:comment_date>2005-06-23 06:54:19</wp:comment_date>
    <wp:comment_date_gmt>2005-06-23 10:54:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Phone voting is also used by arbitrators in union negotiations - have a look at the discussion on the <a href="http://www.adr.org/sp.asp?id=22070" rel="nofollow">American Arbitration Association</a> website.

Additionally, a number of <a href="http://www.enterprisefunds.com/services/proxy/voteproxy.asp" rel="nofollow">mutual funds and brokerages</a> offer phone voting for their shareholders when voting on fund related issues.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-06-23 10:54:19</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>mheadd@diamondtechnologies.com</wp:comment_author_email>
    <wp:comment_author_url>http://markheadd.lunarpages.com</wp:comment_author_url>
    <wp:comment_author_IP>66.237.221.18</wp:comment_author_IP>
    <wp:comment_date>2005-06-28 09:27:42</wp:comment_date>
    <wp:comment_date_gmt>2005-06-28 13:27:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[A report by <a href="http://www.electoralcommission.gov.uk/" rel="nofollow">The Electoral Commission</a> evaluating the use of electronic remote voting (including phone voting) in the Swindon Borough Council elections of 2002 can be found <a href="http://www.electoralcommission.gov.uk/files/dms/Swindon-final_6707-6259__E__N__S__W__.pdf" rel="nofollow">here</a>.

Among the findings:

"A total of 76% of those who voted by telephone completed the questionnaire they were sent. Given that older aged groups predominated amongst those using this method of voting, it is not surprising that 40% of respondents said they were retired. More than 90% said they voted in all or most local and general elections, from which it would appear that the vast majority would have been likely to vote in a polling station if the telephone option had not been available.

Ninety nine per cent of respondents said they found the arrangements for telephone voting straightforward and the instructions clear and understandable. But the respondents were obviously those who had successfully completed the process of telephone voting, not those who had perhaps tried and failed. Confidence in the security of their vote was high: 78% rated their confidence at levels 1 or 2 on a scale of 1-5."

This suggests that most users of the phone channel for voting in this election might have voted anyway were the option not provided.  However, simply providing the choice of different voting options may lead to a more equitable distribution of resources to assist voters on Election Day.

Who wouldn't want shorter lines at polling places, or more time from a poll worker (if needed)?.  Providing different options for voters might lead to this kind of an outcome.
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-06-28 13:27:42</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Municipal Broadband to the Rescue</title>
  <link>http://voiceingov.org/2005/06/23/bridging-the-digital-divide-with-municipal-broadband/</link>
  <pubDate>Thu, 23 Jun 2005 18:21:11 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=26</guid>
  <description/>
  <content:encoded><![CDATA[<p>It appears that <a href="http://news.com.com/Should+cities+be+ISPs/2100-1034_3-5758262.html?tag=nefd.lede">Congress may soon weigh in</a> on weather municipal governments should provide internet access by implementing large scale wireless broadband infrastructures.  <a href="http://www.wirelessphiladelphia.org/">Philadelphia</a> is among the governments that are leading the charge in this area, although some cities <a href="http://www.utahpolitics.org/archives/000004.shtml">out west</a> have been after this for some time now.</p>

<p>There are a number of arguments for and against municipal broadband initiatives "“ some hold water, some don't.  One of the more compelling for proponents (and repelling for opponents) is that municipal broadband initiatives will help bridge the "Digital Divide."  Dianah Neff, CIO for the City of Philadelphia, speaking in support of the City's plan said:</p>



<blockquote>Our focus is that 75 to 85 percent of our population in our low-income and minority areas that don't have access.  When we talked to them and we did surveys with them, they said 76 percent of the time that cost was the No. 1 reason why they didn't have access to the Internet.</blockquote>



<p>Those critical of such plans do make a good case on at least one point: simply providing access to the Internet does not address the number of other factors that challenge citizens in fully exploiting this resource.  A number of other factors can impede a person's <a href="http://www.pewinternet.org/trends/InternetAdoption.jpg">ability to utilize the Internet</a> "“ education, reading ability, general computer literacy to name just a few.</p>

<p>One of the significant benefits of using the telephone as a delivery mechanism for Internet service and content is that it can help address some of these basic computer and Internet acclimation issues.  The degree of telephone literacy among citizens far out paces computer literacy "“ stated bluntly, phones are a lot easier to use than computers.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2005-06-23 14:21:11</wp:post_date>
  <wp:post_date_gmt>2005-06-23 18:21:11</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>bridging-the-digital-divide-with-municipal-broadband</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="digital-divide"><![CDATA[Digital Divide]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_d92905469a799ebee5048554634b1d62</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_572426f60c314c5f9a099211be34a4b7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_71d380be307ba965e41402659e3459ba</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>mheadd@diamondtechnologies.com</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>66.237.221.18</wp:comment_author_IP>
    <wp:comment_date>2005-06-27 14:30:10</wp:comment_date>
    <wp:comment_date_gmt>2005-06-27 18:30:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sure enough:

On Thursday, U.S. Senators John McCain and Frank R. Lautenberg introduced the Community Broadband Act of 2005 in the Senate. Supporters see the bill as an alternative to the bill recently introduced by Congressman Pete Sessions prohibiting municipalities from offering wireless Internet access to residents and local businesses.

http://www.govtech.net/news/news.php?id=94416]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-06-27 18:30:10</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>SOAP up your VoiceXML Apps</title>
  <link>http://voiceingov.org/2005/06/24/soap-up-your-voicexml-apps/</link>
  <pubDate>Fri, 24 Jun 2005 11:58:00 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=27</guid>
  <description/>
  <content:encoded><![CDATA[Both the <a href="http://cafe.bevocal.com">BeVocal</a> and <a href="http://community.voxeo.com">Voxeo</a> VoiceXML platforms incorporate the Simple Object Access Protocol (SOAP) and Web Services Definition Language (WSDL) specifications to provide some interesting options for VoiceXML developers.

Both platforms allow developers to create a proxy object for a web service by referencing a WSDL file for a given service.  By doing this, developers can then access the methods of a web service as if it were simply a JavaScript object.  The proxy object handles all the conversion necessary to transform a call to a JavaScript function to a SOAP method.

This functionality provides another way for developers to separate the presentation layer (in the case of a voice application, the rendering of VoiceXML) from the business layer.  It also allows VoiceXML developers to access the <a href="http://www.xmethods.net/">wealth of different services available</a> from web services providers.  Developers should pay close attention to the implementation details provided on both he <a href="http://www.vxml.org/frame.jsp?page=appendixo.htm">Voxeo</a> and <a href="http://cafe.bevocal.com/docs/vxml/soap.html#270560">BeVocal</a> sites.

One caveat, it appears that at least the BeVocal implementation works only with RPC-oriented services, not document-oriented services (support for document-oriented services  is planned for a later release).  Not sure if the Voxeo platform supports document-oriented services.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2005-06-24 07:58:00</wp:post_date>
  <wp:post_date_gmt>2005-06-24 11:58:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>soap-up-your-voicexml-apps</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>The Age of "Open" Telephony</title>
  <link>http://voiceingov.org/2005/06/25/the-age-of-open-telepnony/</link>
  <pubDate>Sat, 25 Jun 2005 22:11:20 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=28</guid>
  <description/>
  <content:encoded><![CDATA[Are we entering a new age of telephony, one where the old rules don't apply and new opportunities exist?  Several developing trends suggest that the telephone industry (typically very slow to change) is headed for a big shake up.  What is the catalyst for this change?  Technology, of course.

Who can deny the impact that the development of open standards for phone-based applications - VoiceXML, CCXML, SRGS, etc. - has had on the vendor community.  Are there even any vendors left that don't support VoiceXML?  <a href="http://www.voicexmlreview.org/Apr2005/features/softswitch.html">One article</a> discussing how these standards are creating new opportunities appears in the recent issue of VoiceXML Review.  Its focus is a discussion of the feasibility of using CCXML to create a software <a href="http://en.wikipedia.org/wiki/PBX">PBX</a>.

Other trends are also driving change, like the emergence of Voice over Internet Protocol (<a href="http://www.fcc.gov/voip/">VoIP</a>) and the maturity of new open source software products like <a href="http://www.asterisk.org/">Asterisk</a>.  A nice article discussing <a href="http://www.onlamp.com/pub/a/onlamp/2005/06/23/pbx.html">the impact that Asterisk is having</a> on the telephone industry can be found on the O'Reilly OnLAMP site.   There is also an <a href="http://news.com.com/Is+the+telephone+industry+ready+for+open+source/2008-1082_3-5737703.html">interview with Mark Spencer</a> of Digium (the company that makes Asterisk) available from CNET News.  To put this trend into perspective, using open source tools like Asterisk:



<blockquote>With a Linux server, off-the-shelf LAN/WAN hardware, a broadband connection, and SIP-compatible telephone handsets, one can now build a fully functional telephone system, complete with high-end features.</blockquote>



Will the telephone industry ever be the same again?  Probably not "“ and that is hugely important for governments as major users of telephone services.  It's also critical given government's  <a href="http://governing.com/articles/4voip.htm">regulatory oversight and tax administration </a> role over the telephone industry.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2005-06-25 18:11:20</wp:post_date>
  <wp:post_date_gmt>2005-06-25 22:11:20</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>the-age-of-open-telepnony</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[28]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[28]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>mheadd@diamondtechnologies.com</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>66.237.221.18</wp:comment_author_IP>
    <wp:comment_date>2005-06-27 14:51:27</wp:comment_date>
    <wp:comment_date_gmt>2005-06-27 18:51:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The Congressional Budget Office has some information on <a href="http://www.cbo.gov/showdoc.cfm?index=5040&amp;sequence=0" rel="nofollow">their web site</a> detailing the potential impact of the shift of telecom services to the internet (i.e., VoIP) vis-Ã -vis Congressional efforts to restrict the ability of states to tax internet access.

This analysis is a bit old, and focuses on one particular piece of legislation, but it does help frame the issue (at least from a tax collection perspective) for state and local governments.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-06-27 18:51:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>I Like the Sound of These</title>
  <link>http://voiceingov.org/2005/06/29/i-like-the-sound-of-these/</link>
  <pubDate>Wed, 29 Jun 2005 11:50:07 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=29</guid>
  <description/>
  <content:encoded><![CDATA[There are some great resources on the web for developers wanting to learn more about voice applications, and for others who want to know what is possible with voice technologies.  Here are a few of my favorites.

There is a huge trove of articles available on the <a href="http://www.developer.com/voice/">Developer.com</a> site that features articles on VoIP, speech technology platforms and a large number of very good tutorials.

Ken Rehor's <a href="http://www.kenrehor.com/voicexml/">World of VoiceXML</a> has a large volume of information about voice technologies, including platforms, tutorials, presentations, links to the underlying specs and a lot more.  Worth checking out -- Ken is one of the authors of VoiceXML, and is currently one the <a href="http://www.voicexml.org/bod.html">Board of Directors</a> of the VoiceXML Forum.  He works for Vocalocity -- the company that is the steward of the <a href="http://www.vocalocity.net/products/productdetail.cfm?productid=100010">OpenVXI</a> open source VoiceXML platform.

There is a site called <a href="http://www.hawhaw.de/">HAWHAW</a> (yes, that's actually the name) that is home to one of the coolest <acronym title="PHP Hypertext Preprocessor">PHP</acronym> class libraries I have come across in a while.  Its available for free, and is extremely useful for creating multimodal (voice and mobile) applications.  There are some intuitive examples on this site that can help anyone with experience using PHP and some knowledge of <acronym title="Object Oriented">OO</acronym> programming get started creating mobile and voice applications.  In a few weeks, I hope to have a tutorial posted demonstrating how to use this tool to create a simple application for local governments.  The tutorial will demonstrate how to create a water meter reading submission application that can be accessed via the web, mobile phone (<acronym title="Wireless Access Protocol">WAP</acronym>) or by voice.  Stay tuned... ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>2005-06-29 07:50:07</wp:post_date>
  <wp:post_date_gmt>2005-06-29 11:50:07</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>i-like-the-sound-of-these</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:comment>
    <wp:comment_id>7</wp:comment_id>
    <wp:comment_author><![CDATA[Voice Technologies in Government &raquo; Creating &#8220;Multi-Mobile&#8221; Applications]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=42</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2005-07-16 17:54:27</wp:comment_date>
    <wp:comment_date_gmt>2005-07-16 21:54:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] I&#8217;ve written a brand new tutorial describing how to create &#8220;Multi-Mobile&#8221; applications with PHP. This example uses the powerful HAWHAW library for creating mobile applications, something I&#8217;ve been talking about doing for a whie now. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-07-16 21:54:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Last Call Working Draft of CCXML</title>
  <link>http://voiceingov.org/2005/06/30/last-call-working-draft-of-ccxml/</link>
  <pubDate>Thu, 30 Jun 2005 13:57:58 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=30</guid>
  <description/>
  <content:encoded><![CDATA[The World Wide Web Consortium (W3C) has issued a <a href="http://www.w3.org/TR/2005/WD-ccxml-20050629/">last call working draft</a> version of the Call Control XML 1.0 specification.

<strong>What is CCXML?</strong>

The Call Control eXtensible Markup Language (CCXML) is a standard for implementing call control in voice applications.  It is meant to compliment the VoiceXML standard by providing control over higher level call features like creating and bridging different call legs, placing outbound calls and more.  By contrast, VoiceXML is meant to handle the actual dialog that callers interact with.

In the absence of a call control standard, some VoiceXML platforms have implemented proprietary extensions that provide some of the functionality of CCXML.  Others have implemented entirely different <a href="http://xml.coverpages.org/callXML.html">standalone languages</a> with call control features.  The adoption of a formal standard should make it easier form developers to build portable voice applications and incorporate the <a href="http://www.voxeo.com/library/ccxml.jsp">rich set of features</a> available in CCXML into their voice apps.

<strong>Where is CCXML in the standards approval process?</strong>

Unfortunately, the process used by the W3C is somewhat of a labyrinth.   My understanding of this process leads me to believe that after this "call" for comments, the specification will advance to "Candidate Recommendation" status, which should encourage more vendors to implement it in their platforms.  Those with lots of time, or an inclination for self abuse ( ;-) ), can read more about the W3C approval process <a href="http://www.w3.org/2004/02/Process-20040205/">here</a>.

<strong>Where can I learn more about CCXML?</strong>

Definitely check out <a href="http://www.w3.org/TR/2005/WD-ccxml-20050629/">the spec</a>.  The most comprehensive source of information on CCXML can be found on the <a href="http://docs.voxeo.com/ccxml/1.0/">Voxeo site</a>.  There are also some good tutorials on <a href="http://www.developer.com/voice/article.php/1565751">Developer.com</a>.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>2005-06-30 09:57:58</wp:post_date>
  <wp:post_date_gmt>2005-06-30 13:57:58</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>last-call-working-draft-of-ccxml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>AJAX in VoiceXML Applications</title>
  <link>http://voiceingov.org/2005/07/01/ajax-in-voicexml-applications/</link>
  <pubDate>Fri, 01 Jul 2005 14:09:33 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=31</guid>
  <description/>
  <content:encoded><![CDATA[With all of the buzz of late around <a href="http://en.wikipedia.org/wiki/AJAX">AJAX</a> (an acronym first coined by <a href="http://www.adaptivepath.com/publications/essays/archives/000385.php">Jesse James Garrett</a> to stand for Asynchronous JavaScript and XML), it was only a matter of time before the discussion began about using this approach in VoiceXML applications.  There is an <a href="http://www.voicexmlreview.org/columns/Jun2005_speak_listen.html">interesting article</a> in the new VoiceXML review covering this topic.

The approach described in this article makes use of the new &lt;data&gt; element that is part of the VoiceXML 2.1 specification.  I'm not clear on whether this approach is the same as AJAX, but it is indeed powerful.

AJAX applications rely on a JavaScript object called "<a href="http://www.xml.com/pub/a/2005/02/09/xml-http-request.html">XMLHttpRequest</a>" that allows a web interface to communicate with a backend server without transitioning to new page.   More traditional web applications submit user input to, or request data from, a backend server using the <a href="http://www.w3.org/2001/tag/doc/whenToUseGet.html">HTTP GET and POST methods</a>.  The transmission of this data and the subsequent transition to a new page can sometimes be perceived as disjointed and inelegant by users.  AJAX allows web interfaces to fetch or submit data without transitioning to a new page, making them feel smoother (I guess).

The VoiceXML 2.1 <a href="http://www.w3.org/TR/2005/CR-voicexml21-20050613/#sec-data">&lt;data&gt; element</a> doesn't work exactly like this.  It allows a developer to designate an XML document to be fetched by a VoiceXML interpreter as part of a dialog.  It then exposes that document via the <a href="http://www.w3.org/TR/DOM-Level-2-Core/ecma-script-binding.html">JavaScript binding to the Document Object Model</a>.  Its "AJAX-like" in the sense that it obviates the need for a page transition to render the data in the XML document, but there isn't any asynchronous communication with a backend server through an XMLHttpRequest object.

Given the recent hype, I can understand the desire to characterize the functionality provided by the new 2.1 spec as emulating AJAX.  But I think it's important to point out that callers to a VoiceXML application probably don't perceive page transitions in the same way that users of a visual web application do.  There are <a href="http://cafe.bevocal.com/docs/vxml/fetching.html">ways to manage user reactions</a> to these transitions within VoiceXML and users need to be aware of how to use them effectively.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>31</wp:post_id>
  <wp:post_date>2005-07-01 10:09:33</wp:post_date>
  <wp:post_date_gmt>2005-07-01 14:09:33</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ajax-in-voicexml-applications</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:comment>
    <wp:comment_id>8</wp:comment_id>
    <wp:comment_author><![CDATA[Voice(XML) of the People &raquo; Blog Archive &raquo; Visual AJAX != Voice AJAX]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=79</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2006-01-08 22:41:18</wp:comment_date>
    <wp:comment_date_gmt>2006-01-09 02:41:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Larson points to a notable example of &#8220;AJAX-like&#8221; programming in VoiceXML. In fact, its one I have commented on before. My view of this technique hasn&#8217;t changed "“ it&#8217;s powerful. But it isn&#8217;t AJAX. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-01-09 02:41:18</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>E911: Problem or Promise?</title>
  <link>http://voiceingov.org/2005/07/01/e911-problem-or-promise/</link>
  <pubDate>Sat, 02 Jul 2005 02:13:54 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=32</guid>
  <description/>
  <content:encoded><![CDATA[It seems that plans to address new requirements for E911 capable phones is <a href="http://news.com.com/More+alarms+over+cell+phone+E911/2100-1037_3-5772018.html?tag=nefd.top">running into trouble</a> because consumers aren't upgrading their cell phones fast enough.  This makes it highly unlikely that nation's cellular carriers will meet the current schedule of having at least 95 percent of their subscribers using location-enabled phones by the end of the year.

Despite this, <a href="http://developers.sun.com/techtopics/mobility/apis/articles/location/">location-based services (LBS)</a> offer the potential of an important new channel for governments to deliver critical information to citizens.   Governments should look to LBS for the delivery of emergency notifications, travel information, information on registered sex offenders and other types of information that have a locational component.

Even if the <a href="http://www.fcc.gov/911/enhanced/">FCC's goals</a> aren't met on time, the presence of thousands and thousands of LBS-aware cell phones in the hands of citizens is an opportunity that governments need to capitalize on.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2005-07-01 22:13:54</wp:post_date>
  <wp:post_date_gmt>2005-07-02 02:13:54</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>e911-problem-or-promise</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[32]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[32]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Confidence-Based Recognition in VoiceXML</title>
  <link>http://voiceingov.org/tutorials/confidence-based-recognition-in-voicexml/</link>
  <pubDate>Sun, 03 Jul 2005 16:19:57 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=33</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Introduction</strong>

In the February 2005 issue of VoiceXML Review (the "Speak &amp; Listen" column), Matt Oshry of TellMe networks provides an <a href="http://www.voicexmlreview.org/feb2005/columns/Feb2005_speak_listen.html">excellent overview</a> of a technique referred to as "confidence-based confirmation," or "confidence-based recognition."  This approach is highly valuable in applications that have unique or sophisticated grammars, or where high confidence levels during recognition is absolutely essential (i.e., telephone-based voting systems).

The approach discussed here takes a slightly different approach to this technique by structuring the dialog used to confirm user input as a <a href="http://www.w3.org/TR/voicexml20/#dml1.3.1">subdialog</a>, making it (in my opinion) a bit easier to reuse in different parts of an application.  I'm also going to demonstrate the power of a new bit of functionality contained in the developing VoiceXML 2.1 specification that allows developers to structure applications to capture the audio of a caller utterance while a recognition is performed.  If you've read <a href="http://vote.nist.gov/ecposstatements/phone_voting_whitepaper.doc">my paper on telephone-based voting systems</a>, you'll understand why I believe that this functionality is central to VoiceXML-enabled telephone voting.

By way of a little background, there are other ways to raise the required level of confidence for recognitions in VoiceXML applications.   For example, <a href="http://www.w3.org/TR/voicexml20/#dml6.3.2">the "confidencelevel" property</a> allows developers to specify the degree of accuracy needed for recognitions in a VoiceXML application.  Changing the value of this property from its default setting of .5 (50 percent confidence) to .80 will require a higher degree of accuracy before a successful recognition will occur
<pre>
&lt;property name=&ldquo;confidencelevel&ldquo; value=&ldquo;.8&ldquo;/&gt;
</pre>
However, this is a rather blunt instrument to use if you require a higher degree of accuracy for very specific recognitions.  Changing the value of this property will raise the required confidence level for all recognitions within the scope where this property is changed.  If this property is set within the application root document, it will have application level scope and apply to all recognitions in the application (probably not a good thing).  Additionally, simply changing the value of this property will do nothing to change the way a platform handles a "nomatch" event.  You'll still need to craft some custom event handlers for this, unless you want some frustrated callers.

<strong>Platform Support for VoiceXML 2.1</strong>

While support for the VoiceXML 2.1 specification is growing, I could only identify one major platform that supports the capturing of caller utterances during a recognition -- <a href="http://cafe.bevocal.com">BeVocal</a>.  Section 7 of the <a href="http://www.w3.org/TR/2005/CR-voicexml21-20050613/">VoiceXML 2.1 specification</a> states that in order to enable recording during recognition, the value of the "recordutterance" property must be set to 'true'.  Several other platforms have something close (and may have changes in the pipeline to support this part of the 2.1 specification), but they won't fit our needs here:
<ul>
<li>TellMe - the <a href="http://studio.tellme.com">Tellme platform</a> has a proprietary extension to the &lt;property&gt; element called "tellme.field.recordutterance".  This extension does allow for the capturing of utterances when a recognition is performed.  However, the TellMe document states that "The utterance is recorded regardless of whether the recognition succeeded or resulted in a nomatch."  While this is great if you are trying to fine tune a grammar, it won't do for our example here.</li>

<li>Voxeo - the <a href="http://community.voxeo.com">Voxeo platform</a> has an extension for a proprietary element called "&lt;voxeo:recordcall&gt;" that allows developers to designate a specific percentage of calls to be recorded for quality purposes.  According to the Voxeo documentation, this element "allows the developer to record both sides of a call, recording the human and the application interaction to a wav file."  Again, this is probably very useful for analyzing application performance and the accuracy of recongitions, but it won't work in this example.</li>
</ul>

<strong>A Subdialog for Confidence-Based Recognition</strong>

Structuring the confidence-based recognition example as a subdialog looks something like the example below.
<pre>
&lt;?xml version=&ldquo;1.0&ldquo; ?&gt;
&lt;!DOCTYPE vxml PUBLIC &ldquo;-//BeVocal Inc//VoiceXML 2.0//EN&ldquo;
  &ldquo;http://cafe.bevocal.com/libraries/dtd/vxml2-0-bevocal.dtd&ldquo;&gt;
&lt;vxml version=&ldquo;2.0&ldquo; xmlns=&ldquo;http://www.w3.org/2001/vxml&ldquo;&gt;

&lt;!-- Event handler for noinput and nomatch events --&gt;
&lt;catch event=&ldquo;noinput nomatch&ldquo;&gt;
I'm Sorry. I didn't get that.
&lt;reprompt/&gt;
&lt;/catch&gt;

&lt;!-- Threshold for confidence-based recognition--&gt;
&lt;var name=&ldquo;thresh&ldquo; expr=&ldquo;0.75&ldquo;/&gt;

&lt;!-- Enable audio capture --&gt;
&lt;property name=&ldquo;recordutterance&ldquo; value=&ldquo;true&ldquo;/&gt;

&lt;form id=&ldquo;choose&ldquo;&gt;

&lt;field name=&ldquo;main&ldquo;&gt;
&lt;prompt&gt;Please select the candidate you want to vote for?&lt;/prompt&gt;

&lt;grammar src=&ldquo;voteGrammar.grxml&ldquo;/&gt;

&lt;filled&gt;
&lt;if cond=&ldquo;main$.confidence &amp; lt; thresh &ldquo;&gt;

&lt;subdialog name=&ldquo;sure&ldquo; src=&ldquo;makeSure.vxml&ldquo;&gt;
  &lt;param name=&ldquo;vote&ldquo; expr=&ldquo;main$.utterance&ldquo;/&gt;
&lt;/subdialog&gt;
 &lt;if cond=&ldquo;sure.isRight=='true'&ldquo;&gt;
 &lt;log&gt;Voter confirmed selection for recongition less than
 &lt;value expr=&ldquo;100*(thresh)&ldquo;/&gt; percent.&lt;/log&gt;
 &lt;else/&gt;
 &lt;clear namelist=&ldquo;main&ldquo;/&gt;
 &lt;goto nextitem=&ldquo;main&ldquo;/&gt;
 &lt;/if&gt;
&lt;/if&gt;
&lt;prompt&gt;Thank you.&lt;/prompt&gt;
&lt;submit next=&ldquo;process.php&ldquo; namelist=&ldquo;main&ldquo; method=&ldquo;post&ldquo; enctype=&ldquo;multipart/form-data&ldquo;/&gt;
&lt;/filled&gt;

&lt;/field&gt;
&lt;/form&gt;

&lt;/vxml&gt;
</pre>
There are several important elements here.  First, note that I use a stand alone variable to declare the level of confidence that I'll be requiring on certain fields.  This will make it easier to change the value across multiple fields if testing shows that a differnet confidence level is needed.

Within the &lt;filled&gt; element (which lets us inspect the result of a successful recognition on a field variable) we test to see whether the confidence level of the recognition meets our minimum threshold.  If it does not meet our minimum threshold, we call the subdialog contained in the file "makeSure.vxml" and pass it a string representing the recognized utterance.  (Keep in mind, the platform's default recognition level is also at work here - if the confidence level of the recognition falls below this default threshold, a nomatch event will be thrown.  For our test to be applied, the confidence level of the recognition must be at least this default threshold level.)

Without looking at the specifics of the subdialog just yet, we can see that if a value of 'true' is returned, we'll log that the voter has confirmed their selection and we'll then send their vote on for further processing.  If any other value is returned from our subdialog, we'll clear the field variable and start again.  (The &lt;goto&gt; element in this part of the application may be a bit redundant - the Form Interpretation Algorithm should ensure another visit to the field called "main" after its value has been cleared.)

Now lets have a look at the subdialog that confirms a voter's selection:
<pre>
&lt;?xml version=&ldquo;1.0&ldquo; ?&gt;
&lt;!DOCTYPE vxml PUBLIC &ldquo;-//BeVocal Inc//VoiceXML 2.0//EN&ldquo;
  &ldquo;http://cafe.bevocal.com/libraries/dtd/vxml2-0-bevocal.dtd&ldquo;&gt;
&lt;vxml version=&ldquo;2.0&ldquo; xmlns=&ldquo;http://www.w3.org/2001/vxml&ldquo;&gt;

&lt;form id=&ldquo;makeSure&ldquo;&gt;
&lt;var name=&ldquo;vote&ldquo;/&gt;
&lt;var name=&ldquo;isRight&ldquo;/&gt;

 &lt;field name=&ldquo;confirm&ldquo; type=&ldquo;boolean&ldquo;&gt;
 &lt;noinput&gt;I'm Sorry.  I did not hear what you said.&lt;reprompt/&gt;&lt;/noinput&gt;
 &lt;nomatch&gt;&lt;reprompt/&gt;&lt;/nomatch&gt;
   &lt;prompt&gt;I think I heard you vote for, &lt;value expr=&ldquo;vote&ldquo;/&gt;.  Is this correct?&lt;/prompt&gt;

   &lt;filled&gt;
    &lt;if cond=&ldquo;confirm&ldquo;&gt;
    &lt;assign name=&ldquo;isRight&ldquo; expr=&ldquo;'true'&ldquo;/&gt;
    &lt;else/&gt;
    &lt;assign name=&ldquo;isRight&ldquo; expr=&ldquo;'false'&ldquo;/&gt;
    &lt;/if&gt;
    &lt;return namelist=&ldquo;isRight&ldquo;/&gt;
   &lt;/filled&gt;

 &lt;/field&gt;
&lt;/form&gt;

&lt;/vxml&gt;
</pre>
As you can see, this is a simple form that takes in the parameter passed from the previous dialog ("vote").  It uses a very simple boolean grammar (one of the <a href="http://www.w3.org/TR/voicexml20/#dmlABuiltins">builtin grammar types in VoiceXML</a>) to confirm a voter's selection.  If a voter confirms the value passed to the subdialog, the variable "isRight" is set to 'true' and returned to the VoiceXML page that referenced the subdialog.  Otherwise, the value of this variable is set to 'false'.

What I like about this approach is that it makes it pretty straightforward to apply a higher level of confidence to specific fields within an application simply by applying a quick test on each successful recognition and making a reference to the subdialog.  You don't have to rewrite or copy and past a bunch of lines in different fields within the application.

Now lets look at our simple processing script - this is the document that is referenced in our main dialog that receives the value of the voters input after a sufficiently confident recognition has occurred.
<pre>
&lt;?php

// Get posted vote value
$_vote = htmlspecialchars($_REQUEST['main']);

echo '&lt;?xml version=&ldquo;1.0&ldquo;?&gt;';
echo &ldquo;n&ldquo;;

?&gt;
&lt;!DOCTYPE vxml PUBLIC &ldquo;-//BeVocal Inc//VoiceXML 2.0//EN&ldquo;
  &ldquo;http://cafe.bevocal.com/libraries/dtd/vxml2-0-bevocal.dtd&ldquo;&gt;
&lt;vxml application=&ldquo;confidenceTest.vxml&ldquo; version=&ldquo;2.0&ldquo; xmlns=&ldquo;http://www.w3.org/2001/vxml&ldquo;&gt;

&lt;form id=&ldquo;playBack&ldquo;&gt;
&lt;block&gt;
&lt;prompt&gt;
You voted for &lt;?php echo $_vote ?&gt;, &lt;audio expr=&ldquo;application.lastaudio$&ldquo;/&gt;.
&lt;break size=&ldquo;small&ldquo;/&gt;
Goodbye.
&lt;/prompt&gt;
&lt;disconnect/&gt;
&lt;/block&gt;
&lt;/form&gt;

&lt;/vxml&gt;
</pre>
What's important to note here is that I did not submit the audio of the captured utterance to the processing script.  In order to do this, you need to use the <a href="http://www.w3.org/TR/2005/CR-voicexml21-20050613/#sec-data">VoiceXML 2.1 &lt;data&gt; tag</a>.  However, the submission of captured audio through the &lt;data&gt; tag will not perform a transition to a new dialog, something we want to do to tell the voter who they selected (or, alternatively, that their vote was processed).  So, I'll take a bit of a different approach here and reference the variable "application.lastaudio$" - I also make a reference to our original dialog in the "application" attribute of the &lt;vxml&gt; element.

The "application.lastaudio$" variable is a BeVocal extension that "contains an audio capture of the user's speech" when it "matches a field grammar, a form grammar, a menu choice, or a link grammar."  Obviously this won't work on other platforms, but as support for the VoiceXML 2.1 specification improves this approach can be modified to be platform independent.

<strong>Conclusion</strong>

Confidence-based recognition along with some of the new features of the VoiceXML 2.1 specification provide a very powerful mechanism for confirming user selections in voice applications.  This type of approach is essential for application like <a href="http://www.voiceingov.org/blog/?cat=5">telephone-based voting systems</a>.

If you would like all of the files in this example (along with the grammar file used, but not discussed, here). You can <a href="../xfiles/tutorials/confidence_example.zip">get them all here</a>.  Any suggestions for improvement are welcome.
<br /><br />
<!-- Creative Commons License -->
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a>
This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike 2.5 License</a>.</p>
<!-- /Creative Commons License -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2005-07-03 12:19:57</wp:post_date>
  <wp:post_date_gmt>2005-07-03 16:19:57</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>confidence-based-recognition-in-voicexml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2248</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[33]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[33]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9</wp:comment_id>
    <wp:comment_author><![CDATA[Voice(XML) of the People &raquo; When Voice Applications Fail]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=66</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2005-10-10 10:27:46</wp:comment_date>
    <wp:comment_date_gmt>2005-10-10 14:27:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Additionally, a good system will verify user input if the confidence level on recognition is lower than a pre-specified threshold. There is a good overview of this technique in an earlier posting on this site. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-10-10 14:27:46</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Speak with Confidence</title>
  <link>http://voiceingov.org/2005/07/03/speak-with-confidence/</link>
  <pubDate>Sun, 03 Jul 2005 16:42:28 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=34</guid>
  <description/>
  <content:encoded><![CDATA[I've posted a <a href="http://www.voiceingov.org/blog/?page_id=33">new tutorial</a> showing my take on the "Confidence-Based Confirmation" technique first outlined by <a href="http://www.voicexmlreview.org/feb2005/columns/Feb2005_speak_listen.html">Matt Oshry</a> of TellMe networks.  This example uses a VoiceXML subdialog approach to confirm caller utterances, and also leverages the new functionality provided by the VoiceXML 2.1 specification to record caller input while performing a recognition.  This approach is critical to the use of <a href="http://vote.nist.gov/ecposstatements/phone_voting_whitepaper.doc">VoiceXML in telephone-based voting systems</a>.  A complete overview and sample code are provided.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2005-07-03 12:42:28</wp:post_date>
  <wp:post_date_gmt>2005-07-03 16:42:28</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>speak-with-confidence</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="phone-voting"><![CDATA[Phone Voting]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
</item>
<item>
  <title>Handheld Highs and Lows</title>
  <link>http://voiceingov.org/2005/07/04/handheld-highs-and-lows/</link>
  <pubDate>Mon, 04 Jul 2005 11:38:07 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=35</guid>
  <description/>
  <content:encoded><![CDATA[New highs and lows were reached this week in the world of handheld and mobile devices.  On the high side, its being reported that <a href="http://www.timesonline.co.uk/article/0,,2-1679856,00.html">more than 26 million people</a> sent text messages to the organizers of Live 8 (which took place on July 2nd) to help address poverty and AIDS in Africa.



<blockquote>Participants in the 'real-time petition' texted a word such as 'unite' or 'live8' numerically. Most of the texts emanated from Western Europe, said Ralph Simon, of the Mobilium Group, which organised the operation. 'We got messages from people from Albania to Zimbabwe,' Mr Simon said. 'This means Bono and Bob Geldof can go to Gleneagles [where the G8 summit is to be held] and say we have created the world's biggest text book.</blockquote>



On the low side, it looks like the State of Nevada has <a href="http://news.com.com/Even+poolside%2C+casinos+entice+by+hand-held/2100-1026_3-5773177.html?tag=nefd.top">adopted a new statute</a> allowing gambling at casinos via mobile device.



<blockquote>Gov. Kenny Guinn signed a law last month authorizing gamblers in Nevada to play slot machines, video poker, blackjack and other games on hand-held wireless devices from public spaces in casinos. The spaces include restaurants, bars, convention rooms, even swimming pools. Hotel rooms, however, are off limits, to make sure that minors do not get their hands on the new devices, which resemble personal digital assistants or tablet personal computers, depending on where they are being used.</blockquote>

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2005-07-04 07:38:07</wp:post_date>
  <wp:post_date_gmt>2005-07-04 11:38:07</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>handheld-highs-and-lows</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Tool Time</title>
  <link>http://voiceingov.org/2005/07/06/tool-time/</link>
  <pubDate>Wed, 06 Jul 2005 20:29:02 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=36</guid>
  <description/>
  <content:encoded><![CDATA[It has been said that "a bad workman always blames his tools."  With this in mind, I'm always on the lookout for the <a href="http://www.voiceingov.org/blog/?page_id=18">right tool</a> to develop VoiceXML applications.  I consider myself pretty open to trying new things, and there is an interesting article in the recent issue of VoiceXML Review discussing the <a href="http://www.voicexml.org/Review/Jun2005/features/eclipse.html">Eclipse Voice Tools Project</a>.

I've dabbled with Eclipse in the past while reading some interesting articles about <a href="http://www-106.ibm.com/developerworks/library/x-wxxm18/index.html">using it for XSL Transformations</a>, but most of what I've heard about this tool comes from the Java developers I work with.  There don't seem to be any mild feelings "“ they either love it, or hate it.

Lacking that level of emotional investment, it seems worth a try to at least test Eclipse out as a tool for developing VoiceXML applications.  There is a nice <a href="http://www.developer.com/java/other/article.php/3518006">introductory article</a> on Eclipse just up recently on Developer.com that might provide some nice background for anyone interested in learning more about this tool.

By the way, if your thinking that investing some time to check out Eclipse might be  a waste given that you don't do a lot of (or even any) Java development, this tool has a lot more to offer.  I do all of my server side stuff in PHP, and there is an <a href="http://www.phpeclipse.de/tiki-view_articles.php">interesting plug-in</a> for Eclipse that supports PHP development.

Additionally, IBM is releasing a <a href="http://www.alphaworks.ibm.com/ettk">cluster of development tools</a> (dubbed the "Emerging Technologies Tool Kit") as plug-ins for Eclipse.   Given the wide spectrum of development that Eclipse supports, this tool seems like a good choice for voice developers (and others) to have in their toolkit.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>36</wp:post_id>
  <wp:post_date>2005-07-06 16:29:02</wp:post_date>
  <wp:post_date_gmt>2005-07-06 20:29:02</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tool-time</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
</item>
<item>
  <title>A Lament for Stranded Data</title>
  <link>http://voiceingov.org/2005/07/07/a-lament-for-stranded-data/</link>
  <pubDate>Thu, 07 Jul 2005 13:34:17 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=37</guid>
  <description/>
  <content:encoded><![CDATA[<p>The State of Rhode Island recently deployed a <a href="http://www.sec.state.ri.us/govtracker/services/">cluster of XML feeds</a> providing access to information ranging from membership on state boards and commissions, corporate information, information on registered lobbyists and a host of other information.  This new service, billed as "GovTracker" by the Rhode Island Secretary of State's Office (the entity that developed it) is aimed at opening up access to government information to Rhode Island citizens.</p>

<p>There is a lot here that should make voice applications developers (and other developers) very happy.  VoiceXML has a <a href="http://www.w3.org/TR/2005/CR-voicexml21-20050613/#sec-data">standard mechanism</a> for exposing data stored in XML documents for use in voice applications.  Additionally, several platforms have implemented extensions to allow for the <a href="http://www.voiceingov.org/blog/?p=27">integration of web services</a> into voice applications (although I don't believe any support the REST-style services deployed by Rhode Island).</p>

<p>In announcing the deployment of these services, officials in the Rhode Island Secretary of State's Office observe that:</p>



<blockquote>[G]overnment technology often quarantines its data from other agencies and its own citizens. While sensitive government data must be protected, there are many ways that citizens would be better served by making specific public content available through open services.</blockquote>



<p>I agree strongly with this statement, and that compels me to comment on what I think is bad about this announcement.  It completely ignores the most obvious, most simple, low-cost and highly effective steps that governments can take to make their data and information more accessible to citizens.</p>

<p>As interesting and valuable as the new Rhode Island GovTracker services are, the information they expose represents a tiny sliver of the government data "pie."  To be perfectly clear, most of the information that governments publish to the web is stranded in legacy HTML formats.  To paraphrase the official quoted above, this information is hidden in plain site.  You can (usually) see it with a visual web browser, but that's about it.  Sometimes even that's a crapshoot.</p>

<p>Not only is the information and data contained in these government web pages not in XML format, it often does not conform to the legacy HTML specifications they intend to use.  This doesn't have to be "“ <a href="http://www.w3.org/TR/xhtml1/">XHTML</a> (the new and updated HTML standard that conforms to the structure and syntax rules of XML) is well understood and easy to implement.  <a href="http://www.webstandards.org/learn/reference/prolog_problems.html">Contemporary web browsers</a> can understand and render properly formatted XHTML without issue.  Unfortunately, it appears that updating the huge mass of information the governments have published from HTML to XHTML is a lot less sexy than deploying new web services.</p>

<p>Often the information in question is highly relevant to citizens.  By way of example, check out the Governor of the State of Rhode Island's web site for a <a href="http://www.governor.ri.gov/executiveorders/">listing of Executive Orders</a>.  Oftentimes, orders issued by a state's Chief Executive have a direct impact on the lives of state residents.  Yet, despite the relevance if this information, the page is constructed with a legacy HTML format.  Making matters worse, it <a href="http://validator.w3.org/check?verbose=1&amp;uri=http%3A//www.governor.ri.gov/executiveorders/">fails to conform</a> to even that standard.  Even the Secretary of State's web page listing open meetings <a href="http://validator.w3.org/check?verbose=1&amp;uri=http%3A//www.sec.state.ri.us/pubinfo/openmeetings/upcoming_meetings.html">fails to validate</a> (although it is built using the XHTML standard).</p>

<p>Try using <a href="http://www.w3.org/Style/XSL/">XSLT</a> (or any other <a href="http://us2.php.net/simplexml">XML processing technology</a>) to convert the information on these pages to <a href="http://www.voiceingov.org/blog/?page_id=13">XHTML+Voice</a>, WAP or any other XML format and you're out of luck "“ they either aren't built using XML or they aren't valid.  Surely the correction of this problem is a lofty goal that state governments can aspire to.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2005-07-07 09:34:17</wp:post_date>
  <wp:post_date_gmt>2005-07-07 13:34:17</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>a-lament-for-stranded-data</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>Swiss Army Phone</title>
  <link>http://voiceingov.org/2005/07/08/swiss-army-phone/</link>
  <pubDate>Fri, 08 Jul 2005 17:35:44 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=38</guid>
  <description/>
  <content:encoded><![CDATA[<p>I'm not sure who first observed that cell phones are fast becoming the Swiss Army knives of personal communications, but anyone who doubts this should pay attentions to some recent developments.</p>

<p>Both <a href="http://www.google.com/sms/">Google</a> and <a href="http://news.com.com/Yahoo+expands+its+mobile+search+functions/2100-1038_3-5777296.html">Yahoo!</a> Are getting serious about bringing powerful search functionality to cell phones through <acronym title="Short message service">SMS</acronym>.  Google looks to bring <a href="http://www.google.com/mobile/web_search.html">full on web-based searching</a> to cell phones in the near future.  Cell "phones" is becoming something of a misnomer "“ these devices are turning into (or have already, as some would argue) sophisticated <a href="http://tuxmobil.org/pda_linux_apps_java.html">application environments</a> that can be used to deliver all types of information to users through a staggering array of channels (voice, e-mail, text message, IM, etc.)  These are just of a few of the indicators that radical changes may be under way in how people use cell phones. </p>

<p>Given this trend, it makes sense for governments to be aware of how the taxes they impose on telecommunications can influence activity.  If you believe the old adage that "the only (legal) way to avoid taxes is to change behavior" then there is a powerful message in these recent developments for government administrators.  Tax systems change at a glacial pace, while the half life of many technologies can sometimes be counted in months.  Reconciling these two factors requires foresight and an awareness of how technology is changing.</p>

<p>There is an interesting article in <a href="http://www.usatoday.com/news/nation/2005-05-08-cellphone-taxes_x.htm">USA Today</a> that highlights some recent actions taken by state governments enhance their revenue collections from telecommunications taxes.  There is also an <a href="http://www.cbo.gov/showdoc.cfm?index=6191&amp;sequence=0">interesting report</a> on the Congressional Budget Office site regarding <acronym title="Universal Service Fund">USF</acronym> taxes.</p>

<p>It would be nice to be able to point to a report or analysis on this issue conducted by organizations like the <a href="http://www.taxadmin.org/">Federation of State Tax Administrators</a>, or the <a href="http://www.ncsl.org/">National Association of State Legislatures</a>, or even the <a href="http://www.nga.org/center/1,1188,,00.html">National Governor's Association</a>.  Sadly, I couldn't find anything relevant through a search of their sites.  Not a good sign.</p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[I'm not sure who first observed that cell phones are fast becoming the Swiss Army knives of personal communications, but anyone who doubts this should pay attentions to some recent developments.]]></excerpt:encoded>
  <wp:post_id>38</wp:post_id>
  <wp:post_date>2005-07-08 13:35:44</wp:post_date>
  <wp:post_date_gmt>2005-07-08 17:35:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>swiss-army-phone</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[38]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[38]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Create Multi-Mobile Applications with PHP</title>
  <link>http://voiceingov.org/tutorials/create-multi-mobile-applications-with-php/</link>
  <pubDate>Sat, 16 Jul 2005 17:44:48 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=41</guid>
  <description/>
  <content:encoded><![CDATA[<strong>What is a Multi-Mobile Application?</strong>

The typical job description in the technology industry doesn't include hazardous duty pay for all of the annoying acronyms, buzzwords and overhyped slogans that get tossed around.  As such, I'm always cautious about using a new one (yes, I still feel a little funny talking about AJAX).  However, I have noticed a trend toward a new type of web application that is focused on the delivery of content and interactivity to end users through multiple devices (desktop browser, cell phone, traditional phone, PDA, IM client, etc.).  This new breed of application, in my humble opinion, deserves its own buzzword -- "Multi-mobile" applications.

Fans of <a href="?page_id=13">XHTML+Voice</a> and <a href="?page_id=12">SALT</a> will know instantly what <a href="http://en.wikipedia.org/wiki/Multimodal">multimodal applications</a> are -- applications that support different kinds of user input (i.e., voice, keypad, stylus) through the same interface.  Multi-mobile applications are differnet.  These applications deliver content that is specifically tailored to the device being employed by the end user.  This content is formatted differently based on the requirements of each specific device, and the mode of input is restricted to that supported by the device.  Users accessing a form requiring specific input will see different manifestations of the same interface depending on the device they are using.  What makes these applications special is that a single code base provides the functionality for device independence.   So, whether an end user is making a phone call, using a WAP-enabled browser or an XHTML-enabled PDA the application is built to format an interface appropriately for each device.

I think this is a pretty cool concept, one worthy of its own buzzword.  Besides, describing this approach to application design literally -- "parallel mono-modality" -- doesn't do it justice in my opinion (needs more zing!).

<strong>Building Multi-Mobile Applications</strong>

One of the most convenient and powerful ways for building multi-mobile applications that I have come across is a PHP class library called <a href="http://www.hawhaw.de/">HAWHAW</a> (HTML and WML Hybrid Adapted Webserver).  The HAWHAW toolkit actually has two additional elements -- HAWHAW XML (an XML-based markup language for creating mobile applications) and HAWXY (a proxy server written in PHP for precessing HAWHAW XML).  I'll be focusing on the HAWHAW PHP class library in this example.

The HAWHAW class library comes with <a href="http://www.hawhaw.de/faq.htm">an excellent tutorial</a> and a very detailed set of <a href="http://www.hawhaw.de/ref/php/index.html">documentation</a>.  Once I downloaded this library and began playing with it, I was able to create cross-platform multi-mobile applications in a very short period of time.  To demonstrate how easy it is to use this tool, lets take an example that could apply to a number of different government entities -- utility meter reading.

This issue is on my mind lately because I came home from the office recently to find that I had missed the monthly visit from the meter reader and instead had been given one of those blank forms to fill out after examining the water meter in my basement.  The way my local government approaches this issue is to let customers self report their meter readings using a phone-in service (a very clunky sounding old IVR system).  Lots of other municipalities use web-forms to allow customers to self report.  And even though many municipalities and utilities are moving toward <a href="http://www.csu.org/customer/meter/page4795.html">Automated Meter Reading</a> (where a special meter installed in customer homes emits a radio signal that is picked up by passing meter readers), customer self reporting is bound be to be a common way to get customer meter readings for a while.

<strong>A Multi-Mobile Meter Reading Application</strong>

This example assumes that you have downloaded the HAWHAW PHP class library and installed it on a PHP-enabled web server and have familiarized yourself with the documentation.  I'd also reccomend becoming familiar with some of the general concepts of Wireless Markup Language (WML) applications development -- HAWHAW was originally created to serve up WML content, so it will help if you have a basic understanding of decks and cards as they are used in the world of WML.



<blockquote>
<ul>
<li>To test the application disucssed here, point your desktop browser, micro browser, PDA, WAP-enabled cell phone, etc. <a href="http://www.voiceingov.org/xfiles/hawhaw/meterReading.php">here</a>.</li>
<li>To test the VoiceXML version of this application, use your <a href="http://community.voxeo.com/fwd.jsp">VoIP phone</a> to call SIP:9991421352@sip.voxeo.net. </li>
</ul>


  
  <img src="http://skype.hawhaw.de/blank.gif" style="border:0;" />


  document.hawform.callbutton.value = " Make SkypeOut call NOW!!! ";

</blockquote>



We begin our application by including the required HAWHAW class and setting up a deck:
<pre>
// Include class to generate output
require('path_to_hawhaw/hawhaw.inc.php');

// Create page an use simulator to test and debug
$page = new HAW_deck(&ldquo;Submit Your Meter Reading&ldquo;);
$page-&gt;use_simulator();
</pre>
Calling the use_simulator() method allows users to view HAWHAW applications as they might appear in a mobile device by using a standard desktop browser.  (You can still view HAWHAW applications using a traditional desktop browser without calling this method, but the application will return a simple HTML interface.)

Now lets create a form with input items for entering a meter reading, and then generate a page:
<pre>
// Create a new form to enter a meter reading
$form = new HAW_form(&ldquo;meterSubmit.php&ldquo;);

// Create a submit button for the form
$submit = new HAW_submit(&ldquo;Submit&ldquo;);

$input1 = new HAW_input(&ldquo;account_num&ldquo;, &ldquo;&ldquo;, &ldquo;Account Number:&ldquo;);
$input1-&gt;set_size(6);
$input1-&gt;set_maxlength(6);
$input1-&gt;set_voice_text(&ldquo;Please enter your 6 digit account number.&ldquo;);
$input1-&gt;set_voice_type(&ldquo;digits?length=6&ldquo;);
$input1-&gt;set_br(2);

$input2 = new HAW_input(&ldquo;reading&ldquo;, &ldquo;&ldquo;, &ldquo;Meter Reading:&ldquo;);
$input2-&gt;set_size(8);
$input2-&gt;set_maxlength(8);
$input2-&gt;set_voice_text(&ldquo;Please enter your 8 digit meter reading.&ldquo;);
$input2-&gt;set_voice_type(&ldquo;digits?length=8&ldquo;);
$input2-&gt;set_br(1);

// Add input items and submit button to form
$form-&gt;add_input($input1);
$form-&gt;add_input($input2);
$form-&gt;add_submit($submit);

// Add form to page
$page-&gt;add_form($form);

// Render the page
$page-&gt;create_page();
</pre>
You can see where I have called the appropriate methods on the HAW_input objects to style them for different types of user agents.  Each of my two HAW_input objects has a maximum character length set, and each has a line break or two that follow them.  I've also called the set_voice_text() and set_voice_type() methods on these objects to give them the features they will need to work properly on a VoiceXML platform.  From a VoiceXML perspective, you can think of these input objects as &lt;field&gt; elements.  These methods set the field prompt and field type respectively.  Note that in calling the set_voice_type() method, I've set a length for each field -- if an input string of a different length is used, the VoiceXML platform will throw a nomatch event to be caught by the appropriate handler.

Speaking of event handlers, you may be wondering how to set up special prompts when noinput or nomatch events occur.  HAWHAW has a <a href="http://www.hawhaw.de/faq.htm#VoiceXML5">number of different methods</a> for setting up these specific event handlers, and <a href="http://www.hawhaw.de/faq.htm#VoiceXML0">a lot more</a>.  A good deal of thought has gone into rendering VoiceXML markup through HAWHAW, and the project creator (Norbert Huffschmid) is to be commended for this excellent work.  I'm going to hold off on setting up noinput and nomatch handlers for now, because I want to take a slightly different approach than what is currently supported in the HAWHAW library.

To finish out our example, we need to post the user input back to our server and take the user to another HAWHAW deck object.  In a production application, this posting would probably involve validating the user input and querying an account database.  For this example, we'll keep it simple.  (Note -- the parameter used when creating a new HAW_form object is the URL that the user input is posted to -- in this example, a file called &ldquo;meterSubmit.php&ldquo;.  Lets look at that file now:
<pre>
require('path_to_hawhaw/hawhaw.inc.php');
$page = new HAW_deck(&ldquo;Submission Result&ldquo;, HAW_ALIGN_CENTER);
$page-&gt;use_simulator();

// Create short variable names for form input variables
$account = trim(addslashes($_REQUEST['account_num']));
$reading = trim(addslashes($_REQUEST['reading']));


// Check for errors in user input
if (!$account || !$reading) {
$error_text1 = new HAW_text(&ldquo;You must enter both your account number and meter reading.&ldquo;);
$error_text1-&gt;set_br(2);
//$error_text1-&gt;set_voice_text(&ldquo;You must enter both your account number and meter reading.&ldquo;);
$link = new HAW_link(&ldquo;Try Again&ldquo;,&ldquo;meterReading.php&ldquo;);
$page-&gt;add_text($error_text1);
$page-&gt;add_link($link);
$page-&gt;create_page();
die;
}

if (strlen($account)!=6) {
$error_text2 = new HAW_text(&ldquo;You must enter your 6 digit account number.&ldquo;);
$error_text2-&gt;set_br(2);
//$error_text2-&gt;set_voice_text(&ldquo;You must enter your 6 digit account number.&ldquo;);
$link = new HAW_link(&ldquo;Try Again&ldquo;,&ldquo;meterReading.php&ldquo;);
$page-&gt;add_text($error_text2);
$page-&gt;add_link($link);
$page-&gt;create_page();
die;
}

if (strlen($reading)!=8) {
$error_text3 = new HAW_text(&ldquo;You must enter your 8 digit meter reading.&ldquo;);
$error_text3-&gt;set_br(2);
//$error_text3-&gt;set_voice_text(&ldquo;You must enter your 8 digit meter reading.&ldquo;);
$link = new HAW_link(&ldquo;Try Again&ldquo;,&ldquo;meterReading.php&ldquo;);
$page-&gt;add_text($error_text3);
$page-&gt;add_link($link);
$page-&gt;create_page();
die;
}

// Display results
$text1 = new HAW_text(&ldquo;Account #: $account&ldquo;);
$text1-&gt;set_br(2);
$text1-&gt;set_voice_text(&ldquo;You entered account number, $account&ldquo;);

$text2 = new HAW_text(&ldquo;Reading: $reading&ldquo;);
$text2-&gt;set_br(2);
$text2-&gt;set_voice_text(&ldquo;You entered a reading of, $reading&ldquo;);

$text3 = new HAW_text(&ldquo;Thank you!&ldquo;);
$text3-&gt;set_voice_text(&ldquo;Thank you.&ldquo;);

$page-&gt;add_text($text1);
$page-&gt;add_text($text2);
$page-&gt;add_text($text3);

$page-&gt;create_page();
</pre>
Pretty straightforward -- there is probably a much more efficient way to validate the user input, but for the purposes of illustration I thought I'd focus on clarity rather than efficiency.  Notice that I have commented out the text to be used on a voice platform when incomplete input is submitted.  This is because it should never be needed.  Remember, we parametrized our voice fields in the previous file by requiring a specific number of digits as valid input -- set_voice_type(&ldquo;digits?length=8&ldquo;).  When a field with this type is visited by the Form Interpretation Algorithm (FIA) on a VoiceXML platform, a string of digits with the appropriate length must be entered, otherwise a nomatch event will be thrown and the FIA will revisit this field until it is successfully filled (or until a nomatch event handler specifies different behavior, like transferring a caller to a customer service representative).  Therefore, on a voice platform a caller should never encounter the page &ldquo;meterSubmit.php&ldquo; until both fields on the preceding page are filled with input of the appropriate length.

Clearly in production this part of the application would be much more sophisticated, but this is sufficient to illustrate the basic steps involved.

<strong>One Step Beyond, Modifying the HAWHAW Class Library</strong>

As powerful and as useful as this tool is, it does have its limitations.  Most are inherent in the nature of developing interfaces for multiple end user devices.  Because this tool needs to generate markup for a large number of user agents, many of which have character and space limitations (the HAWHAW documentation notes that &ldquo;a lot of older WAP devices can not handle more than about 1,400 bytes of compiled data.&ldquo;) it pays to keep the interface simple.

Moreover, because this tool was initially developed with the goal of generating WML pages there are some aspects of VoiceXML application development that are missing.  For example, what if we wanted to set up an event handler with application scope that was specially tailored for callers having problems using the application.  We may want to transfer such callers to a customer service agent so that they could get the help they need to submit their meter readings.  Such an event handler might look like the following:
<pre>
&lt;noinput count=&ldquo;3&ldquo;&gt;
&lt;goto next=&ldquo;#transfer&ldquo;/&gt;
&lt;/noinput&gt;

&lt;!-- Form for transferring callers that are having trouble --&gt;
&lt;form id=&ldquo;transfer&ldquo;&gt;
&lt;block&gt;
&lt;prompt&gt;Please hold a moment.  I'll transfer you to a customer service representative.&lt;/prompt&gt;
&lt;/block&gt;
&lt;transfer name=&ldquo;tran1&ldquo; bridge=&ldquo;true&ldquo; connecttimeout=&ldquo;20s&ldquo; dest=&ldquo;tel:+12223334444&ldquo;&gt;
 &lt;filled&gt;
  &lt;if cond=&ldquo;tran1 == 'busy'&ldquo;&gt;
  &lt;prompt&gt;The line is busy.  Please try back later.&lt;/prompt&gt;
  &lt;exit/&gt;
 &lt;elseif cond=&ldquo;tran1 == 'noanswer'&ldquo;/&gt;
  &lt;prompt&gt;No one is available to take your call right now.  Please try back later.&lt;/prompt&gt;
  &lt;exit/&gt;
 &lt;/if&gt;
&lt;/filled&gt;
&lt;/transfer&gt;
&lt;/form&gt;
</pre>
We might also want to capture the phone number of the caller, and set up a custom event handler to catch application errors, or to detect when a caller has become frustrated and hangs up:
<pre>
&lt;!-- Capture caller ANI --&gt;
&lt;var name=&ldquo;ani&ldquo; expr=&ldquo;session.telephone.ani&ldquo;/&gt;

&lt;catch event=&ldquo;connection.disconnect.hangup&ldquo;&gt;
  &lt;var name=&ldquo;errType&ldquo; expr=&ldquo;_event&ldquo;/&gt;
   &lt;submit next=&ldquo;error.php&ldquo; namelist=&ldquo;ani errType&ldquo;/&gt;
  &lt;exit/&gt;
&lt;/catch&gt;
</pre>
The way that I do this in my VoiceXML applications is to create an <a href="http://studio.tellme.com/vxml2/ovw/applications.html#ref_app_root">application root document</a>, and then reference that root document in successive VoiceXML pages.  There isn't a way to do this currently in HAWHAW, but with some minor tweaks, we can add some new functionality to allow this.  You can obtain a modified version of HAWHAW (along with a description of the changes) by <a href="http://www.voiceingov.org/xfiles/hawhaw/hawhaw_mod.zip">clicking here</a>.  Note, this isn't the official version of this tool, but one of the nice things about open source software is that you can modify it to meet your needs.  Hopefully you will find this helpful -- if not, the <a href="http://www.hawhaw.de/#download">official version</a> of this tool can be downloaded from the HAWHAW website.

So, with our modified version, we would change the approach outlined above to set our application root document when creating a HAW_deck object.
<pre>
// Include class to generate output
require('pathtohawhaw/hawhaw.inc.php');

// Create page an use simulator to test and debug
$page = new HAW_deck(&ldquo;Submit Your Meter Reading&ldquo;);
$page-&gt;use_simulator();

// Set application root for VoiceXML output
$page-&gt;set_application(&ldquo;appRoot.vxml&ldquo;);
</pre>
I put all of my application-scoped variables and event handlers in a file called &ldquo;appRoot.vxml&ldquo; and pass the name of this file as a parameter when calling the new set_application() method.  Now, when HAWHAW outputs VoiceXML, there will be a reference to this root document and the variables and event handlers I have set up will be available from within my HAWHAW pages.

A quick deployment note, when setting up a VoiceXML platform to support this application, it needs to point to the &ldquo;appRoot.vxml&ldquo; file, not to the initial HAWHAW page.  Users with other mobile devices will access the the HAWHAW pages directly.  This may add an additional level of complexity, but since users accessing the application via phone will be calling a telephone number (not accessing a URL) its not likely to be confusing.

Although this approach is not supported in the official version of HAWHAW, I find it more conveneint for some of the very specific behavioral features I typically put in my VoiceXML applications.  The fact that users can also access my application on a mobile device or PDA is icing on the cake!

<strong>Conclusion</strong>

You can obtain all of the code discussed above by <a href="http://www.voiceingov.org/xfiles/hawhaw/meter_reading_app.zip">clicking here</a>.

Hopefully, this brief introduction will get you thinking about building multi-mobile applications.  I hope that it also gets you excited about the power of PHP generally and HAWHAW specifically for creating such applications.  I have run the application described here on both Windows and Linux under PHP 4.3.x and 5.0 without issue.

If that can't get you excited then perhaps there is a need for another new buzzword to describe your current state.  I suggest CUDDLE (Confused, Unusually Down and Depressed and Lacking Excitement). ;-)
<br /><br />
<!-- Creative Commons License -->
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a>
This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike 2.5 License</a>.</p>
<!-- /Creative Commons License -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>41</wp:post_id>
  <wp:post_date>2005-07-16 13:44:48</wp:post_date>
  <wp:post_date_gmt>2005-07-16 17:44:48</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>create-multi-mobile-applications-with-php</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2248</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[41]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[41]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>X + V + PHP</title>
  <link>http://voiceingov.org/tutorials/x-v-php/</link>
  <pubDate>Tue, 30 Aug 2005 14:14:16 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=53</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Introduction</strong>

Any great chef will tell you that the perfect dish is made up of different ingredients that complement each other perfectly.  And if your thing is cooking up web applications, there aren't many sweeter ingredients that XHTML and VoiceXML.

<a href="http://www.voicexml.org/specs/multimodal/x+v/12/index.html">XHTML+Voice</a> (or X+V for short) is a specification for multimodal applications that is now making its way through the W3C approval process.  It was created under the auspices of the VoiceXML Forum, the same great folks that brought you VoiceXML and who continue to develop this standard.

For those that aren't in the know, there is a seriously cool new feature in the recently released version of the <a href="http://my.opera.com/mheadd/affiliate/">Opera Browser</a> (Version 8.0).  Opera has added support for X+V applications.  This means that developers who are comfortable with both XHTML and VoiceXML can cook up some powerful applications that let users enter input through multiple channels using the same interface, or both hear and see content rendered by the browser.

What I really like about all this is that it starts to deliver on the promise made by <a href="http://www.webstandards.org/">advocates of proper markup</a> in web pages and <a href="http://www.alistapart.com/stories/betterliving/">XHTML evangelists</a>.  These groups have been lauding the benefits of XHTML for a long time now.  Unfortunately, although I agree very strongly with their message, its not clear that everyone is listening.   Web developers are very practical people "“ show them how adhering to a standard will make their lives easier (or more fun) and their likely to do it.

That's what I hope to do here.  This brief tutorial will demonstrate the power of XHTML when combined with VoiceXML in a way that I hope is accessible to a large audience of developers.

<strong>Cooking up XHTML+Voice</strong>

The real promise of X+V (in MHO) is the potential to add voice functionality to existing visual XHTML markup.  This would have enormous benefits for all kinds of users, most notably those with visual disabilities.  The world is full of good, clean, well structured XHTML just waiting to be paired up with VoiceXML.  Even though we don't control this content (and, therefore, can't do browser sniffing and send X+V markup from the server to clients to can render it), we can still combine it with VoiceXML

Since XHTML and VoiceXML are both XML vocabularies, purists might point to the <a href="http://www.w3.org/Style/XSL/">XSLT standard</a> as the proper way to create X+V markup.  They'd have a valid point "“ anyone who is comfortable writing stylesheet transformation should have no problem creating some XSLT to add VoiceXML to XHTML.  I like this approach and I describe something similar in an <a href="http://www.voiceingov.org/blog/?page_id=8">earlier tutorial</a>.

But this tutorial is really geared for those that aren't quite convinced of the real power of XHTML yet "“ for these folks, talking about the elegance of XSLT (which, like XHTML, is another XML vocabulary) probably won't seal the deal.  Using XSLT can often require the use of an additional component "“ an <a href="http://www.google.com/search?hl=en&amp;q=xslt+engine&amp;btnG=Google+Search">XSLT engine</a> "“ that may present additional challenges for developers.

Instead, this approach will use plain old PHP to process XHTML and to add VoiceXML markup to an existing web page with no additional modules or extensions required.  For those that don't already know, PHP has some <a href="http://phpxmlclasses.sourceforge.net/">very powerful XML processing capabilities</a>.  The new version of PHP has an extension called <a href="http://us2.php.net/simplexml">SimpleXML</a> which I have found very useful in taking in XML and rendering pieces of it in other markup languages (i.e., grabbing an RSS feed and displaying news stories on a web page.)  However, I haven't found it particularly useful for creating new XML documents.

<a href="http://minixml.psychogenic.com/index.html">MiniXML</a> is an open source PHP class library that can be used to parse and generate XML.  The latest version can be download <a href="http://minixml.psychogenic.com/download.html">here</a>.  (Note, there is also a PERL version available for lovers of the other "P.")  This tool contains almost everything that is need to quickly and easily convert XHTML content to X+V.

<strong>Getting Prepped</strong>

The approach described here assumes some familiarity with using PHP classes "“ you may want to brush up on this if you don't feel comfortable making changes to PHP class libraries or using <a href="http://www.webreference.com/programming/phpanth2/">object-oriented PHP</a>.

You may also want to brush up on the basics of X+V "“ there are some great tutorials listed<a href="http://www.voiceingov.org/blog/?page_id=13"> here</a>, and also on the <a href="http://my.opera.com/community/dev/voice/">Opera website</a>.  With that out of the way, we're ready for the next step.

<strong>Making a Few Changes</strong>

Once you've downloaded and extracted the latest version of MiniXML (version 1.3.0 as of this writing), go to the directory you extracted it to and take a look at the file structure.

The primary file used with MiniXML is called "minixml.inc.php" -- include this file at the beginning of all scripts using MiniXML.  According to the documentation on the site:

<pre>
All your interactions with MiniXML begin with a MiniXMLDoc object.
To create one, simply:

$xmlDoc = new MiniXMLDoc();
</pre>

Now that we have an object, we can use it to parse (read in) existing
XML and/or to create new XML.

Before we do this, however, we're going to make a few modifications to some of the MiniXML files.  First, open the file "minixml.inc.php" - this file contains a number of configuration settings that you can modify to change the behavior of the class.  At or around line 59, you will see a constant named "MINIXML_AUTOESCAPE_ENTITIES" defined with a value of 1.  This constant controls how special characters and symbols are handled "“ if this constant is set to a value of 1, these character are escaped (replaced with equivalent HTML entities); if its set to 0 they are not escaped (and usually left out of the generated XML).  We want to change this parameter to 0 "“ this should filter out the DOCTYPE declaration found in most XHTML documents (immediately after the XML declaration).  X+V requires a special DOCTYPE declaration that we'll add in a minute.

Next, go into the folder named "classes" and open the file called "doc.inc.php."  (Note "“ unlike the previous change, these changes will modify the MiniXML classes in ways not envisioned by the creators. If it makes you more comfortable, create a backup copy before making these changes.)  We need to make three sets of changes to this file.

First, at or around lines 77-80 you will see the properties for the MiniXMLDoc class declared.  After the last property, add a new property called "$voice" as follows:

<pre>
var $voice = 'false';
</pre>

If you look below the section where the properties are declared, you will see the class methods, beginning with the constructor method.  Somewhere in this section, add a new method called "setVoice()" as follows:

<pre>
function setVoice() {
$this-&gt;voice = 'true';
}
</pre>

This is the method we will use to change the value of the $voice property we just added.  Now that we have a new property, and a method to change that property, we need to change the behavior of the MiniXMLDoc class based on the value we give this property.

At or around line 745, you will see a method called "toString" - this is the method called when you want to generate a new XML document.  We're going to modify this method as follows:

<pre>
function toString ($depth=0)
{
$retString = $this-&gt;xxmlDoc-&gt;toString($depth);

if ($depth == MINIXML_NOWHITESPACES)
{
$xmlhead = "";
} else {
$xmlhead = "n ";
}
<strong>if ($this-&gt;voice == 'true') {
$xmlhead .="n ";
}</strong>

$search = array("/]*)&gt;s*/smi", "//smi");
$replace = array($xmlhead, "");

$retString = preg_replace($search, $replace, $retString);

if (MINIXML_DEBUG &gt; 0)
{
_MiniXMLLog("MiniXML::toString() Returning XML:n$retStringnn");
}
</pre>

Very simply, we're telling MiniXML to check the value of our $voice property "“ if it is set to 'true' then we want to generate the required XHTML+Voice DOCTYPE declaration as part of our generated XML document.  After these changes are made, you should still be able to use MiniXML as before "“ the only difference will be that you can now generate an X+V document.  We'll do that next "“ before proceeding, save the file you just modified.

<strong>Turing XHTML into X+V</strong>

Once we've modified the MiniXML classes as described above we're ready to create some X+V.  The first step is to identify an XHTML document that you want to convert "“ this could be a file on your hard drive, or one that is available on the web.  Your choice.  For this example, I'll use one that is in one of the directories on my hard drive, and probably on your's as well.  To keep things simple, we'll use the default index page that's installed with the Apache web server "“ on my machine, this file is called "index.html.en" and its located in the root Apache directory.

Our goal is to take this file, which is just plain XHTML 1.0 transitional, and turn it into X+V so that we can render some of its content audibly.  To do this, create a new PHP file.  Now we need to make sure that we set the appropriate MIME type for X+V content "“ this will tell our browser (in this case, Opera 8.0) that it should render the content as X+V:

<pre>
// Set MIME Type for X+V
header('Content-type: application/xhtml-voice+xml');
</pre>

Now we need to include the MiniXML classes and create a new object:

<pre>
// Require MiniXML library and instantiate new MiniXML Object
require_once('minixml.inc.php');
$xmlDoc = new MiniXMLDoc();
</pre>

Next, we're going to set the $voice property that we added above to tell MiniXML to generate the X+V DOCTYPE declaration when we generate our finished product.

<pre>
// Set the DTD for XHTML+Voice
$xmlDoc-&gt;setVoice();
</pre>

Now we want to obtain an XML document to modify and access its root element:

<pre>
// Import XHTML file and get root element
$xmlDoc-&gt;fromFile('../index.html.en');
$xmlRoot =&amp; $xmlDoc-&gt;getRoot();
</pre>

Now we're ready to starting adding our VoiceXML dialogs to the document.  First, we access the &lt;html&gt; element and add a new XML namespace for XML events.  (X+V is closely tied to the XML Events specification "“ if your not comfortable with this spec, <a href="http://www.w3.org/TR/xml-events/">check it out here</a>.) :

<pre>
// Access &lt;html&gt; element and add XML events namespace declaration
$html =&amp; $xmlRoot-&gt;getElementByPath('html');
$html-&gt;attribute('xmlns:ev', 'http://www.w3.org/2001/xml-events');
</pre>

Almost all of our new content is added within the &lt;head&gt; element of the XHTML page.  We'll add two simple VoiceXML dialogs "“ one will render a simple message when the page is loaded, the other will render the content of a paragraph (enclosed within &lt;p&gt; tags) when clicked.  We haven't added the event handlers for these dialogs yet, but we will shortly.

<pre>
// Access &lt;head&gt; element and create child elements for VoiceXML forms
$head =&amp; $xmlRoot-&gt;getElementByPath('html/head');
$childElement1 =&amp; $head-&gt;createChild('form');
$childElement1-&gt;attribute('xmlns', 'http://www.w3.org/2001/vxml');
$childElement1-&gt;attribute('id', 'sayHello');
$newChild1 =&amp; $childElement1-&gt;createChild('block');
$newChild1-&gt;text('Hello. Voice is enabled.');

$childElement2 =&amp; $head-&gt;createChild('form');
$childElement2-&gt;attribute('xmlns', 'http://www.w3.org/2001/vxml');
$childElement2-&gt;attribute('id', 'talkNow');
$newChild2 =&amp; $childElement2-&gt;createChild('block');
$newChild3 =&amp; $newChild2-&gt;createChild('prompt');
$newChild3-&gt;attribute('xv:src', '#talk');
</pre>

Now that we've added our dialogs, we need to add event handlers so that our browser will know when to execute them.  Note that in the dialogs above, we added an "id" attribute.  The event handlers we will now add will reference these id's and fire when the designated event occurs.

<pre>
// Access &lt;body&gt; element and add VXML event handler
$body =&amp; $xmlRoot-&gt;getElementByPath('html/body');
$body-&gt;attribute('ev:event', 'load');
$body-&gt;attribute('ev:handler', '#sayHello');

// Access first &lt;p&gt; element and associate with VXML event handler
$para =&amp;$xmlRoot-&gt;getElementByPath('html/body/p');
$para-&gt;attribute('id', 'talk');
$para-&gt;attribute('ev:event', 'click');
$para-&gt;attribute('ev:handler', '#talkNow');
</pre>

Now that we've made all of the required changes, we need to output the XML so that our browser can render it:

<pre>
// Print our new XHTML+Voice document
echo $xmlDoc-&gt;toString();
</pre>

Give this file a name and save it.  Now when you open this file up with your Opera browser, you should hear the message: "Hello. Voice is enabled."  Try clicking on the first paragraph in the page "“ the browser should read the content to you.  To download a copy of this file, <a href="http://www.voiceingov.org/xfiles/tutorials/makeXV.php.txt">click here</a>.

You can modify the voice setting in Opera by going to Tools &gt; Preferences and clicking on the Advanced tab.  The voice options is on the lower left "“ personally I find the female voice a lot more soothing. ;-)

<strong>Conclusion</strong>

Now that you know how to turn plain old XHTML into voice-enabled X+V using a dash of PHP and your trusty Opera browser, I bet your thinking of all sorts of new projects.  This highlights the importance of proper markup and the use of XHTML.  If can be so bold as to quote the right honorable Sir Tim Berners-Lee:


<blockquote>"You affect the world by what you browse."</blockquote>


I would submit that you affect the world by <strong>how</strong> you browse, or by how you enable others to browse.  Voice browsing is the future, and those that have taken steps to make sure their web pages use good clean XHTML are a few steps away from affecting how people can browse web content.  Just a few steps away from affecting the world.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>53</wp:post_id>
  <wp:post_date>2005-08-30 10:14:16</wp:post_date>
  <wp:post_date_gmt>2005-08-30 14:14:16</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>x-v-php</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2248</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[53]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[53]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>15</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>mheadd@diamondtechnologies.com</wp:comment_author_email>
    <wp:comment_author_url>http://markheadd.lunarpages.com</wp:comment_author_url>
    <wp:comment_author_IP>66.237.221.18</wp:comment_author_IP>
    <wp:comment_date>2005-09-02 11:34:39</wp:comment_date>
    <wp:comment_date_gmt>2005-09-02 15:34:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interestingly, this example works yet there is no namespace declaration in the above example for X+V attributes.  There is an X+V attribute used in the second VoiceXML dialog ("xv:src").  Shouldn't a namespace declaration be requried?

More on the "src" attribute of the &lt;prompt&gt; tag in X+V can be found at <a href="http://www.voicexml.org/specs/multimodal/x+v/12/index.html#xv-prompt-src" rel="nofollow">here</a>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-02 15:34:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>16</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;:| Vox Populus |:&#8230;&raquo;Blog Archive &raquo; Opera is Free!]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=61</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2005-09-20 10:17:11</wp:comment_date>
    <wp:comment_date_gmt>2005-09-20 14:17:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] X + V + PHP [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-09-20 14:17:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>17</wp:comment_id>
    <wp:comment_author><![CDATA[Voice(XML) of the People &raquo; New Tutorial Coming Soon]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=65</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2005-10-06 10:38:52</wp:comment_date>
    <wp:comment_date_gmt>2005-10-06 14:38:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Several weeks back, I wrote a tutorial covering the basics of converting visual XHTML web pages into superhappyfantastic XHTML+Voice content using PHP. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-10-06 14:38:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>cell-phonethumbnail</title>
  <link>http://voiceingov.org/2008/10/30/dc-crime-finder/cell-phonethumbnail/#main</link>
  <pubDate>Thu, 30 Oct 2008 18:11:50 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2008/10/cell-phonethumbnail.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>151</wp:post_id>
  <wp:post_date>2008-10-30 14:11:50</wp:post_date>
  <wp:post_date_gmt>2008-10-30 18:11:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cell-phonethumbnail</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>150</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2008/10/cell-phonethumbnail.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[151]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>facebook</title>
  <link>http://voiceingov.org/2008/12/23/facebook-integration-enabled/facebook/#main</link>
  <pubDate>Tue, 23 Dec 2008 13:01:11 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2008/12/facebook.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>313</wp:post_id>
  <wp:post_date>2008-12-23 09:01:11</wp:post_date>
  <wp:post_date_gmt>2008-12-23 13:01:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>facebook</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>305</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2008/12/facebook.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[313]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Boston Centics</title>
  <link>http://voiceingov.org/2008/12/25/how-not-to-manage-an-api/celtics/#main</link>
  <pubDate>Thu, 25 Dec 2008 16:34:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2008/12/celtics.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>370</wp:post_id>
  <wp:post_date>2008-12-25 12:34:36</wp:post_date>
  <wp:post_date_gmt>2008-12-25 16:34:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>celtics</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>354</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2008/12/celtics.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[370]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Cell Tower in DC</title>
  <link>http://voiceingov.org/2009/01/19/wireless-carriers-to-sing-inaugural-blues/cell_tower/#main</link>
  <pubDate>Mon, 19 Jan 2009 13:09:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/01/cell_tower.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>583</wp:post_id>
  <wp:post_date>2009-01-19 09:09:36</wp:post_date>
  <wp:post_date_gmt>2009-01-19 13:09:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cell_tower</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>579</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/01/cell_tower.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[579]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[583]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>penguin</title>
  <link>http://voiceingov.org/2009/02/19/the-penguin-loves-obama/penguin/#main</link>
  <pubDate>Thu, 19 Feb 2009 20:49:44 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/02/penguin.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>701</wp:post_id>
  <wp:post_date>2009-02-19 16:49:44</wp:post_date>
  <wp:post_date_gmt>2009-02-19 20:49:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>penguin</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>700</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/02/penguin.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[701]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Projects</title>
  <link>http://voiceingov.org/built-by-me/</link>
  <pubDate>Tue, 19 May 2009 01:50:29 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=825</guid>
  <description/>
  <content:encoded><![CDATA[I worked for over 12 years in state government -- at various times I worked for one of the largest state governments in the country, and one of the smallest.  I've worked in both the Executive and Legislative branches.  One of the things I am most proud of having worked on as a state employee is the <a href="http://dti.delaware.gov/services/accessde.shtml" target="_blank">Access Delaware Project</a>.

I try to work on open source projects when I can. I never feel like I have enough time.  Here are a few of the projects I've worked on recently.

<h3>TweetMy311</h3>

<blockquote>
<em><a href="http://tweetmy311.org/">TweetMy311</a></em> makes it easy to submit 311 service requests using a smart phone and Twitter.  It’s designed to work with the <a href="http://open311.org/">Open311 API</a> being deployed by cities in the United States and Canada.

Currently, the service only works in the San Francisco metropolitan area. As more cities adopt the Open311 standard, it will be possible to enable TweetMy311 in those areas.
</blockquote>

<h3>DC Crime Finder</h3>

<blockquote>
The <em><a href="http://www.appsfordemocracy.org/dc-crime-finder/">DC Crime Finder</a></em> is a multimodal app that lets residents of the District of Columbia search for crime locations in their neighborhoods.

It uses <a href="http://data.octo.dc.gov/" target="_blank">actual crime data published by the District</a> and supports a wide range of devices for looking up addresses and crime locations.  The DC Crime Finder works with traditional desktop web browsers, mobile devices and PDAs, smart phones, iPhones, G1 phones -- essentially any device that has a web browser and access to the Internet.

The application also works with ordinary cell phones and even land line phones.  It sports a voice user interface (VUI) which makes it accessible from any old school telephone -- even a rotary phone (if anyone in DC still has one).

This application was my submission to the<a href="http://www.appsfordemocracy.org/" target="_blank"> Apps For Democracy</a> contest (version 1) sponsored by the District of Columbia and iStrategyLabs.
</blockquote>


<h3>Hear Me Say This</h3>

<blockquote>

<em><a href="http://hearmesaythis.org/" target="_blank">Hear Me Say This</a></em> is a web application that uses the Sunlight Labs API, the Twitter API and the plain old telephone to empower citizens to send a message to the people that represent them in Congress.

The application uses the <a href="http://www.voxeo.com/free/" target="_blank">Voxeo Prophecy platform</a> to support the VoiceXML and CCXML components it uses, and is hosted on a lean and mean Ubuntu web server. The back end is written in PHP 5 and uses a MySQL database.  Its open source, and uses the latest open standards for developing telephone applications.

This application was an entry in the Sunlight Labs <a href="http://www.sunlightlabs.com/appsforamerica/" target="_blank">Apps for America</a> contest.</blockquote>

<h3>NY Senate Bill Status Bot</h3>

<blockquote>
A <a href="http://github.com/mheadd/nys-bill-bot/tree/master" target="_blank">multi-modal application</a> that allows citizens to use multiple channels to access information on bill status from the NY Senate legislative information system.  Discussed more fully <a href="http://www.voiceingov.org/blog/?p=1005">here</a>.
</blockquote>

<h3>Find My Library</h3>
<blockquote>
<em><a href="http://findmylibrary.org/" target="_blank">Find My Library</a></em> is an open source software project with the goal of making it easier for patrons - particularly those with limited access to the Internet from home - to locate a public library in their community. Find My Library makes it simple and convenient for anyone to locate a library in their neighborhood. The application can be used with any telephone. From traditional land line telephones to sophisticated mobile phones such as the G1 Phone, iPhone and Droid. If it can make a phone call, you can use it to find a library near you.

This application was an entry in the <a href="http://www.nycbigapps.com/" target="_blank">NYC Big Apps</a> competition.
</blockquote>

<h3>Toronto Child Care Finder</h3>
<blockquote>
Find child care locations in the City of Toronto using an open data set released by the Toronto government.  Discussed more fully <a href="http://www.voiceingov.org/blog/?p=1333">here</a>.
</blockquote>

<h3>Mobile Advocate</h3>
<blockquote>
<em><a href="http://mobileadvocate.org/" target="_blank">Mobile Advocate</a></em> is an open source software project that aims to turn the ordinary cell phone into a powerful recruitment and advocacy tool.  Using Mobile Advocate, organizations of any size can easily recruit citizens and voters and put them in direct contact with the people that represent them in government.  Mobile Advocate empowers field recruiters by turning any regular SMS-enabled cell phone into a recruitment tool.  Recruiters and field workers don’t need expensive or cumbersome equipment, or lengthy complex training to quickly begin recruiting citizens and voters to their cause.

</blockquote>

More good stuff by me can be found on <a href="http://github.com/mheadd">GitHub</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>825</wp:post_id>
  <wp:post_date>2009-05-18 21:50:29</wp:post_date>
  <wp:post_date_gmt>2009-05-19 01:50:29</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>built-by-me</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[825]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[825]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Twitter</title>
  <link>http://voiceingov.org/twitter1/</link>
  <pubDate>Tue, 02 Jun 2009 12:54:54 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/06/twitter1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>911</wp:post_id>
  <wp:post_date>2009-06-02 08:54:54</wp:post_date>
  <wp:post_date_gmt>2009-06-02 12:54:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>twitter1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/06/twitter1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[911]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>fema_tweet</title>
  <link>http://voiceingov.org/2009/06/05/odd-tweet-of-the-day-award/fema_tweet/#main</link>
  <pubDate>Fri, 05 Jun 2009 13:35:49 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/06/fema_tweet.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>950</wp:post_id>
  <wp:post_date>2009-06-05 09:35:49</wp:post_date>
  <wp:post_date_gmt>2009-06-05 13:35:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fema_tweet</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>949</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/06/fema_tweet.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[950]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>YouTube</title>
  <link>http://voiceingov.org/youtube/</link>
  <pubDate>Fri, 12 Jun 2009 12:41:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/06/youtube.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>988</wp:post_id>
  <wp:post_date>2009-06-12 08:41:18</wp:post_date>
  <wp:post_date_gmt>2009-06-12 12:41:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>youtube</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/06/youtube.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[988]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>twitter</title>
  <link>http://voiceingov.org/twitter/</link>
  <pubDate>Thu, 24 Sep 2009 12:48:28 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/09/twitter.jpeg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1179</wp:post_id>
  <wp:post_date>2009-09-24 08:48:28</wp:post_date>
  <wp:post_date_gmt>2009-09-24 12:48:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>twitter</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/09/twitter.jpeg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1179]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>twitter_1</title>
  <link>http://voiceingov.org/twitter_1/</link>
  <pubDate>Thu, 24 Sep 2009 12:51:25 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/09/twitter_1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1184</wp:post_id>
  <wp:post_date>2009-09-24 08:51:25</wp:post_date>
  <wp:post_date_gmt>2009-09-24 12:51:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>twitter_1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/09/twitter_1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1184]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>prowl_1</title>
  <link>http://voiceingov.org/prowl_1/</link>
  <pubDate>Mon, 26 Oct 2009 23:49:06 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/10/prowl_1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1295</wp:post_id>
  <wp:post_date>2009-10-26 19:49:06</wp:post_date>
  <wp:post_date_gmt>2009-10-26 23:49:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>prowl_1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/10/prowl_1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1295]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Prowl</title>
  <link>http://voiceingov.org/prowl_11/</link>
  <pubDate>Mon, 26 Oct 2009 23:50:03 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/10/prowl_11.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Prowl]]></excerpt:encoded>
  <wp:post_id>1296</wp:post_id>
  <wp:post_date>2009-10-26 19:50:03</wp:post_date>
  <wp:post_date_gmt>2009-10-26 23:50:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>prowl_11</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/10/prowl_11.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1296]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>prowl_1</title>
  <link>http://voiceingov.org/prowl_1-2/</link>
  <pubDate>Mon, 26 Oct 2009 23:54:33 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/10/prowl_1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1301</wp:post_id>
  <wp:post_date>2009-10-26 19:54:33</wp:post_date>
  <wp:post_date_gmt>2009-10-26 23:54:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>prowl_1-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/10/prowl_1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1301]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>prowl_2</title>
  <link>http://voiceingov.org/prowl_2/</link>
  <pubDate>Mon, 26 Oct 2009 23:56:29 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/10/prowl_2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1302</wp:post_id>
  <wp:post_date>2009-10-26 19:56:29</wp:post_date>
  <wp:post_date_gmt>2009-10-26 23:56:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>prowl_2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/10/prowl_2.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1302]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>choices</title>
  <link>http://voiceingov.org/2009/10/29/next-steps-in-the-evolution-of-multimodal-applications/choices/#main</link>
  <pubDate>Thu, 29 Oct 2009 17:54:12 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/10/choices.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1323</wp:post_id>
  <wp:post_date>2009-10-29 13:54:12</wp:post_date>
  <wp:post_date_gmt>2009-10-29 17:54:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>choices</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1314</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/10/choices.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1323]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>image_1</title>
  <link>http://voiceingov.org/image_1/</link>
  <pubDate>Wed, 04 Nov 2009 17:12:37 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/11/image_1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1337</wp:post_id>
  <wp:post_date>2009-11-04 13:12:37</wp:post_date>
  <wp:post_date_gmt>2009-11-04 17:12:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>image_1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/11/image_1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1337]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>image_11</title>
  <link>http://voiceingov.org/image_11/</link>
  <pubDate>Wed, 04 Nov 2009 17:13:49 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/11/image_11.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1338</wp:post_id>
  <wp:post_date>2009-11-04 13:13:49</wp:post_date>
  <wp:post_date_gmt>2009-11-04 17:13:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>image_11</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/11/image_11.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1338]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>image_12</title>
  <link>http://voiceingov.org/image_12/</link>
  <pubDate>Wed, 04 Nov 2009 17:16:31 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/11/image_12.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1341</wp:post_id>
  <wp:post_date>2009-11-04 13:16:31</wp:post_date>
  <wp:post_date_gmt>2009-11-04 17:16:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>image_12</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/11/image_12.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1341]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>image_2</title>
  <link>http://voiceingov.org/image_2/</link>
  <pubDate>Wed, 04 Nov 2009 17:18:49 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/11/image_2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1344</wp:post_id>
  <wp:post_date>2009-11-04 13:18:49</wp:post_date>
  <wp:post_date_gmt>2009-11-04 17:18:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>image_2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/11/image_2.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1344]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>chat</title>
  <link>http://voiceingov.org/chat/</link>
  <pubDate>Wed, 04 Nov 2009 20:48:57 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/11/chat.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1353</wp:post_id>
  <wp:post_date>2009-11-04 16:48:57</wp:post_date>
  <wp:post_date_gmt>2009-11-04 20:48:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>chat</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/11/chat.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1353]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>chat2</title>
  <link>http://voiceingov.org/chat2/</link>
  <pubDate>Wed, 04 Nov 2009 20:52:33 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/11/chat2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1355</wp:post_id>
  <wp:post_date>2009-11-04 16:52:33</wp:post_date>
  <wp:post_date_gmt>2009-11-04 20:52:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>chat2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/11/chat2.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1355]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>backstreet-boys-0001</title>
  <link>http://voiceingov.org/backstreet-boys-0001/</link>
  <pubDate>Tue, 15 Dec 2009 00:18:49 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2009/12/backstreet-boys-0001.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1436</wp:post_id>
  <wp:post_date>2009-12-14 20:18:49</wp:post_date>
  <wp:post_date_gmt>2009-12-15 00:18:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>backstreet-boys-0001</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2009/12/backstreet-boys-0001.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1436]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>couchdb-logo</title>
  <link>http://voiceingov.org/2010/01/06/relaxing-on-the-couch-with-tropo-and-couchdb/couchdb-logo/#main</link>
  <pubDate>Tue, 12 Jan 2010 15:23:47 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/01/couchdb-logo.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1531</wp:post_id>
  <wp:post_date>2010-01-12 11:23:47</wp:post_date>
  <wp:post_date_gmt>2010-01-12 15:23:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>couchdb-logo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1510</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/01/couchdb-logo.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[1510]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1531]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>tropo</title>
  <link>http://voiceingov.org/2010/01/04/building-voice-applications-with-tropo-and-couchdb/tropo/#main</link>
  <pubDate>Tue, 12 Jan 2010 15:27:19 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/01/tropo.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1533</wp:post_id>
  <wp:post_date>2010-01-12 11:27:19</wp:post_date>
  <wp:post_date_gmt>2010-01-12 15:27:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tropo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1471</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/01/tropo.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[1471]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1533]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>tweet</title>
  <link>http://voiceingov.org/tweet/</link>
  <pubDate>Mon, 18 Jan 2010 18:31:26 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/01/tweet.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1567</wp:post_id>
  <wp:post_date>2010-01-18 14:31:26</wp:post_date>
  <wp:post_date_gmt>2010-01-18 18:31:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tweet</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/01/tweet.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1567]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>wonder_twits</title>
  <link>http://voiceingov.org/wonder_twits/</link>
  <pubDate>Mon, 01 Feb 2010 19:30:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/02/wonder_twits.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1592</wp:post_id>
  <wp:post_date>2010-02-01 15:30:18</wp:post_date>
  <wp:post_date_gmt>2010-02-01 19:30:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>wonder_twits</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/02/wonder_twits.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1592]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Classic Dilbert</title>
  <link>http://voiceingov.org/?p=1654</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1654</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://dilbert.com/strips/comic/2010-03-22/" title="Dilbert.com"><img src="http://dilbert.com/dyn/str_strip/000000000/00000000/0000000/000000/80000/5000/700/85737/85737.strip.gif" border="0" alt="Dilbert.com" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1654</wp:post_id>
  <wp:post_date>2010-03-22 08:51:01</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1654]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1654]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tropo</title>
  <link>http://voiceingov.org/2010/03/25/tropo-goes-global/tropo-2/#main</link>
  <pubDate>Fri, 26 Mar 2010 12:55:25 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/03/tropo.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1680</wp:post_id>
  <wp:post_date>2010-03-26 08:55:25</wp:post_date>
  <wp:post_date_gmt>2010-03-26 12:55:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tropo-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1661</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/03/tropo.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[1661]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1680]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>plug</title>
  <link>http://voiceingov.org/plug/</link>
  <pubDate>Thu, 01 Apr 2010 21:49:38 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/04/plug.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1705</wp:post_id>
  <wp:post_date>2010-04-01 17:49:38</wp:post_date>
  <wp:post_date_gmt>2010-04-01 21:49:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>plug</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/04/plug.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1705]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ecomm</title>
  <link>http://voiceingov.org/ecomm/</link>
  <pubDate>Thu, 22 Apr 2010 18:33:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/04/ecomm.jpg</guid>
  <description/>
  <content:encoded><![CDATA[Mark Headd (Tele-Works, Inc.) on stage at eComm America 2010 in San Francisco.]]></content:encoded>
  <excerpt:encoded><![CDATA[Photo by James Duncan Davidson]]></excerpt:encoded>
  <wp:post_id>1756</wp:post_id>
  <wp:post_date>2010-04-22 14:33:36</wp:post_date>
  <wp:post_date_gmt>2010-04-22 18:33:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ecomm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/04/ecomm.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1756]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TweetMy311</title>
  <link>http://voiceingov.org/tweetmy311_logo/</link>
  <pubDate>Wed, 19 May 2010 02:23:44 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/05/tweetmy311_logo.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1801</wp:post_id>
  <wp:post_date>2010-05-18 22:23:44</wp:post_date>
  <wp:post_date_gmt>2010-05-19 02:23:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tweetmy311_logo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/05/tweetmy311_logo.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1801]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Create a new Tropo WebAPI application</title>
  <link>http://voiceingov.org/2010/06/06/building-cloud-communication-apps-with-tropo/application_step_1/#main</link>
  <pubDate>Sun, 06 Jun 2010 16:42:07 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/06/application_step_1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1828</wp:post_id>
  <wp:post_date>2010-06-06 12:42:07</wp:post_date>
  <wp:post_date_gmt>2010-06-06 16:42:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>application_step_1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1817</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/06/application_step_1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1828]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Assign a URL to your new Tropo WebAPI application</title>
  <link>http://voiceingov.org/2010/06/06/building-cloud-communication-apps-with-tropo/application_step_2/#main</link>
  <pubDate>Sun, 06 Jun 2010 16:42:46 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/06/application_step_2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1829</wp:post_id>
  <wp:post_date>2010-06-06 12:42:46</wp:post_date>
  <wp:post_date_gmt>2010-06-06 16:42:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>application_step_2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1817</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/06/application_step_2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1829]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>IM Bot Before Changes</title>
  <link>http://voiceingov.org/2010/07/05/building-cloud-communication-apps-with-tropo-part-4/before/#main</link>
  <pubDate>Mon, 05 Jul 2010 18:39:11 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/07/before.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1919</wp:post_id>
  <wp:post_date>2010-07-05 14:39:11</wp:post_date>
  <wp:post_date_gmt>2010-07-05 18:39:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>before</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1918</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/07/before.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1919]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>after</title>
  <link>http://voiceingov.org/2010/07/05/building-cloud-communication-apps-with-tropo-part-4/after/#main</link>
  <pubDate>Mon, 05 Jul 2010 20:59:57 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/07/after.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1927</wp:post_id>
  <wp:post_date>2010-07-05 16:59:57</wp:post_date>
  <wp:post_date_gmt>2010-07-05 20:59:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>after</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1918</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/07/after.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1927]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Node.js</title>
  <link>http://voiceingov.org/2010/10/01/building-voice-applications-with-tropo-and-nodejs/nodejs_/#main</link>
  <pubDate>Fri, 01 Oct 2010 19:32:24 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/10/nodejs_.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2047</wp:post_id>
  <wp:post_date>2010-10-01 15:32:24</wp:post_date>
  <wp:post_date_gmt>2010-10-01 19:32:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>nodejs_</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2045</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/10/nodejs_.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2047]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tools</title>
  <link>http://voiceingov.org/developer-tools/</link>
  <pubDate>Mon, 04 Oct 2010 15:17:25 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=2064</guid>
  <description/>
  <content:encoded><![CDATA[I'm active in a number of developer communities, and have worked to share libraries in different languages for building open government applications and working with open gov APIs.

Here are some of the developer tools I have worked on:

<h3>Open Government &amp; 311 API tools:</h3>

<ul>
<li><a href="http://github.com/mheadd/PHPOpen311">Open 311 PHP API Library</a>. A set of PHP classes for working with the <a href="http://open311.org/">Open311 API</a>.</li>
<li><a href="http://github.com/mheadd/CSharpOpen311-v2">Open 311 C# API Library</a>.  A set of C# classes for working with <a href="http://wiki.open311.org/GeoReport_v2">Version 2 of the Open311 API</a> (GeoReport API V2)</li>
<li><a href="https://github.com/mheadd/node-open311">Open 311 Node.js Library</a>. A Node.js module for working with <a href="http://wiki.open311.org/GeoReport_v2">Version 2 of the Open311 API</a> (GeoReport API V2)</li>
</ul>

<h3>Voice &amp; Mobile Application Development Tools:</h3>

<ul>
<li><a href="http://github.com/tropo/tropo-webapi-php">Tropo WebAPI PHP</a>. A set of PHP classes for working with the Voxeo <a href="https://www.tropo.com/home.jsp">Tropo</a> WebAPI.</li>
<li><a href="http://github.com/tropo/tropo-webapi-csharp">Tropo WebAPI C#</a>. A set of C# classes for working with the Voxeo <a href="https://www.tropo.com/home.jsp">Tropo</a> WebAPI.</li>
<li><a href="http://github.com/tropo/tropo-webapi-node">Tropo WebAPI Node.js</a>. A Node.js Module for working with the Voxeo <a href="https://www.tropo.com/home.jsp">Tropo</a> WebAPI.</li>
<li><a href="http://github.com/mheadd/PHPGrammar">PHPGrammar</a>. PHP classes that can be used to generate W3C XML Grammar files.</li>
<li><a href="http://gist.github.com/226146">Instant Messaging / SMS Bot Class</a>. A small PHP class that makes it easy to interact with the IMified platform for building IM, SMS and Twitter apps. </li>
<li><a href="https://github.com/smsified/smsified-php">SMSified PHP Library</a>. A PHP library for interaction with the SMSified API.</li>
<li><a href="https://github.com/smsified/smsified-node">SMSified-Node</a>. A Node.js module for interaction with the SMSified API.</li>
</ul>

More good stuff by me can be found on <a href="https://github.com/mheadd">GitHub</a>.

If you've built a library for an open government data set, platform or API I'd love to <a href="mailto:mheadd@voiceingov.org">chat with you</a> about it.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2064</wp:post_id>
  <wp:post_date>2010-10-04 11:17:25</wp:post_date>
  <wp:post_date_gmt>2010-10-04 15:17:25</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>developer-tools</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2064]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2064]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>transit</title>
  <link>http://voiceingov.org/transit/</link>
  <pubDate>Fri, 08 Oct 2010 17:53:07 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/10/transit.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2082</wp:post_id>
  <wp:post_date>2010-10-08 13:53:07</wp:post_date>
  <wp:post_date_gmt>2010-10-08 17:53:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>transit</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/10/transit.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2082]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>transit1</title>
  <link>http://voiceingov.org/transit1/</link>
  <pubDate>Fri, 08 Oct 2010 17:56:21 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/10/transit1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2084</wp:post_id>
  <wp:post_date>2010-10-08 13:56:21</wp:post_date>
  <wp:post_date_gmt>2010-10-08 17:56:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>transit1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/10/transit1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2084]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>mysql</title>
  <link>http://voiceingov.org/mysql/</link>
  <pubDate>Fri, 08 Oct 2010 17:57:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/10/mysql.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2086</wp:post_id>
  <wp:post_date>2010-10-08 13:57:36</wp:post_date>
  <wp:post_date_gmt>2010-10-08 17:57:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>mysql</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/10/mysql.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2086]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>images</title>
  <link>http://voiceingov.org/images/</link>
  <pubDate>Thu, 14 Oct 2010 12:35:40 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/10/images.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2093</wp:post_id>
  <wp:post_date>2010-10-14 08:35:40</wp:post_date>
  <wp:post_date_gmt>2010-10-14 12:35:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>images</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/10/images.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2093]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The old way</title>
  <link>http://voiceingov.org/2010/10/16/how-to-build-a-telephone/old-phone/#main</link>
  <pubDate>Sat, 16 Oct 2010 15:31:48 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/10/old-phone.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2103</wp:post_id>
  <wp:post_date>2010-10-16 11:31:48</wp:post_date>
  <wp:post_date_gmt>2010-10-16 15:31:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>old-phone</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2102</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/10/old-phone.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2103]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>new-phone</title>
  <link>http://voiceingov.org/2010/10/16/how-to-build-a-telephone/new-phone/#main</link>
  <pubDate>Sat, 16 Oct 2010 15:32:11 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/10/new-phone.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2104</wp:post_id>
  <wp:post_date>2010-10-16 11:32:11</wp:post_date>
  <wp:post_date_gmt>2010-10-16 15:32:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>new-phone</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2102</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/10/new-phone.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2104]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>asterisk</title>
  <link>http://voiceingov.org/2010/10/28/interactive-screen-pops-with-asterisk-xmpp/asterisk/#main</link>
  <pubDate>Thu, 28 Oct 2010 20:46:32 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/10/asterisk.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2151</wp:post_id>
  <wp:post_date>2010-10-28 16:46:32</wp:post_date>
  <wp:post_date_gmt>2010-10-28 20:46:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>asterisk</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2145</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/10/asterisk.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2151]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>asterisk1</title>
  <link>http://voiceingov.org/2010/10/28/interactive-screen-pops-with-asterisk-xmpp/asterisk1/#main</link>
  <pubDate>Thu, 28 Oct 2010 20:48:33 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/10/asterisk1.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2153</wp:post_id>
  <wp:post_date>2010-10-28 16:48:33</wp:post_date>
  <wp:post_date_gmt>2010-10-28 20:48:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>asterisk1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2145</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/10/asterisk1.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2153]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>web-api</title>
  <link>http://voiceingov.org/web-api/</link>
  <pubDate>Tue, 02 Nov 2010 19:11:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/11/web-api.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2168</wp:post_id>
  <wp:post_date>2010-11-02 15:11:18</wp:post_date>
  <wp:post_date_gmt>2010-11-02 19:11:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>web-api</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/11/web-api.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2168]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>transit-finder</title>
  <link>http://voiceingov.org/transit-finder/</link>
  <pubDate>Tue, 02 Nov 2010 19:17:44 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/11/transit-finder.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2172</wp:post_id>
  <wp:post_date>2010-11-02 15:17:44</wp:post_date>
  <wp:post_date_gmt>2010-11-02 19:17:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>transit-finder</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/11/transit-finder.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2172]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>transit-finder1</title>
  <link>http://voiceingov.org/transit-finder1/</link>
  <pubDate>Tue, 02 Nov 2010 19:30:47 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/11/transit-finder1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2181</wp:post_id>
  <wp:post_date>2010-11-02 15:30:47</wp:post_date>
  <wp:post_date_gmt>2010-11-02 19:30:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>transit-finder1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/11/transit-finder1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2181]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>tropo_logo</title>
  <link>http://voiceingov.org/tropo_logo/</link>
  <pubDate>Tue, 02 Nov 2010 19:39:55 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/11/tropo_logo.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2185</wp:post_id>
  <wp:post_date>2010-11-02 15:39:55</wp:post_date>
  <wp:post_date_gmt>2010-11-02 19:39:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tropo_logo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/11/tropo_logo.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2185]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>IMG_2986</title>
  <link>http://voiceingov.org/img_2986/</link>
  <pubDate>Mon, 06 Dec 2010 22:12:01 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/12/5232925268_ab72f4d6bc.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2200</wp:post_id>
  <wp:post_date>2010-12-06 18:12:01</wp:post_date>
  <wp:post_date_gmt>2010-12-06 22:12:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_2986</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/12/5232925268_ab72f4d6bc.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2200]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>IMG_2986</title>
  <link>http://voiceingov.org/img_2986-2/</link>
  <pubDate>Mon, 06 Dec 2010 22:15:19 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2010/12/5232925268_ab72f4d6bc_m.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2204</wp:post_id>
  <wp:post_date>2010-12-06 18:15:19</wp:post_date>
  <wp:post_date_gmt>2010-12-06 22:15:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_2986-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2010/12/5232925268_ab72f4d6bc_m.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2204]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Node.js Coming of Age</title>
  <link>http://voiceingov.org/?p=2228</link>
  <pubDate>Tue, 18 Jan 2011 20:53:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=2228</guid>
  <description/>
  <content:encoded><![CDATA[I've written before about <a href="http://www.voiceingov.org/blog/?p=2045">using Node.js to build communication apps</a>, and I'm always looking to <a href="http://blog.tropo.com/2010/12/21/evented-communication-apps-with-tropo-and-node-js/">sharpen my skills</a> and beef up the <a href="https://github.com/tropo/tropo-webapi-node">Node.js module I wrote</a> for building Tropo applications.
<img src="http://voiceingov.files.wordpress.com/2011/01/ninjawhite.jpg?w=300&amp;h=290" alt="NodeFu" title="NodeFu" width="150" height="150" style="float:right;padding:5px;margin:10px;" />
It's interesting to see <a href="http://nodejs.org/">Node.js</a> start to come of age and really gain traction in the developer community.

One concrete indication that this is happening is the announcement today of a new hosting service for Node.js applications - <a href="http://www.nodefu.com/">NodeFu</a>.  NodeFu is the brainchild of my friend and co-worker <a href="http://twitter.com/#!/chrismatthieu">Chris Matthieu</a>.

It works very much like Heroku, and makes it dead simple to deploy and run Node.js apps. NodeFu isn't the only Node.js hosting platform out there, but it is one of the first to start letting developers deploy apps.  (Maybe this will encourage some of the other players in the space to tap the gas pedal a bit.)

I don't think I know anybody who thinks as big about technology as Chris does. He's a voice developer from way back, and like lots of us Chris has always though of better ways to build voice applications.

Unlike the rest of us, however, who toil away creating libraries in various languages to ease the pain of voice app development, Chris actually built <a href="http://teleku.com/">his own platform</a>.

And true to form, once he got the Node.js bug, Chris again thought big. The result - <a href="http://www.nodefu.com/">NodeFu</a>.

Bow to your Sensei!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2228</wp:post_id>
  <wp:post_date>2011-01-18 16:53:36</wp:post_date>
  <wp:post_date_gmt>2011-01-18 20:53:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>nodejs-coming-of-age</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_16b9c8ece242b19af576cae651e7af42</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[3801781]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>NodeFu</title>
  <link>http://voiceingov.org/?attachment_id=2229#main</link>
  <pubDate>Tue, 18 Jan 2011 20:48:05 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2011/01/ninjawhite.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2229</wp:post_id>
  <wp:post_date>2011-01-18 16:48:05</wp:post_date>
  <wp:post_date_gmt>2011-01-18 20:48:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ninjawhite</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2011/01/ninjawhite.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2229]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The Downside of Data Scrapers</title>
  <link>http://voiceingov.org/?p=2242</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=2242</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2242</wp:post_id>
  <wp:post_date>2011-01-22 19:42:36</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2242]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2242]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Phone Technologies</title>
  <link>http://voiceingov.org/technologies/</link>
  <pubDate>Tue, 14 Jun 2005 14:18:31 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=4</guid>
  <description/>
  <content:encoded><![CDATA[Phone and mobile technologies are my passion.  Here are some of the major standards for phone based technologies that I have worked with in the past.

<strong>VoiceXML</strong>
<a href="http://en.wikipedia.org/wiki/VoiceXML" target="_blank">VoiceXML</a> is a Web-based markup language for representing human-computer dialogs, just like HTML. But while HTML presumes a graphical user interface to access information, VoiceXML presumes an audio interface where speech and <acronym title="Dual Tone Multi Frequency">DTMF</acronym> tones take the place of the screen, keyboard, and mouse.

<strong>CCXML</strong>
<a href="http://en.wikipedia.org/wiki/Call_Control_eXtensible_Markup_Language" target="_blank">CCXML</a> was designed to provide telephony control for VoiceXML (and other dialog languages).  Application developers can use CCXML to perform call screening, whisper call waiting, and call transfer. CCXML enables applications to offer users the ability to place outbound calls, conditionally answer calls, and to initiate or receive outbound communications such as another call.

<strong>SRGS and SISR</strong>
The <a href="http://en.wikipedia.org/wiki/Speech_Recognition_Grammar_Specification" target="_blank">Speech Recognition Grammar Specification</a> (SRGS) and the Semantic Interpretation for Speech Recognition standard support the development of speech grammars to be used in voice applications.  Grammars are a central component to voice applications which define the set of words or word combinations that are recognized by an application.

<strong>XHTML + Voice (X+V)</strong>
IBM, Motorola, and Opera have drafted a proposal for combining VoiceXML, which allows navigation of Web pages through the use of voice commands, with XHTML, a mark-up language used to create Web pages. This proposal, officially named <a href="http://en.wikipedia.org/wiki/XHTML%2BVoice" target="_blank">XHTML + Voice</a>, is also known as X+V. Several prototype multimodal applications have been developed using X+V and XHTML modules.

<strong>Aural Style Sheets</strong>
The CSS 2.0 specification make provisions for people with visual impairments through <a href="http://www.w3.org/TR/CSS2/aural.html" target="_blank">Aural Style Sheets</a>. Using a style sheet, an aural CSS-capable browser reads the text of a Web page over the computer's speakers. Aural style sheets allow a designer to set the volume and voice stress of various HTML elements, as well as the length of pauses and the rate of speech.

Note - the <a href="http://www.w3.org/Voice/" target="_blank">definitive source</a> on all of the above standards is the W3C.

<strong>Voice over Internet Protocol (VoIP</strong>)
VoIP refers to a set of standards that can be used to transmit telephone calls over the Internet and other packet-switched networks:
<ul>
	<li><a href="http://en.wikipedia.org/wiki/Session_Initiation_Protocol" target="_blank">SIP</a>: Session Initiation Protocol</li>
	<li><a href="http://en.wikipedia.org/wiki/Real-time_Transport_Protocol" target="_blank">RTP</a>: Real-time Transport Protocol</li>
	<li><a href="http://en.wikipedia.org/wiki/Inter-Asterisk_eXchange" target="_blank">IAX</a>: Inter-Asterisk eXchange protocol</li>
	<li><a href="http://en.wikipedia.org/wiki/Skype_Protocol" target="_blank">Skype</a> Protocol</li>
	<li><a href="http://en.wikipedia.org/wiki/H.323" target="_blank">H.323</a></li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2243</wp:post_id>
  <wp:post_date>2005-06-14 10:18:31</wp:post_date>
  <wp:post_date_gmt>2005-06-14 14:18:31</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>technologies</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>2</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[4]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>VoiceXML</title>
  <link>http://voiceingov.org/technologies/voicexml/</link>
  <pubDate>Tue, 14 Jun 2005 14:23:42 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=5</guid>
  <description/>
  <content:encoded><![CDATA[<strong>What is VoiceXML?</strong>

<p>In simplest terms, VoiceXML is a web technology that turns any telephone, even a rotary phone, into an Internet device.</p>
<p>VoiceXML is a non-proprietary, web-based markup language for creating vocal dialogues between humans and computers.  VoiceXML is similar to another common markup language -- <acronym title="HyperText Markup Language">HTML</acronym>, the basic language of visual web pages.</p>

<p>Just as a web browser renders HTML documents visually, a VoiceXML interpreter renders VoiceXML documents audibly. In this respect, one can think of the VoiceXML interpreter as a telephone-based, voice browser. As with HTML documents, VoiceXML documents have web <acronym title="Uniform Resource Identifiers">URIs</acronym> and can be located on any web server. However, instead of pointing a client-side web browser at a specific URI, citizens can access a VoiceXML application by calling a toll free telephone number from any ordinary telephone - cellular or traditional, touch-tone or rotary.</p>

<strong>Getting started with VoiceXML</strong>


<p>A number of online tutorials and references exist to assist beginners and experts alike. Below is a listing of some of the best.</p>
<ul> <li><a href="http://www.voicexmlreview.org/Jan2001/features/Jan2001_what_is_voicexml.html">What is VoiceXML?</a></li>
<li><a href="http://www.w3.org/Voice/Guide/">Getting started with VoiceXML 2.0</a></li>
<li><a href="http://www.voicexml.org/tutorials/index.html">VoiceXML Tutorial</a></li>
<li><a href="http://www.wirelessdevnet.com/channels/voice/training/voicexmloverview.html">An Introduction To VoiceXML</a></li>
<li><a href="http://www.developer.com/voice/article.php/1564651">TellMe More</a></li>
<li><a href="http://studio.tellme.com/vxml2/ovw/#tutor">VoiceXML 2.0 tutorials (TellMe Studio)</a></li>
<li><a href="http://docs.voxeo.com/voicexml/2.0/frame.jsp?page=tutorialhome.htm">VoiceXML Tutorials (Voxeo Community)</a> </li>
</ul>

<strong>The Future of VoiceXML and the Voice Web:</strong>

<p>The World Wide Web Consortium (W3C) has issued VoiceXML 2.0 as
a <a href="http://www.w3.org/2004/03/voicexml2-pressrelease">W3C Recommendation</a>. VoiceXML is part of a collection of interrelated languages being developed by the W3C's Voice Browser Working Group. These languages, referred to collectively as the "<a href="http://www.w3.org/TR/2000/WD-voice-intro-20001204/">Speech Interface Framework</a>" will be used for developing speech applications on the Internet and represent the future of the Voice Web.</p>


<strong>Links</strong>

<ul>
<li class="leftnav"><a href="http://www.w3.org/Voice/">World Wide Web Consortium</a></li>
<li class="leftnav"><a href="http://www.developer.com/voice/">Developer.com</a></li>
<li class="leftnav"><a href="http://www.voicexml.org/">VoiceXML Forum</a></li>
<li class="leftnav"><a href="http://www.voicexmlreview.org/">VoiceXML Review</a></li>
<li class="leftnav"><a href="http://www.developer.com/voice/article.php/1573371">Is VoiceXML Right Your Voice App?</a></li>
<li class="leftnav"><a href="http://www.speechtechmag.com/issues/9_2/cover/10192-1.html">VoiceXML ASPs</a></li>
<li class="leftnav"><a href="http://www.builderau.com.au/program/0,39024614,39186462,00.htm">VoiceXML + BeVocal + PHP</a></li>
</ul>

<strong>Tools</strong>
<ul>
<li class="leftnav"><a href="http://cafe.bevocal.com/" title="The BeVocal Caf&eacute; is a world-class, Web-based development environment that provides all the tools and resources developers need to create their own innovative speech applications for the telephone. Sign-up for free!">BeVocal Cafe</a></li>
<li class="leftnav"><a href="http://studio.tellme.com/" title="Tellme Studio is a powerful suite of Web-based VoiceXML development tools and community resources that enable you to build, test, and publish your own Internet-powered, voice-enabled applications on the Tellme Network.">Tellme Studio</a></li>
<li class="leftnav"><a href="http://community.voxeo.com/index.html" title="Voxeo Community provides all of the resources and support necessary for creating, testing and deploying phone applications on Voxeo.Net, our nationwide, managed Phone+Web Network.">Voxeo Community</a></li>
<li class="leftnav"><a href="http://developer.voicegenie.com/" title="The VoiceGenie Developer Workshop is a group of tools, documentation, and other resources that allows you to design, develop and test your own voice-enabled, interactive phone application for free.">VoiceGenie</a></li>
<li class="leftnav"><a href="http://freespeech.heyanita.com/" title="Here you will find everything you need to design, develop, test and deploy your own interactive, voice-enabled VoiceXML applications.">HeyAnita</a></li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2244</wp:post_id>
  <wp:post_date>2005-06-14 10:23:42</wp:post_date>
  <wp:post_date_gmt>2005-06-14 14:23:42</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voicexml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2243</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[5]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[5]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Aural Style Sheets (ACSS)</title>
  <link>http://voiceingov.org/technologies/aural-cascading-style-sheets-acss/</link>
  <pubDate>Tue, 14 Jun 2005 14:32:44 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=6</guid>
  <description/>
  <content:encoded><![CDATA[<strong>What is ACSS?</strong>
<p>Part of the Cascading Style Sheet level 2 (CSS-2) specification, Aural Cascading Style Sheets (ACSS) provide control over the sound, or aural presentation of HTML elements.  Just as other elements of CSS provide instructions for a web browser in visually rendering a page, ACSS elements provide instructions on how the elements of a page should sound.
</p>
<p>Although browser support for the CSS-2 specification is improving, there are currently no browsers that support CSS-2 Aural Style Sheets elements.  However, the new version of the <a href="http://www.opera.com/products/verticals/multimodal/">Opera Browser</a> will support CSS-3 aural style elements.</p>

<strong>The Future of Aural Style Sheets</strong>

<p>The Voice Browser working group of the W3C is collaborating with the CSS working group to develop <a href="http://www.w3.org/TR/2003/WD-css3-speech-20030514/"> a CSS-3 module for speech synthesis</a> based upon  <a href="http://www.w3.org/TR/speech-synthesis/" title="SSML is a markup language for specifying the rendering of synthesized speech to a user">Speech Synthesis Markup Language</a> for use in rendering XML documents to speech.  This is intended to replace the Aural Cascading Style Sheet properties in CSS-2.</p>
<p>In addition, Version 1.2 of the XHTML+Voice Profile <a href="http://www.voicexmlforum.com/specs/multimodal/x+v/12/#xv-prompt-src">supports the use of ACSS</a> in applications that are built using <a href="x_plus_v.htm">XHTML+Voice</a>.  Read a tutorial on using ACSS and X+V styles in XHTML documents on the <a href="http://my.opera.com/community/dev/voice/xv-style/">Opera Developer web site</a>.</p>

<strong>Making Web Pages Talk</strong>

<p>
Even though there are currently no browsers that support the aural components of CSS-2, it is still possible to make your web pages "talk."
</p>
<p>
Ensuring that web content complies with <a href="http://www.w3.org/WAI/">published accessibility
standards</a> will make it compatible with tools used by the visually impaired. Proper use of Cascading Style Sheets (even without ACSS elements) is an integral part of ensuring that web content can be accessed by browsers with <a href="http://trace.wisc.edu/world/web/#bbvo">built-in voice or other accessibility features</a>.
</p>


<strong>ACSS Links</strong>
<ul>
<li class="leftnav"><a href="http://www.w3.org/TR/1998/REC-CSS2-19980512/aural.html">Aural style sheets</a></li>
<li class="leftnav"><a href="http://my.opera.com/community/dev/voice/xv-style/">XHTML+Voice in Style</a></li>
<li class="leftnav"><a href="http://www.htmlcenter.com/tutorials/tutorials.cfm?id=53">ACSS Tutorial</a></li>
<li class="leftnav"><a href="http://richinstyle.com/guides/aural2.html">Getting Started with ACSS</a></li>
<li class="leftnav"><a href="http://www.htmlgoodies.com/beyond/acss.html">The Promise of ACSS</a></li>
</ul>

<strong>Other Links</strong>
<ul>
<li class="leftnav"><a href="http://www.w3.org/TR/CSS-access">Accessibility &amp; CSS</a></li>
<li class="leftnav"><a href="http://www.trace.wisc.edu/world/web/index.html">Designing Usable Sites</a></li>
<li class="leftnav"><a href="http://www.webaim.org/">Web Accessibility Info.</a></li>
<li class="leftnav"><a href="http://usability.gov/">Usability.gov</a></li>
<li class="leftnav"><a href="http://www.w3.org/QA/2002/04/Web-Quality">How to achieve web standards</a></li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2245</wp:post_id>
  <wp:post_date>2005-06-14 10:32:44</wp:post_date>
  <wp:post_date_gmt>2005-06-14 14:32:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>aural-cascading-style-sheets-acss</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2243</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[6]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Candidate Recommendation Status for VXML 2.1</title>
  <link>http://voiceingov.org/2005/06/15/candidate-recommendation-status-for-voicexml-21/</link>
  <pubDate>Wed, 15 Jun 2005 20:59:08 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=7</guid>
  <description/>
  <content:encoded><![CDATA[VoiceXML 2.1 received "Candidate Recommendation" status from the W3C on  <a href="http://www.w3.org/TR/2005/CR-voicexml21-20050613/">June 13th</a>, taking it <a href="http://www.w3.org/2004/02/Process-20040205/tr.html#maturity-levels">one step closer</a> to the level of a formal standard.

There are a number of extremely cool features in the new specification that will make building dynamic voice applications with VoiceXML simpler and more efficient.  A good overview of these new features can be found in the "First Words" column authored by Rob Marchand for the <a href="http://www.voicexmlreview.org/Sep2004/columns/sep2004_first_words.html">VoiceXML Review</a>.

Despite the relatively early stage in the process, most of the larger VoiceXML platform vendors now support most (if not all) the new functionality spelled out in the 2.1 specification.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2246</wp:post_id>
  <wp:post_date>2005-06-15 16:59:08</wp:post_date>
  <wp:post_date_gmt>2005-06-15 20:59:08</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>candidate-recommendation-status-for-voicexml-21</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>mheadd@diamondtechnologies.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>66.237.221.18</wp:comment_author_IP>
    <wp:comment_date>2005-06-21 08:54:34</wp:comment_date>
    <wp:comment_date_gmt>2005-06-21 12:54:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[To view some of the VoiceXML 2.1 elements that are supported by some of the major players, have a look at what BeVocal and TellMe are supporting:

BeVocal: http://cafe.bevocal.com/support/release_notes/index.html
TellMe: http://studio.tellme.com/vxml2/ovw/innovate.html

Both platforms have incorporated things like the &lt;data&gt;  element, and the &lt;foreach&gt; construct for iterating through arrays for a while now, but both have now been standardized to match the developing 2.1 spec (a good thing for those porting applications between these platforms!).

One really nice feature being supported by BeVocal is the ability to capture audio while performing a recognition against a grammar (http://cafe.bevocal.com/docs/vxml/index.html?content=properties.html#312531).  This is a new feature in the VoiceXML 2.1 spec that I believe is currently only supported on this platform.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-06-21 12:54:34</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>RSS To VXML Pt. I</title>
  <link>http://voiceingov.org/tutorials/rss-to-voicexml/</link>
  <pubDate>Thu, 16 Jun 2005 00:49:29 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=8</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Introduction</strong>
<p>RSS is an XML format that supports the syndication of news stories and similar content. There are several different formats for XML syndication that are referred to as RSS. Depending on the version, RSS can mean &ldquo;Really Simple Syndication,&rdquo; or &ldquo;RDF Site Summary.&rdquo; These different versions are the result of a bifurcated development process. A good overview of the history of RSS and a description of the different formats in use can be found on <a href="http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html">XML.com</a>.</p>

<p>RSS has several characteristics that make it ideal for phone-based access. First, the various RSS formats are widely used &ndash; as an example, a listing of over 10,000 publicly available RSS feeds can be found at <a href="http://www.syndic8.com/" target="_blank">Syndic8.com</a>.  Second, the nature of RSS feeds is ideal for voice delivery &ndash; RSS feeds contain abbreviated information about a news item or event. Since it would be highly impractical to deliver the entire content of a news story or a detailed description of an event via VoiceXML, the abbreviated format of RSS fits the bill nicely. Using RSS to create &ldquo;voice-enabled&rdquo; news feeds is an easy way of creating a dynamic VoiceXML application.</p>

<p>(Note &ndash; this tutorial will utilize the <a href="http://blogs.law.harvard.edu/tech/rss">RSS 2.0 format</a>. A good article on how to deal with multiple RSS formats can be found on the <a href="http://www-106.ibm.com/developerworks/xml/library/x-headrss.html?Open&#038;ca=daw-xml-news%23IDA2GCGB">IBM developerWorks Site</a>.)</p>

<strong>Turning RSS into VoiceXML</strong>
<p>Since RSS is an XML format, turning it into VoiceXML (another XML format) is a piece of cake with eXstensible Style Sheet Language Transformations (XSLT). In a nutshell, <a href="http://www.w3.org/TR/xslt">XSLT</a> is a transformation vocabulary that specifies how to create new structured information from existing documents that are in XML format. In other words, XSLT is a language for changing XML documents (like RSS feeds) into other XML documents (like VoiceXML).</p>

<p>Converting RSS to HTML is relatively easy, and examples of how to do this through XSLT are numerous. This tutorial will show you how to turn an RSS 2.0 feed (say the feed provided by <a href="http://rss.com.com/2547-1_3-0-5.xml">CNET.com news</a>) into VoiceXML. It will also show you how to modify your XSLT file to improve the quality of the text-to-speech (TTS) generation that will allow callers to hear these news stories.</p>

<strong>Getting Started -- Building the Style Sheet</strong>

<p>For some basic information on XSLT, readers are encouraged to review the XSLT tutorial on the <a href="http://www.w3schools.com/xsl/default.asp">W3Schools site</a> With that out of the way, we're ready to develop our RSS-to-VXML style sheet. Like most style sheets, it begins with the following:

<pre>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?&gt;<br />
&lt;xsl:stylesheet version=&ldquo;1.0&rdquo;
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;<br />
&lt;xsl:output method="xml" omit-xml-declaration="no"/&gt;<br />
&lt;xsl:template match="/"&gt;<br />
</pre>

XSLT uses "templates" to transform parts of a source document into a result document. The template rules outlined with XSLT specify how the different parts of the source document are to be selected and transformed into new parts in a result document. For our purposes, we want to take the relevant sections of the RSS feed and present them to users in VoiceXML. As such, the next part of our XSLT file will look like the following:

</p><p>XSLT uses &ldquo;templates&rdquo; to transform parts of a source document into a result document. The template rules
outlined with XSLT specify how the different parts of the source document are to be selected and transformed into new parts in a
result document. For our purposes, we want to take the relevant sections of the RSS feed and present them to users in VoiceXML.  As such, the next part of our XSLT file will look like the
following:</p>

<pre>&lt;vxml version=&ldquo;2.0&rdquo;
xmlns=&ldquo;http://www.w3.org/2001/vxml&rdquo;&gt;<br />
&lt;form id="news"&gt;<br />

&lt;block&gt;<br />
&lt;prompt&gt;<br />
&lt;voice gender="female"&gt;<br />
Here are the latest headlines from See Net News Dot Com.<br />
&lt;/voice&gt;<br />
&lt;/prompt&gt;<br />
&lt;/block&gt;<br />
&lt;xsl:for-each select="rss/channel/item"&gt;<br />
<br />

     &lt;block&gt;<br />
     &lt;prompt&gt;<br />
     &lt;voice gender="male"&gt;<br />
     &lt;xsl:value-of select="title" /&gt;<br />
     &lt;break size="small" /&gt;<br />
     &lt;xsl:value-of select="description" /&gt;<br />

     &lt;break size="medium" /&gt;<br />
     &lt;/voice&gt;<br />
     &lt;/prompt&gt;<br />
     &lt;/block&gt;<br />
<br />
&lt;/xsl:for-each&gt;<br />
</pre>
<p>This section of the style sheet essentially does two things.  First, very simply, it tells the caller that this is a headline service providing stories from CNET News.com. I've opted to use the &lt;voice&gt; element to specify a specific characteristic of the TTS output.  In this case, I've  indicated that I want the output rendered using a female voice. I've done this by using the "gender" attribute, and setting it equal to "female." This isn't required, but I think it improves the overall listening experience for the caller.  (I've opted to change to a "male" voice to read the actual headlines.) Notice also that the title of the service is spelled out phonetically to assist the TTS engine in pronouncing the words properly &ndash; we will discuss this in more detail later in this tutorial.</p>

<p>The second thing this code section does is loop through the source RSS document (using the XSLT <a href="http://www.w3schools.com/xsl/xsl_for_each.asp" title="Find out more about this XSLT element">&lt;xsl:for-each&gt;</a> element) and presents the caller with the contents of each RSS news item. We do this by using the VoiceXML <a href="http://www.w3.org/TR/voicexml20/#dml4.1" title="Find out more about this VXML element">&lt;prompt&gt;</a> element as a generic container for the text contained in the appropriate parts of the source document -- namely, the title and description of each news item.  We also use the &lt;break&gt; element to help the caller understand when a new item begins and ends.</p>

<p>Since some of these stories may pique the interest of our callers, we may want to provide the option of listening to them again. Before doing this, you may want to determine the number of stories that are typically included in the RSS feed you will be using. In RSS 0.91, various elements are restricted to 500 or 100 characters. There can be no more than 15 &lt;items&gt; in an RSS 0.91 &lt;channel&gt;. In addition, some RSS feeds that utilize a later version of RSS (e.g., 0.92, 2.0) may adhere to these limits to ensure backward compatibility. The CNET News.com feed that I use in this example typically only has 5 to 6 stories at a time.</p>

<p>To provide the option of listening to stories again I utilize one of the <a href="http://www.w3c.org/TR/voicexml20/#dmlABuiltins">built in grammars</a> provided for in the VoiceXML 2.0 specification. A boolean grammar recognizes a positive or negative response by the caller and can be structured like the following.</p>

<pre>&lt;field name=&ldquo;repeat&rdquo; type=&ldquo;boolean&rdquo;&gt;
&lt;prompt&gt;Do you want to hear these headlines again?&lt;/prompt&gt;<br />
&lt;filled&gt;<br />
&lt;if cond="repeat"&gt;<br />
&lt;goto next="#news"/&gt;<br />

&lt;else/&gt;<br />
&lt;prompt&gt;Goodbye.&lt;/prompt&gt;<br />
&lt;/if&gt;<br />
&lt;/filled&gt;<br />
&lt;/field&gt;<br />
</pre>
<p><a href="../xfiles/tutorials/cnet_news_vxml.xsl">Put it all together</a>, and you now have an XSLT document that will transform an IT news feed into a VoiceXML document that can be accessed from any ordinary telephone, or cell phone. </p>

<strong>Transforming the RSS Feed</strong>

<p>An excellent tutorial on using PHP to carry out XSLT Transformations can be found on the <a href="http://www.zend.com/zend/tut/tut-hudson.php">Zend site</a>. Similar tutorials for both <a href="http://www.linuxfocus.org/English/July2000/article156.shtml">Perl</a> and <a href="http://www.fawcette.com/javapro/2001_12/magazine/features/cson/">Java Server Pages</a> are also available. Pick your poison &ndash; then upload your XSLT file and any code needed to carry out the transformation to a web location. If your using an ASP to host your VoiceXML applications (there is typically a developer area where you can upload and test stuff), point it at the location of your files and you'll be in business.</p>
<br /><br />
<!-- Creative Commons License -->
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a>
This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike 2.5 License</a>.</p>
<!-- /Creative Commons License -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2247</wp:post_id>
  <wp:post_date>2005-06-15 20:49:29</wp:post_date>
  <wp:post_date_gmt>2005-06-16 00:49:29</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>rss-to-voicexml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>2248</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[8]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[8]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tutorials</title>
  <link>http://voiceingov.org/tutorials/</link>
  <pubDate>Thu, 16 Jun 2005 00:55:29 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?page_id=9</guid>
  <description/>
  <content:encoded><![CDATA[Note: Most of these tutorial posts are now quite old, though much of the information in them I still find useful (and even exciting!).  I hope you find them helpful.

<strong>Accessing Web Services From CCXML</strong>
Learn how to <a href="http://www.voiceingov.org/blog/?p=136">access web services</a> from CCXML using PHP.

<strong>Accessing Web Services From VoiceXML</strong>
Learn how to <a href="http://www.voiceingov.org/blog/?p=139">access web services</a> from VoiceXML using PHP.

<strong>Demystifying VoiceXML Subdialogs</strong>
Subdialogs are a powerful, but often misunderstood, part of the VoiceXML specification that can be<a href="http://www.voiceingov.org/blog/?p=148"> used to create reusable components</a> for telephone applications.

<strong>Creating X+V with PHP</strong>
The real promise of XHTML+Voice is the potential to add voice functionality to existing visual XHTML markup.  This would have enormous benefits for all kinds of users, most notably those with visual disabilities.  The world is full of good, clean, well structured XHTML just waiting to be paired up with VoiceXML.  <a href="http://www.voiceingov.org/blog/?page_id=53">Learn how</a> using nothing more than some simple PHP classes.

<strong>Building Multi-Mobile Applications with PHP</strong>
Learn how to create <a href="http://www.voiceingov.org/blog/?page_id=41">powerful VoiceXML applications</a> that can be viewed in almost any mobile device or desktop browser.  With one clean, simple PHP code base you can give your users an array of choices to access your applications -- telephone, WAP browser, PDA or desktop browser.

<strong>Adventures in Client Side Scripting</strong>
Learn how to use <a href="http://www.voiceingov.org/blog/?page_id=21">multidimensional JavaScript arrays and client-side caching</a> to streamline and improve the performance of VoiceXML applications. (Database, we don't need no stinking database!)

<strong>Mitigating SQL Injection Vulnerabilities in VoiceXML Applications</strong>
Most seasoned web developers understand the risk of SQL injection and follow best practices to guard against it.  Unfortunately, some VoiceXML and IVR developers do not fully appreciate <a href="http://www.voiceingov.org/blog/?p=127">the risk that SQL injection can pose</a> for voice applications.

<strong>What's MIME is Not Yours</strong>
Learn how to <a href="http://www.voiceingov.org/blog/?p=128">properly set MIME types</a> in VoiceXML applications.

<strong> Confidence-Based Recognition in VoiceXML</strong>
Applications that have unique or sophisticated grammars, or where high confidence levels during recognition is absolutely essential (i.e., phone-based voting) require specialized recognition techniques.  Learn how to <a href="http://www.voiceingov.org/blog/?page_id=33">manipulate confidence levels in VoiceXML applications</a> to improve the accuracy of recognition.

<strong>Detecting Caller Frustration</strong>
There are not a lot of really good tools for IVR developers to detect when callers are getting frustrated. Anger is a human emotion, and human emotions are complex. The tools <a href="http://www.voiceingov.org/blog/?p=93">generally used within VoiceXML</a> applications for dealing with frustrated callers tend to be a bit ham-fisted.

<strong>Interpreting Spoken Input</strong>
Using the <a href="http://www.voiceingov.org/blog/?p=92">boolean builtin grammar</a> to match input to a value.

<strong>Changing VoiceXML Property Values</strong>
Learn how to <a href="http://www.voiceingov.org/blog/?p=90">dynamically change property</a> values used in VoiceXML applications.

<!-- Creative Commons License -->
<p>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a>
The tutorials and related information on this site is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/">Creative Commons Attribution-NonCommercial-ShareAlike 2.5 License</a>.</p>
<!-- /Creative Commons License -->

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2248</wp:post_id>
  <wp:post_date>2005-06-15 20:55:29</wp:post_date>
  <wp:post_date_gmt>2005-06-16 00:55:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tutorials</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[9]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[9]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>On Premises Hosting vs. Outsourcing</title>
  <link>http://voiceingov.org/2005/06/16/on-premisis-v-outsourcing/</link>
  <pubDate>Thu, 16 Jun 2005 17:01:16 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=10</guid>
  <description/>
  <content:encoded><![CDATA[An interesting article appears in the recent issue of <a href="http://www.speechtechmag.com/">Speech Technology Magazine</a> outlining the pros and cons of <a href="http://www.speechtechmag.com/issues/industry/12008-1.html">on premises versus outsourced hosting</a> of voice applications.  The article makes a compelling case for outsourcing voice application hosting, and to allow application developers to focus on what they know best "“ developing applications.

It goes without saying that any developer with enough experience is going to understand more than just the core languages and technologies used to build applications.  Good developers understand how infrastructure (e.g., networks) and platforms (application servers, database servers, operating systems, etc.) will impact the behavior and performance of an application.

However, unlike traditional customer facing applications, voice applications have an additional component that can be challenging, even to experienced developers.  Voice applications require a bridge to the publicly switched telephone network (<a href="http://www.webopedia.com/TERM/P/PSTN.html">PSTN</a>) so that users can access these applications from traditional telephones.  Creating the interface to the PSTN from a voice application environment, and managing the required telephony infrastructure can be challenging.

Governments that do not have overriding security concerns should consider leveraging the expertise of voice application hosting providers to deploy applications.  Some, like <a href="http://www.voxeo.com/">Voxeo</a>, will host applications severs as well as voice platforms (VoiceXML interpreter, TTS engine, ASR, etc.)  Others, like <a href="http://www.bevocal.com/">BeVocal</a>, will host the voice platform and leave application server hosting to the client.  Both are excellent "“ and Voxeo's platform has been <a href="http://www.voicexml.org/certification/platform.html">certified by the VoiceXML forum</a>.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2249</wp:post_id>
  <wp:post_date>2005-06-16 13:01:16</wp:post_date>
  <wp:post_date_gmt>2005-06-16 17:01:16</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>on-premisis-v-outsourcing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>City of Philadelphia</title>
  <link>http://voiceingov.org/2011/02/26/witnessing-the-cfa-effect-in-philadelphia/phillyseal/#main</link>
  <pubDate>Sat, 26 Feb 2011 18:49:52 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2011/02/phillyseal.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2264</wp:post_id>
  <wp:post_date>2011-02-26 14:49:52</wp:post_date>
  <wp:post_date_gmt>2011-02-26 18:49:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>phillyseal</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2262</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2011/02/phillyseal.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2264]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Locate places in Baltimore via SMS</title>
  <link>http://voiceingov.org/bl-sms/</link>
  <pubDate>Fri, 18 Mar 2011 14:09:09 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2011/03/bl-sms.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2290</wp:post_id>
  <wp:post_date>2011-03-18 10:09:09</wp:post_date>
  <wp:post_date_gmt>2011-03-18 14:09:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>bl-sms</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2011/03/bl-sms.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2290]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Operation Data Liberation</title>
  <link>http://voiceingov.org/?p=2334</link>
  <pubDate>Mon, 23 May 2011 14:14:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=2334</guid>
  <description/>
  <content:encoded><![CDATA[I'm working on a neat new OpenGov project that has grown out of a <a href="http://phillydatacamp.com/projects/phillyapi/">few things I've worked on the past</a>.

I'm hoping to launch a new SMS-based service this week that will let anyone quickly and easily find important locations in their neighborhood using an ordinary cell phone (i.e., a non-smart phone).

I'll launch the <a href="http://phinditfor.me/">new service</a> in Philadelphia, but I plan to open source the code for it so that anyone that wants to launch a similar service in another location will have a code base to start from.

As a data source for the new service, I'm planning on using data sets that are available in <a href="http://phlapi.com/">PHLAPI</a>. The only drawback to this approach, currently, is that there aren't a whole heck of a lot of point data sets available in PHLAPI.

That's not necessarily a deal breaker, as there are plenty of data sets out there just waiting to be liberated and added to the PHLAPI instance.  So, as a way of getting the process rolling, I decided to start hacking away at liberating some open data.

One of the more interesting data sets I came across in looking for candidates (pun intended) was a listing of polling locations in the City of Philadelphia.  I found a PDF document containing a detailed list of locations (prepared one presumes for the primary election in Philly last week) on the site of the <a href="http://www.seventy.org/COS_HM_Home.aspx">Committee of Seventy</a>.

The PDF document I started with can be <a href="http://www.seventy.org/Resources_Polling_Places.aspx">found here</a>.  There is also a <a href="http://guide.seventy.org/">web-based app</a> available on the Committee of Seventy site for finding polling locations, but I wanted the data in as raw a format possible (ideally, CSV).

It turned out to be surprisingly easy to do this.  Here's how I did it.

<strong>Converting PDF to Text</strong>

Since I run a variety of *NIX machines in my home office, it was pretty easy to use <a href="http://en.wikipedia.org/wiki/Pdftotext">pfdtotext</a> to convert the Committee of Seventy PDF document into a text document.  Using the <code>-layout</code> option with <code>pdftotext</code> allowed me to maintain the nice table layout of the original document, and helped with further processing.

<strong>From Plain Text to CSV</strong>

Once I had the document in text format, it was time to fire up <a href="http://code.google.com/p/google-refine/">Google Refine</a>.  This is an indispensable tool in the arsenal of any OpenGov hacker, and it is enormously powerful for cleaning up and enhancing messy data.

Google refine comes with a <a href="http://code.google.com/p/google-refine/wiki/DocumentationForUsers">built in scripting language</a> called Google Refine Expression Language (GREL) - very much like JavaScript in it's syntax - that lets you manipulate and refine the data in a project.

I won't go over all of the steps I used to convert the plain text file I started with to CSV, but if you spend any time playing around with Google Refine you'll see how easy it is to enhance a data set.

<strong>Adding Locational Information</strong>

Next it was time to geocode the address of each polling location - something that is not included in the original Committee of Seventy document.  One of the really awesome features of Google Refine is that it allows you to add a new column to a data set that is created by <a href="http://code.google.com/p/google-refine/wiki/FetchingURLsFromWebServices">making a call to a web service</a>.

This functionality makes it pretty straightforward to use <a href="http://code.google.com/apis/maps/documentation/geocoding/">Google's Geocoding API</a> to get the latitude and longitude for each address in the original file.  There are some really good screencasts and demos of this technique on the web, and if you look for them you'll find some good stuff.

<strong>Exporting to CSV</strong>

One of the last steps in the process, once the data was cleaned up and enhanced, was to simply export it to CSV.

I've <a href="https://gist.github.com/986863#file_philly_polling_places.csv">loaded a copy of the CSV file I created</a> to GitHub.  This format is nice because just about any software program or development tool can consume it (you could, for example, simply open this file in Excel).

But what I really hoped to do was to be able to make this data easy to import into a CouchDB instance, like PHLAPI.  Not only would this support my new OpenGov project, it would let anyone that wanted to use the data simply replicate it from a publicly available CouchDB instance.

To do this, I turned to <a href="http://nodejs.org/">Node.js</a>.

<strong>Inserting into CouchDB</strong>

What I needed to do with my CSV file was to parse it and turn each row into a JSON-formated document that I could then insert into CouchDB via HTTP POST.  This a snap to do with Node.js and a few of the handy modules made available by the Node community (most notably, <a href="https://github.com/voodootikigod/node-csv">node-csv</a> and the <a href="https://github.com/cloudhead/cradle">cradle</a> module)

Here is the script I used (also available on GitHub):



A bit of a hack, but it works just fine.  So I now have all of the polling places in the City of Philadelphia in <a href="http://markh.couchone.com/_utils/database.html?phl_polling_places">one of my CouchDB instances</a>.

Want to replicate it and use it for yourself?  Just run this at the command line (assumes you are running CouchDB locally, and have created a DB named <code>phl_polling_places</code>):

<blockquote>
<pre>curl -X POST "http://127.0.0.1:5984/_replicate" 
-H 'Content-type: application/json' 
-d '{"source": "http://markh.couchone.com/phl_polling_places", "target": "phl_polling_places"}'
</pre>
</blockquote>

If this post has inspired you to try and liberate some data yourself, let me know.  I'd love to help with more efforts like this.

I'm also still in the process of checking my converted data, to ensure that everything looks correct. Once this is done, I'll work on getting it inserted in PHLAPI.

Stay tuned for my <a href="http://phinditfor.me/">new service</a>, launching soon...!

UPDATE:

Right after I posted this I learned of an even easier way to export data from Google Refine to CouchDB. <a href="https://twitter.com/#!/maxogden">Max Ogden</a>'s Refine Uploader - <a href="https://github.com/maxogden/refine-uploader">worth checking out</a> if you are using data from Google Refine to a CouchDB instance.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2334</wp:post_id>
  <wp:post_date>2011-05-23 14:14:45</wp:post_date>
  <wp:post_date_gmt>2011-05-23 14:14:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>operation-data-liberation</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="couchdb"><![CDATA[CouchDB]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="post_tag" nicename="nodejs"><![CDATA[Node.js]]></category>
  <category domain="post_tag" nicename="open-data"><![CDATA[Open Data]]></category>
  <category domain="post_tag" nicename="philadelphia"><![CDATA[Philadelphia]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2334]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2334]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[3801781]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Apps for Metro Chicago</title>
  <link>http://voiceingov.org/apps-for-chicago/</link>
  <pubDate>Sun, 24 Jul 2011 16:03:07 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2011/07/apps-for-chicago.jpeg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2361</wp:post_id>
  <wp:post_date>2011-07-24 12:03:07</wp:post_date>
  <wp:post_date_gmt>2011-07-24 16:03:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>apps-for-chicago</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2011/07/apps-for-chicago.jpeg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2361]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>City of Baltimore Logo</title>
  <link>http://voiceingov.org/bmore/</link>
  <pubDate>Fri, 29 Jul 2011 18:53:27 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2011/07/bmore.jpeg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2382</wp:post_id>
  <wp:post_date>2011-07-29 14:53:27</wp:post_date>
  <wp:post_date_gmt>2011-07-29 18:53:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>bmore</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2011/07/bmore.jpeg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2382]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TweetMy311</title>
  <link>http://voiceingov.org/tweetmy311/</link>
  <pubDate>Sat, 30 Jul 2011 17:24:05 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://voiceingov.files.wordpress.com/2011/07/tweetmy311.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[TweetMy311]]></excerpt:encoded>
  <wp:post_id>2398</wp:post_id>
  <wp:post_date>2011-07-30 13:24:05</wp:post_date>
  <wp:post_date_gmt>2011-07-30 17:24:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tweetmy311</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://voiceingov.files.wordpress.com/2011/07/tweetmy311.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2398]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Innovations in Civic Hacking</title>
  <link>http://voiceingov.org/?p=2426</link>
  <pubDate>Fri, 07 Oct 2011 14:01:27 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=2426</guid>
  <description/>
  <content:encoded><![CDATA[There are some exciting things happening in the world of civic hacking, and some cool innovations are being used to make civic hacking events more exciting, and to perpetuate the value of hackathon projects.

<img alt="" src="http://blog.tropo.com/files/2011/06/sos-logo1.jpeg" title="Summer of Smart" class="alignnone" width="360" height="72" style="float:right;padding:15px;margin-left:5px;" />

Last night in San Francisco, a forum of mayoral candidates was <a href="http://www.summerofsmart.org/events/summer-of-smart-final-mayoral-forum/">presented with the top projects from a Summer-long series of hacking events</a> called (appropriately) the "Summer of Smart."

I wasn't able to be at this event, but I did attend an earlier San Francisco mayoral candidate forum that kicked off the Summer of Smart.  By all accounts, the event last night was a great success and there were some <a href="http://www.fastcompany.com/1785170/why-san-francisco-hackers-are-working-with-city-government">awesome projects presented</a> to those who would be Mayor of San Francisco.

I love the idea behing Summer of Smart - holding an intensive, tightly clustered series of events over several months and then "jacking in" to the political process by presenting the outcome directly to mayoral candidates in a public forum.

I'm also really interested to learn more about the new "civic residency program," which will provide resources and space for hackathon participants to continue to develop their projects.  If it works, this could become a model for other parts of the country.

Another innovative civic hacking event is taking place in Reno, NV - the <a href="http://hack4reno.com/">Hack4Reno</a> event gets more interesting as the days go by.

The event's chief organizer - Kristy Fifelsky, of <a href="http://www.govgirl.com/">GovGirl</a> fame - has started a video series providing insights on how to organize and run a civic hackathon.  Insights, tips and tricks from someone who is actually hands on with organizing a civic hackathon could be extremely valuable to other municipalities that want to hold similar events.





One of the most interesting tidbits about the Hack4Reno event from the first installment in this series - the hackathon will take place out in the open, literally.  The current plan is to hold the event outside the <a href="http://www.pioneercenter.com/">Pioneer Center</a> in downtown Reno.  How awesome is that!

There appear to be contingency plans if the weather doesn't cooperate, but I love that the organizers are thinking outside the box.

Another cool detail from the Hack4Reno event is that almost all of the planning for the event is <a href="https://github.com/hack4reno">being done using GitHib</a> to assign and track work.  This is a great way to encourage collaboration and underscores the commitment of those involved to the idea of transparency.  Everything about this event is open.

Really looking forward to seeing more innovations from civic hacking organizers.

Keep em coming!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2426</wp:post_id>
  <wp:post_date>2011-10-07 10:01:27</wp:post_date>
  <wp:post_date_gmt>2011-10-07 14:01:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>innovations-in-civic-hacking</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2426]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2426]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_09e47439fbbf189b7ef465006fbf59c9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7e0287847c8762b1ce54c81ec332a153</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3ff8c554ed1cb0a5fc86080a55e79920</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[3801781]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>119</wp:comment_id>
    <wp:comment_author><![CDATA[Kristy Fifelski]]></wp:comment_author>
    <wp:comment_author_email>kristyfifelski@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://GovGirl.com</wp:comment_author_url>
    <wp:comment_author_IP>99.148.191.175</wp:comment_author_IP>
    <wp:comment_date>2011-10-08 21:03:40</wp:comment_date>
    <wp:comment_date_gmt>2011-10-09 01:03:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Love the article! Good to hear what's going on in San Francisco, early pioneers of civic hackathons. My next video will include some insight on our City Hall meetup and getting the data ready for Hack4Reno. I hope to chat on video with Colin Loretz, Don Morrison and Chris Yoder from Reno Collective - they're really the key organizers of the event and have all the great ideas about keeping the whole thing open. Stay tuned!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-10-09 01:03:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>120</wp:comment_id>
    <wp:comment_author><![CDATA[cyberhobo]]></wp:comment_author>
    <wp:comment_author_email>cyberhobo@cyberhobo.net</wp:comment_author_email>
    <wp:comment_author_url>http://www.cyberhobo.net</wp:comment_author_url>
    <wp:comment_author_IP>75.247.94.142</wp:comment_author_IP>
    <wp:comment_date>2011-10-11 23:19:27</wp:comment_date>
    <wp:comment_date_gmt>2011-10-12 03:19:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I was thinking of doing something with the <a href="http://open311.org/" rel="nofollow">Open311 API</a> for the hack4reno event and found your PHP library. Nice!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-10-12 03:19:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>121</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>72.254.162.29</wp:comment_author_IP>
    <wp:comment_date>2011-10-12 07:55:14</wp:comment_date>
    <wp:comment_date_gmt>2011-10-12 07:55:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There's actually a more recent PHP library for Open311 than the one I wrote - my library supports an earlier version of the Open311 API.

Check out the developer resources available over on the Open311 web site - there are client libraries available in multiple languages.

http://wiki.open311.org/GeoReport_v2/Resources#Client_Libraries_.28API_Wrappers.29

Have fun at Hack4Reno!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-10-12 11:55:14</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>New Year, New Blog</title>
  <link>http://voiceingov.org/?p=2446</link>
  <pubDate>Tue, 27 Dec 2011 17:25:29 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=2446</guid>
  <description/>
  <content:encoded><![CDATA[The final days of 2011 are ticking away, and so too are the final days of this blog.

I've been writing about voice technologies, phone apps and open government under the Vox Populi monicker for a <a href="http://wayback.archive.org/web/*/http://voiceingov.org">long time</a>.

I first registered the voiceingov.org domain in 2002, and built a very basic website to share my excitement and enthusiasm for <a href="http://www.voiceingov.org/blog/?page_id=4">an emerging set of standards</a> for building telephone applications using web technologies.

My interest in this area was spurred by my involvement in helping <a href="http://dti.delaware.gov/pdfs/press.pdf">create the e-government initiative in the State of Delaware</a>, and launching projects like the <a href="http://dti.delaware.gov/services/accessloc.shtml">Delaware Internet Access Locater</a>.

I have always believed in the importance of communications technology in general and telephone applications specifically for engaging citizens and encouraging an open dialog between governments and the people they serve.

This interest was cemented when I left state government to work as a technologist, using the latest and greatest tools for building communication apps of every stripe.

I've continued to write posts on this blog, trying to emphasize the core message that these new technologies can <a href="http://www.voiceingov.org/blog/?p=1766">make it easier and more efficient for citizens to connect with government</a>, even as my interest and work has expanded more broadly into other areas, like open government and civic hacking.

More and more, I've felt like I've been shoehorning posts on these topics into this blog which has an admittedly more narrow focus.

In addition, I've had much less time to devote to writing posts for this blog - I write extensively for my company's blogs as well as for other blog sites covering open government and the civic hacking space.

With all of that said, I'm happy to say that I will soon announce a new direction in my writing and blogging efforts.  This announcement, sadly, means the end of Vox Populi as it is currently constituted.

It's hard to let go of something I've been working on for so long, and that is central to the way that I think technology should work to bring government and citizens together.

But the tension that currently exists between my current work and interests, and the narrow focus of this blog can't continue.

In 2012, I'll <a href="http://civic.io/">launch a new site</a> where I will write more extensively about open government, open data, civic hacking and more of things that will change the way that government works and they way we interact with those that represent us.

It's been a great run with this blog, and I'm still proud of many of things I wrote and all of the things I tried to do with it.

Looking forward to 2012. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2446</wp:post_id>
  <wp:post_date>2011-12-27 17:25:29</wp:post_date>
  <wp:post_date_gmt>2011-12-27 17:25:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>new-year-new-blog</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[3801781]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2446]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2446]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>On the wire</title>
  <link>http://voiceingov.org/2005/07/11/on-the-wire/</link>
  <pubDate>Mon, 11 Jul 2005 20:57:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=39</guid>
  <description/>
  <content:encoded><![CDATA[Google's <a href="http://www.internetnews.com/bus-news/article.php/3518341">decision to invest</a> in a company focusing on delivering broadband Internet access over power lines (often referred to as "BPL" "“ Broadband over Power Line, or "PLC" "“ Power Line Communications) was the first in what appears to be a one-two punch for BPL this week.  It's now being reported that IBM is <a href="http://news.com.com/IBM+partners+to+offer+broadband+from+a+wall+plug/2100-1034_3-5782194.html?tag=nefd.top">also making an investment</a> in BPL via a company called CenterPoint Energy in Houston, TX.

The advent of <a href="http://www.upaplc.org/">widespread BPL access</a> creates an interesting possibility of a new way of providing <acronym title="Voice over Internet Protocol">VoIP</acronym> telephone service.  It also suggests the possibility of new players in the VoIP space (i.e., power companies).  This is interesting for many reasons "“ states and local government have a <a href="http://www.ncsl.org/programs/energy/EleIndReg.htm">revenue and regulatory stake</a> in the power industry, and the field of VoIP providers is getting uncomfortably crowded given that there <a href="http://www.pcworld.com/news/article/0,aid,118193,00.asp">isn't a clear regulatory picture</a> as yet.

This is another good indicator that states and local governments need to constantly evaluate their revenue and regulatory environments in light of new advances in technology.  Governments that don't take these proactive steps <a href="http://governing.com/articles/4voip.htm">risk being left out</a> in the cold as new ways of delivering old services emerge.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>2005-07-11 16:57:36</wp:post_date>
  <wp:post_date_gmt>2005-07-11 20:57:36</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>on-the-wire</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <wp:comment>
    <wp:comment_id>10</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;:| Vox Populus |:&#8230;&raquo;Blog Archive &raquo; Tapping into VoIP?]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=48</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2005-08-09 10:45:51</wp:comment_date>
    <wp:comment_date_gmt>2005-08-09 14:45:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] I've said before that governments need to constantly evaluate their revenue and regulatory environments in light of new advances in technology, and this issue highlights my point. Eighteen months may not seem that long in the world of POTS, but it is a very long time in the world of internet technology (which, after all, is the world VoIP belongs in). [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-08-09 14:45:51</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Driving while dialing</title>
  <link>http://voiceingov.org/2005/07/12/driving-while-dialing/</link>
  <pubDate>Tue, 12 Jul 2005 11:41:31 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=40</guid>
  <description/>
  <content:encoded><![CDATA[The New York Times is <a href="http://tech.nytimes.com/2005/07/12/technology/12auto.html">reporting on an Australian-based study</a> examining the link between cell phone usage and traffic accidents.  It suggests that using a "hands free" phone does not aid in traffic safety, calling into question <a href="http://www.ghsa.org/html/stateinfo/laws/cellphone_laws.html">laws allowing the use of hands free devices</a> in cars while driving.



<blockquote>"There just doesn't seem to be any safety benefit by restricting drivers to hands-free phones," said Rae Tyson, a spokesman for the National Highway Traffic Safety Administration. "It's the cognitive overload that sometimes occurs when you're engaging in a conversation that is the source of the distraction more so than the manipulation of the device."</blockquote>



The actual study appears in the <a href="http://bmj.bmjjournals.com/">British Medical Journal</a> - should be an interesting read.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>40</wp:post_id>
  <wp:post_date>2005-07-12 07:41:31</wp:post_date>
  <wp:post_date_gmt>2005-07-12 11:41:31</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>driving-while-dialing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[40]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[40]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Creating "Multi-Mobile" Applications</title>
  <link>http://voiceingov.org/2005/07/16/creating-multi-mobile-applications/</link>
  <pubDate>Sat, 16 Jul 2005 21:53:30 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=42</guid>
  <description/>
  <content:encoded><![CDATA[I've written a <a href="http://www.voiceingov.org/blog/?page_id=41">brand new tutorial</a> describing how to create "Multi-Mobile" applications with PHP.  This example uses the powerful HAWHAW library for creating mobile applications, something I've been <a href="http://www.voiceingov.org/blog/?p=29">talking about doing</a> for a whie now.

Multi-mobile applications deliver content that is specifically tailored to the device being employed by the end user.  This content is formatted differently based on the requirements of each specific device, and the mode of input is restricted to that supported by the device.  Users accessing a form requiring specific input will see different manifestations of the same interface depending on the device they are using.

What makes these applications special is that a single code base provides the functionality for device independence.   So, whether an end user is making a phone call, using a WAP-enabled browser or an XHTML-enabled PDA the application is built to format an interface appropriately for each device.

If your interested in building Multi-Mobile applications, you need to <a href="http://www.voiceingov.org/blog/?page_id=41">read this</a>!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2005-07-16 17:53:30</wp:post_date>
  <wp:post_date_gmt>2005-07-16 21:53:30</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>creating-multi-mobile-applications</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
</item>
<item>
  <title>Making Web Pages Talk</title>
  <link>http://voiceingov.org/2005/07/18/making-web-pages-talk/</link>
  <pubDate>Mon, 18 Jul 2005 13:23:24 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=43</guid>
  <description/>
  <content:encoded><![CDATA[An interesting article appears in the <a href="http://www.egovmonitor.com/node/1195">eGov Monitor</a> (A UK-based service covering technology and e-government related news) concerning technologies to speech enable web sites.

The article is written by Carin Lennartsson of <a href="http://www.readspeaker.com/">ReadSpeaker</a>, a company that provides a service to voice-enable ordinary web pages.  The article has some interesting statistics on challenges facing certain groups of web users in the UK, and correctly points to the responsibility of governments to find ways to provide web-based services accessible to them.  There is even a link provided so that users can hear the article read back to them using the RedSpeaker TTS technology.  (The quality of the TTS is very good in my opinion, and I really like the English accent!)

Finding ways to speech enable web content for the disabled and other challenged constituencies is a critical component of successful e-government efforts.  Without knowing a whole lot about the technology involved in the ReadSpeaker service, I'd say that most governments would be well served by taking some common sense steps toward this goal:
<ul>
<li><em>Have a plan.</em>  Efforts to speech-enable web content should be part of a comprehensive e-government strategy, and should have the sanction (and encouragement) of the government body responsible for overseeing e-government activities.  As more vendors and solutions enter this space, there is the very real potential that efforts can become fragmented and counterproductive.</li>
<li><em>Keep your eye on the (standards) ball.</em>  The<a href="http://www.voiceingov.org/blog/?page_id=4"> growing body of web standards</a> aimed at supporting government efforts to speech-enable their web content is the key to vendor independence and future interoperability.  Governments should insist that solutions marketed to help their constituencies achieve greater access be based on these standards.</li>
</ul>

As more solutions are developed in this area, it is time for government leaders to stand up and take a leadership role in setting the direction of future innovation.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>43</wp:post_id>
  <wp:post_date>2005-07-18 09:23:24</wp:post_date>
  <wp:post_date_gmt>2005-07-18 13:23:24</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>making-web-pages-talk</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
</item>
<item>
  <title>Striving for a Standard</title>
  <link>http://voiceingov.org/2005/07/21/striving-for-a-standard/</link>
  <pubDate>Thu, 21 Jul 2005 15:16:24 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=44</guid>
  <description/>
  <content:encoded><![CDATA[Frances West, Director of IBM's Worldwide Accessibility Center, has written an interesting piece about the possible <a href="http://news.com.com/Accessibility+could+take+a+step+backward/2010-1071_3-5794513.html?tag=nefd.ac">divergence in standards for the accessibility of web content</a> between the US and European governments.  She makes the excellent observation that:



<blockquote>"Without a harmonized approach to procuring information technology, each government could adopt a different technical standard. If various governments mandate different regional or country technical requirements, industry will be forced to focus on multiple compliance efforts, rather than pushing beyond compliance and investing in new technology and solutions."</blockquote>



I can't help but wonder if some level of divergence doesn't already exist within the US between the federal and state governments.  <a href="http://www.access-board.gov/sec508/508standards.htm">Section 508 of the Rehabilitation Act Amendments of 1998</a> sets IT accessibility standards for federal government entities, but its applicability to state governments is somewhat murky.  Many states have embraced the guidelines established as part of the World Wide Web Consortium's <a href="http://www.w3.org/WAI/">Web Accessibility Initiative</a> (WAI).   While these two sets of standards are similar, they are <a href="http://www.jimthatcher.com/sidebyside.htm">not the same</a>.

The State of New York "“ IBM's home state, which I would argue is a sufficiently large enough procurer of IT goods and services to have an impact on the industry "“ <a href="http://www.oft.state.ny.us/policy/99-3.htm">goes by the WAI standards</a>.

Ms. West's points are well taken and it seems fairly obvious that if Section 508 does, in fact, apply to state governments in the US someone ought to tell them.  If industry is saddled with having to engineer solutions to meet multiple sets of accessibility standards, it could mean time taken away from work on new solutions to make web content and services more accessible. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>44</wp:post_id>
  <wp:post_date>2005-07-21 11:16:24</wp:post_date>
  <wp:post_date_gmt>2005-07-21 15:16:24</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>striving-for-a-standard</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>Regulating VoIP Services</title>
  <link>http://voiceingov.org/2005/07/26/regulating-voip-services/</link>
  <pubDate>Tue, 26 Jul 2005 11:47:21 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=45</guid>
  <description/>
  <content:encoded><![CDATA[An <a href="http://www.firstmonday.org/issues/issue10_7/bach/index.html">excellent article</a> on the issues facing governments in the US and Europe around classification and regulation of VoIP services appears in the most recent issue of <a href="http://www.firstmonday.org/">First Monday</a>.  The authors go into great depth to summarize the steps taken to date in both the US and Europe by regulators, and characterize the regulation of VoIP services as "inevitable."



<blockquote>"There is a fundamental difference between VOIP and previous IP"“powered innovations such as e"“mail or Instant Messaging: these latter technologies burst into a new, unregulated space. There was no market for e"“mail prior to the commercial diffusion of e"“mail, for instance. There were no market rules, no incumbents used to operating under these rules, and no past policy objectives dependent on the execution of the rules. By contrast, VOIP services inevitably run headlong into traditional telephony regulation, characterized by detailed oversight and common"“carrier obligations. Over the course of more than a century, policymakers have devised a dense set of rules and regulations covering emergency services, network integrity, universal access, and the allocation of scarce identifiers such as telephone numbers, to name just a few. As VOIP displaces current telecommunications technologies, it will inevitably be confronted with these regulatory legacies."</blockquote>



Among a number of other interesting points made, the article makes a fascinating observation about the nature of government regulation (or, rather, about government regulators).



<blockquote>"The debate over how to classify VOIP represents the leading edge of the question whether regulatory classification is useful in a world of converging technologies. In other words, precisely because VOIP forces the convergence of previous era telecommunications and the Internet, we ought to pause and ask whether regulation from that previous era still makes sense."</blockquote>



In other words, the knee jerk reaction of government regulators may be to try and classify VoIP using existing regulatory frameworks because that is simply what they do.  Or, more accurately, despite the difficulty inherent in trying to classify VoIP using old school classifications this is much more palatable than opening a debate on whether the role of government oversight and regulation is fundamentally changing in the wake of staggering technical innovation.  In short, if the only tool in your toolbox is a hammer, then everything starts to look like a nail.

An <a href="http://www.firstmonday.org/issues/issue10_7/bach/index.html">intersting read</a> -- well worth the time of anyone interested in VoIP.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>45</wp:post_id>
  <wp:post_date>2005-07-26 07:47:21</wp:post_date>
  <wp:post_date_gmt>2005-07-26 11:47:21</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>regulating-voip-services</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>Simplifying Voice Application Development</title>
  <link>http://voiceingov.org/2005/07/30/simplifying-voice-application-development/</link>
  <pubDate>Sat, 30 Jul 2005 16:33:00 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=46</guid>
  <description/>
  <content:encoded><![CDATA[Last September, IBM made a notable contribution to the voice development community by <a href="http://software.newsforge.com/article.pl?sid=04/09/20/1646226&amp;tid=89">providing the Apache foundation</a> with a set of reusable dialog components for creating voice and multimodal applications.  While some at the time criticized the contribution as "discardware," the folks at Apache recently announced that <a href="http://jakarta.apache.org/site/news/news-2005-q3.html#20050726.1">version 1.0 of the Reusable Dialog Component Taglib</a> is now available for use by developers.

How useful these components are for aiding the rapid development of voice applications remains to be seen - a lot is riding on how developers react to this news.

There are other efforts out there to make developing voice applications generally, and VoiceXML applications specifically, more efficient.  There is a set of PHP libraries <a href="http://vxml.sourceforge.net/">available on SourceForge</a> for creating VoiceXML/CCXML/SRGS applications.  My own meager contribution to this broader effort is a <a href="http://www.voiceingov.org/blog/?page_id=16">small PHP class library</a> that can be used to generate SRGS grammars in XML format.

Hopefully, we are only seeing the beginning of a broader and more sustained effort to simplify voice application development.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>2005-07-30 12:33:00</wp:post_date>
  <wp:post_date_gmt>2005-07-30 16:33:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>simplifying-voice-application-development</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>The Ghost of Thomas Edison</title>
  <link>http://voiceingov.org/2005/08/02/how-not-to-do-phone-voting/</link>
  <pubDate>Wed, 03 Aug 2005 01:19:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=47</guid>
  <description/>
  <content:encoded><![CDATA[The Township of Edison, New Jersey recently provided <a href="http://ems.gmnews.com/news/2005/0727/Front_page/009.html">a poignant example</a> in how not to practice voting by telephone.

It seems an Edison Township Council member was away at a boy scout camp when an ordinance authorizing the lease of almost 30 police cars came before the Council for a vote.  The Council member in question <a href="http://ems.gmnews.com/news/2005/0727/Front_page/009.html">attempted to participate</a> in the vote via speaker phone.   After other Council members expressed frustration over the poor sound quality (and also questioned the legality of participating in a vote of Council by remote means), the action was tabled for a future meeting.

There is some hidden irony in this incident -- audio quality is just one of many factors that can negatively impact perceptions of voice applications, or phone-based services.  Edison, New Jersey takes its name from the famous inventor Thomas Alva Edison, who resided in Menlo Park during the late 1800's.  During his time there, Edison invented the first device to record spoken audio -- the phonograph.  Edison was also instrumental in making <a href="http://www.ieee-virtual-museum.org/collection/tech.php?id=2345870&amp;lid=1">critical improvements to the telephone</a> to improve sound quality.

Seems Edison, New Jersey should aspire to be more like its famous namesake and focus on better sound quality.  I'll volunteer my services should they decide to ever deploy a VoiceXML application. ;-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>47</wp:post_id>
  <wp:post_date>2005-08-02 21:19:45</wp:post_date>
  <wp:post_date_gmt>2005-08-03 01:19:45</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>how-not-to-do-phone-voting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Tapping into VoIP?</title>
  <link>http://voiceingov.org/2005/08/09/tapping-into-voip/</link>
  <pubDate>Tue, 09 Aug 2005 14:45:30 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=48</guid>
  <description/>
  <content:encoded><![CDATA[The Federal Communications Commission (FCC) has now made it official that <acronym title="Voice over Internet Protocol">VoIP</acronym> telephony providers <a href="http://www.internetnews.com/infra/article.php/3525956">must allow wiretapping</a> to identify possible criminal activity.  The FCC gave providers 18 months to comply with the requirements of the Communications Assistance for Law Enforcement Act (CALEA).

This ruling comes as software developers continue to develop tools to <a href="http://vomit.xtdnet.nl/">eavesdrop on VoIP</a> telephone conversations, and to <a href="http://www.techworld.com/security/news/index.cfm?NewsID=4111">protect them</a>.

I've <a href="http://www.voiceingov.org/blog/?p=39">said before</a> that governments need to constantly evaluate their revenue and regulatory environments in light of new advances in technology, and this issue highlights my point.  Eighteen months may not seem that long in the world of <acronym title="Plain old telephone service">POTS</acronym>, but it is a <strong>very</strong> long time in the world of internet technology (which, after all, is the world VoIP belongs in).

It remains to be seen what will happen in the next year and a half to impact this ruling.  Stay tuned!
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2005-08-09 10:45:30</wp:post_date>
  <wp:post_date_gmt>2005-08-09 14:45:30</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tapping-into-voip</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>Sweet X+V Tutorials</title>
  <link>http://voiceingov.org/2005/08/09/sweet-xv-tutorials/</link>
  <pubDate>Tue, 09 Aug 2005 20:06:12 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=49</guid>
  <description/>
  <content:encoded><![CDATA[I found a couple of very nice X+V tutorials on the IBM developerWorks site that walk readers through the development of a voice-based SMS sending application.  All that's required is an editor (my favorite Windows editor is <a href="http://www.chami.com/html-kit/">HTML Kit</a>)** and a copy of the <a href="http://www.opera.com/">Opera Browser</a> (version 8.0).

The <a href="http://www-128.ibm.com/developerworks/wireless/library/wi-message.html">first piece</a> gently introduces readers to the idea of developing an X+V application, and <a href="http://www-128.ibm.com/developerworks/wireless/library/wi-send.html">the second</a> elaborates on the initial example by introducing the concept of a <a href="http://studio.tellme.com/vxml2/mixed/howto/mixed.html">mixed initiative</a> dialog.

Multimodal applications hold enormous potential for improving government service delivery by enabling a broader array of input options for web-based services.  This is a nice introduction to the concept of multimodality, and a good way to get your hands a little dirty with X+V.  Plus the download of Opera 8.0 is free (if you don't mind looking at a few ads as a tradeoff for integrated voice functionality -- I don't).

Good stuff.  Bravo, Mr. Kusnitz!  Bravo!



<blockquote>** The voice extensions for the Opera Browser are currently not supported on Linux, so you'll have to download the Windows version.  You can create the X+V content on another platform, and host it there if you like.  If your looking for a good Linux-based editor, you might try <a href="http://quanta.kdewebdev.org/">this one</a>.</blockquote>

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>49</wp:post_id>
  <wp:post_date>2005-08-09 16:06:12</wp:post_date>
  <wp:post_date_gmt>2005-08-09 20:06:12</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>sweet-xv-tutorials</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
</item>
<item>
  <title>Expectations of VoIP</title>
  <link>http://voiceingov.org/2005/08/19/expectations-of-voip/</link>
  <pubDate>Fri, 19 Aug 2005 17:03:13 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=50</guid>
  <description/>
  <content:encoded><![CDATA[<p>Jon Oltsik has an <a href="http://news.com.com/Expect+a+Net+phone+evolution%2C+not+revolution/2010-1071_3-5837269.html?part=rss&amp;tag=5837269&amp;subj=news">interesting article</a> up on CNET News about the current state of the VoIP "revolution."  He correctly points out some of the limitations that currently exist with VoIP service, which suggest that rumors of the demise of the <acronym title="Publicly Switched Telephone Network">PSTN</acronym> are greatly exaggerated.</p>


<blockquote>"We all complain about 'Ma Bell,' but land-based dial tone almost always works. No one worries about voice quality or power--it just happens. Not so with VoIP. Network convergence has been a sexy topic for 10 years, but the fact is that most corporate networks were designed to simply pass data packets around willy-nilly, not guarantee carrier-quality voice service."</blockquote>

<p>As with most things, its all about keeping the proper perspective.</p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>50</wp:post_id>
  <wp:post_date>2005-08-19 13:03:13</wp:post_date>
  <wp:post_date_gmt>2005-08-19 17:03:13</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>expectations-of-voip</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>What's the N11?</title>
  <link>http://voiceingov.org/2005/08/24/whats-the-n11/</link>
  <pubDate>Wed, 24 Aug 2005 18:01:32 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=51</guid>
  <description/>
  <content:encoded><![CDATA[Seems like more people are familiar with the concept of abbreviated dialing designations because of <a href="http://www.amazon.com/exec/obidos/tg/detail/-/B000002OME/104-1244522-1205504?v=glance">Mary J. Blige</a> than anything the FCC has put out.  Still, the FCC has put together a <a href="http://www.fcc.gov/Bureaus/Common_Carrier/News_Releases/2000/nrc0036a.html">very nice summary</a> explaining Abbreviated Dialing Codes (sometimes referred to as N11) that is worth a read from those working in the public sector.

More and more state governments are starting to implement systems based on N11 designations - the State of Utah has a VoiceXML-based 511 system, as does the <a href="http://www.virginiadot.org/infoservice/news/CO02152002-511.asp">State of Virginia</a> (I believe both are using the TellMe platform).  The <a href="http://www.govtech.net/news/news.php?id=96339">State of Oklahoma</a> is now doing some interesting things with 211.

Rollout of systems based on these designations is still somewhat uneven -- organizations advocating for the adoption of <a href="http://www.deploy511.org/deploystatus.htm">511</a> and <a href="http://www.211.org/status.html">211</a> systems track implementations closely.  Let's hope that as more and more states deploy systems, they will build them using open standards.  Mary's got no love for vendor lock in.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>51</wp:post_id>
  <wp:post_date>2005-08-24 14:01:32</wp:post_date>
  <wp:post_date_gmt>2005-08-24 18:01:32</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>whats-the-n11</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[51]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[51]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>11</wp:comment_id>
    <wp:comment_author><![CDATA[Voice(XML) of the People &raquo; NYC 311 Getting Bigger]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=69</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2005-11-15 20:47:18</wp:comment_date>
    <wp:comment_date_gmt>2005-11-16 00:47:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] A while back, I posted some information on FCC-sanctioned abbreviated dialing designations ("n11"). One of the largest implementations of n11 "“ the City of New York&#8217;s 311 system "“ is about to get even bigger. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-11-16 00:47:18</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12</wp:comment_id>
    <wp:comment_author><![CDATA[Voice(XML) of the People &raquo; More on n11]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=70</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2005-11-22 15:34:02</wp:comment_date>
    <wp:comment_date_gmt>2005-11-22 19:34:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Keeping the n11 theme going, it looks like the State of Florida&#8217;s 511 system is expanding "“ read about in Federal Computer Week. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-11-22 19:34:02</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>IM Talking Now</title>
  <link>http://voiceingov.org/2005/08/24/im-talking-now/</link>
  <pubDate>Wed, 24 Aug 2005 21:01:52 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=52</guid>
  <description/>
  <content:encoded><![CDATA[Impossible to get away from discussions of Goggle's newest release "“ Google Talk.  Reactions seem <a href="http://news.com.com/Google+IM+almost+gets+the+message%2C+users+say/2100-1032_3-5842511.html?tag=nefd.lede">a bit ho hum</a> so far.

Admittedly, I haven't played around with it all that much but there are a few drawbacks that I can see initially.  The Google Talk software is restricted to Windows, so you can't use it to call someone running Linux or OS X on their desktop.  (Users of other <acronym title="Instant Messaging">IM</acronym> clients can, however, <a href="http://www.google.com/talk/otherclients.html">engage in chat messages with users of Google Talk</a> thanks to its use of the Jabber protocol.)

In contrast, <a href="http://www.skype.com/download/">Skype</a> runs on Windows, Linux or OS X.  Skype calls are also encrypted, and the Skype client allows users to chat with others using the Skype client (regardless of the platform they are running it on).  Skype has <a href="http://www.skype.com/products/">a lot more</a> going for it as well "“ through paid services, users can call <acronym title="Publicly Switched Telephone Network">PSTN</acronym> phones, and receive calls from non-VOIP phones as well.  Interestingly, Skype has also announced that it will<a href="http://www.theregister.com/2005/08/24/skype_apifest/"> open up the API</a> for its IM functionality to developers.

It would be interesting to compare the quality of phone calls using both Google Talk and Skype.  Something for the weekend I suppose.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2005-08-24 17:01:52</wp:post_date>
  <wp:post_date_gmt>2005-08-24 21:01:52</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>im-talking-now</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_62470c0473f6c4a208ce9519af7d29b7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_300f27e7775172bc1e95872211455ff2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_32b54dbdf11274387215f49147587cea</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d9935d76d5a5f7c6b745da9266faf64a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2071988ba612c8ea8309ddadc2c07f0a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_35136ea5bc67d0f461ab337beff4b2d3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>mheadd@diamondtechnologies.com</wp:comment_author_email>
    <wp:comment_author_url>http://markheadd.lunarpages.com</wp:comment_author_url>
    <wp:comment_author_IP>66.237.221.18</wp:comment_author_IP>
    <wp:comment_date>2005-08-26 09:46:04</wp:comment_date>
    <wp:comment_date_gmt>2005-08-26 13:46:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Microsoft Responds to Google Talk
http://www.internetnews.com/xSP/article.php/3530226

"The new release boasts a number of improvements as well as new features. Among them is a new feature called Voice Clip which allows MSN Messenger 7.5 users to record up to 15 seconds of sound and have it sent to a "buddy" much like an instant message."

Neat, but not the same as making a VoIP call over an IM client.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-08-26 13:46:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>14</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>mheadd@diamondtechnologies.com</wp:comment_author_email>
    <wp:comment_author_url>http://markheadd.lunarpages.com</wp:comment_author_url>
    <wp:comment_author_IP>66.237.221.18</wp:comment_author_IP>
    <wp:comment_date>2005-08-26 10:48:57</wp:comment_date>
    <wp:comment_date_gmt>2005-08-26 14:48:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There is a very nice review of Google Talk, along with some commentary and comparison to other products (including Skype) from Wired News at:

http://www.wired.com/news/technology/0,1282,68642,00.html]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-08-26 14:48:57</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Cooking up Some X + V</title>
  <link>http://voiceingov.org/2005/08/30/cooking-up-some-x-v/</link>
  <pubDate>Tue, 30 Aug 2005 21:06:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=54</guid>
  <description/>
  <content:encoded><![CDATA[<p>I've got a <a href="http://www.voiceingov.org/blog/?page_id=53">new tutorial</a> up explaining how to turn XHTML into X+V using a nice little PHP class library called <a href="http://minixml.psychogenic.com/">MiniXML</a>.  This approach is still a bit rough, and I'm continuing to refine it but it seems to work fairly well for small to moderately sized XHTML documents.</p>
<p>Ultimately, I think this could become a very powerful and flexible way to turn plain old visual XHTML into multimodal X+V with nothing more than Apache/PHP and some clever coding.  <a href="http://www.voiceingov.org/blog/?page_id=53">Have a look</a> and let me know what you think. </p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>54</wp:post_id>
  <wp:post_date>2005-08-30 17:06:18</wp:post_date>
  <wp:post_date_gmt>2005-08-30 21:06:18</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cooking-up-some-x-v</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Waxing Nostalgic on VoIP</title>
  <link>http://voiceingov.org/2005/08/31/waxing-nostalgic-on-voip/</link>
  <pubDate>Wed, 31 Aug 2005 20:12:42 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=55</guid>
  <description/>
  <content:encoded><![CDATA[<p>There is an old maxim in the fashion business that says that everything comes back into style eventually.  (I'll prove it -- I never thought I'd be wearing wide-bottom jeans again, but here we are.)</p>

<p>This same principle can be applied to technology.  Who would have thought that <a href="http://uk.builder.com/0,39026540,39214317,00.htm">mainframes would make a comeback</a>?  Who would have thought that the richness of more traditional desktop client-server applications (as opposed to the relatively sparser GUI's of web-based applications) would <a href="http://www.adaptivepath.com/publications/essays/archives/000385.php">come back into vogue</a>?</p>

<p>And so it is with voice technologies.  When I read about the latest Voice over IM development (for example, <a href="http://www.eweek.com/article2/0,1759,1817029,00.asp">this one</a>, and <a href="http://www.internetnews.com/infra/article.php/3531216">this one here</a>, and of course <a href="http://news.zdnet.co.uk/communications/0,39020336,39214652,00.htm">this one</a>), I can't help but think about the early days of VoIP.  Remember when the only way to use VoIP was on your PC "“ before <a href="http://www.vonage.com/">Vonage</a> or the other providers brought VoIP to your telephone? I came across this neat article on the <a href="http://www.voipreview.org/news.details.aspx?nid=51">history of VoIP</a> as I was reminiscing that provides a good description of the early days.

</p><p>So it looks like VoIP has advanced to the point where its making a comback on the PC...?  Weird.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>55</wp:post_id>
  <wp:post_date>2005-08-31 16:12:42</wp:post_date>
  <wp:post_date_gmt>2005-08-31 20:12:42</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>waxing-nostalgic-on-voip</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>Texting '2HELP' for Hurricane Relief</title>
  <link>http://voiceingov.org/2005/09/02/texting-2help-for-hurricane-relief/</link>
  <pubDate>Fri, 02 Sep 2005 11:29:12 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=56</guid>
  <description/>
  <content:encoded><![CDATA[<p>Here is <a href="http://www.internetnews.com/wireless/article.php/3531786">a nice way</a> to help out with hurricane releif using your mobile phone.  Verizon Wireless subscribers can now text "2HELP" on their wireless phones to donate to the American Red Cross.
</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>56</wp:post_id>
  <wp:post_date>2005-09-02 07:29:12</wp:post_date>
  <wp:post_date_gmt>2005-09-02 11:29:12</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>texting-2help-for-hurricane-relief</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Click here for help</title>
  <link>http://voiceingov.org/2005/09/13/click-here-for-help/</link>
  <pubDate>Tue, 13 Sep 2005 11:37:29 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=59</guid>
  <description/>
  <content:encoded><![CDATA[<p>It appears that the FEMA web site -- where victims of Hurricane Katrina can submit requests for relief assistance -- is <a href="http://www.webstandards.org/buzz/archive/2005_09.html#a000563">not compatible with certain browsers</a>, and may hinder some from filing requests.</p>

<p>This is an object lesson in the need to create accessible, standards-compliant web applications.  Surely we can do better than this.  Maybe FEMA Director Michael Brown can <a href="http://msnbc.msn.com/id/9315184/">focus on this</a> when he retuirns to Washington.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>59</wp:post_id>
  <wp:post_date>2005-09-13 07:37:29</wp:post_date>
  <wp:post_date_gmt>2005-09-13 11:37:29</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>click-here-for-help</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>A Little BIT of Change</title>
  <link>http://voiceingov.org/2005/09/16/a-little-bit-of-change/</link>
  <pubDate>Fri, 16 Sep 2005 13:29:13 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=60</guid>
  <description/>
  <content:encoded><![CDATA[Congress recently took another step toward overhauling federal telecommunications law to include provisions that account for technologies like broadband Internet transmission services (BITS) and voice over Internet Protocol.  The U.S. House of Representatives Energy and Commerce committee released a staff working draft and is now calling for comments from interested parties.  <a href="http://energycommerce.house.gov/108/News/09152005_1642.htm">Definately worth a read</a>.

Clearly the reaction to this draft will be drawn out over a period of weeks and months, but the draft raises some initial questions (at least for me).

It seems fairly clear that the bill's definition of VoIP services and VoIP providers is meant to capture instances where a service offering (like <a href="http://www.vonage.com/">Vonage</a>) will replace basic telephone service.  The draft defines VoIP services as:



<blockquote>
<ol>
<li>""¦ a packet-switched voice communications service that:</li>
<ul>
<li>is offered with or without a fee to the public, or to such classes of users as to be effectively available directly to the public, regardless of the facilities used; and</li>
<li>enables a subscriber to send or receive voice communications in TCP/IP protocol or a successor protocol over a broadband Internet transmission service to or from any subscriber with a telephone number under the North American Numbering Plan or such other identification method as designated by the Commission;</li>
</ul>
<li>may include integrated, enhanced features, functions, and capabilities; and</li>
<li>does not include a cable service or a broadband video service"¦"</li>
</ol></blockquote>


The question becomes, how does this definition affect <a href="http://www.instantmessagingplanet.com/enterprise/article.php/3527401">VoIP over IM</a> offerings like <a href="http://www.google.com/talk/">Google Talk</a> or Skype?  With <a href="http://www.skype.com/products/skypeout/">Skype Out</a>, you can use a VoIP soft phone to make a call to a traditional telephone, one that has a number under traditional classification systems. Would these providers need to comply with the 911 and Universal Service Fund requirements as other "telephone replacement" VoIP offerings?  I don't think anyone would confuse Google Talk (or even Skype under the majority of usage scenarios) as a replacement for traditional telephone services.

Since the notion of VoIP over IM is relatively new, I wonder if this draft (as timely as it is) isn't already behind the technology curve a bit.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>60</wp:post_id>
  <wp:post_date>2005-09-16 09:29:13</wp:post_date>
  <wp:post_date_gmt>2005-09-16 13:29:13</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>a-little-bit-of-change</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>Opera is Free!</title>
  <link>http://voiceingov.org/2005/09/20/opera-is-free/</link>
  <pubDate>Tue, 20 Sep 2005 14:16:27 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=61</guid>
  <description/>
  <content:encoded><![CDATA[One of the few browser's to support the developing <a href="http://my.opera.com/community/dev/voice/">XHTML+Voice</a> standard is now free.

This is a great step forward for the advancement of the <a href="http://www.voicexml.org/specs/multimodal/x+v/12/">X+V standard</a>, and a signal to governments everywhere that it is now time to incorporate this new standard into their web pages and applications to improve accessibility.

Download the <a href="http://my.opera.com/mheadd/affiliate/">Opera Browser</a> now and <a href="http://www.voiceingov.org/blog/?page_id=53">get up to snuff</a> on how to create X+V content. Your customers (i.e., the taxpayers) will thank you for it.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>61</wp:post_id>
  <wp:post_date>2005-09-20 10:16:27</wp:post_date>
  <wp:post_date_gmt>2005-09-20 14:16:27</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>opera-is-free</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>AOL Gets in on Voice over IM Action</title>
  <link>http://voiceingov.org/2005/09/21/aol-gets-in-on-voice-over-im-action/</link>
  <pubDate>Wed, 21 Sep 2005 11:30:33 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=62</guid>
  <description/>
  <content:encoded><![CDATA[Looks like AOL is the next to <a href="http://www.internetnews.com/infra/article.php/3550256">join the Voice over IM race</a> in earnest, following Google's recent announcement of the release of <a href="http://www.google.com/talk/">Google Talk</a> (still technically in beta - but isn't everything at Google).  <a href="http://www.cbronline.com/article_news.asp?guid=FD4592F5-964F-4A4C-A051-B1E26666985B">Yahoo!</a> and <a href="http://www.forbes.com/markets/commodities/2005/08/31/microsoft-voip-yahoo-google-0831markets07.html">Microsoft</a> are also expected to make similar announcements in the near future.

AOL's Total Talk service looks to provide some very nice features -- PSTN termination (i.e., users will be able to call a traditional telephone in the real world, as opposed to only users of the same IM software), E 911 and three-way calling.

It will be interesting to see if the announcements from Yahoo! and Microsoft measure up, and if this helps chart the direction for where Google Talk will go (or where eBay will take Skype for that matter).  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>62</wp:post_id>
  <wp:post_date>2005-09-21 07:30:33</wp:post_date>
  <wp:post_date_gmt>2005-09-21 11:30:33</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>aol-gets-in-on-voice-over-im-action</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>Voice over IM and Constituent Service</title>
  <link>http://voiceingov.org/2005/09/22/voice-over-im-and-constituent-service/</link>
  <pubDate>Thu, 22 Sep 2005 14:01:02 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=63</guid>
  <description/>
  <content:encoded><![CDATA[I do a lot of commenting on this blog about recent developments in the <a href="http://www.pcmag.com/encyclopedia_term/0,2542,t=voice+over+IM&amp;i=54071,00.asp">Voice over IM</a> space.  You may occasionally wonder why such blathering is relevent for governments and their use of voice technologies to serve citizens and taxpayers.  It's time I clarified my thinking in this regard.

A <a href="http://www.pewinternet.org/PPF/r/128/report_display.asp">growing number of citizens</a> are using the Internet, and internet-based applications to interact with governments.  There are many reports and studies available that document this trend - one of the most useful in my opinion is the annual survey of federal and state government web sites conducted by Darrell West of Brown University.  <a href="http://www.insidepolitics.org/egovt05us.pdf">This report</a> details the changes governments have instituted in their e-government programs over the years to better serve citizens.  One of the most interesting developments in recent years has been the increased use of <a href="http://en.wikipedia.org/wiki/Instant_messenger">instant messaging technologies</a> by governments to provide real-time assistance to citizens through a primary web portal.

According to the <a href="http://www.insidepolitics.org/egovt05us.pdf">latest e-government report</a> from Brown, the number of states offering IM services through their primary web portal is up to eight - as recently as two years ago, there were no states offering this service.  Although, the Brown report doesn't clearly document it (at least by my reading), several other states also offering IM-like services for citizens to <a href="http://www.answerline.lib.de.us/patron.html">talk with a librarian</a> or other customer service staff person.

It seems fairly clear that as IM clients become more robust, and are developed to support VoIP calls, that citizens will become inclined to expect this type of interaction with their government.  There are a host of different services that can be enhanced by offering this type of functionality.  While sensibly designed web portals and web-based services have made a profound improvement in the quality of service, governments that offer IM services for their citizens recognize that immediacy of response is something that not all web applications can provide.  Sometimes citizens just want a quick answer to a quick question:

<ul>
<li>How do I file an extension on my taxes?</li>
<li>Who do I call to incorporate my business?</li>
<li>Where do I go to pick up my fishing license?</li>
<li>What is the proper address to send my water payment to?</li>
</ul>

IM services can often provide a more efficient response to inquires of this type because they take place in real time.  These services can also be used to marshal staff in disparate locations to answer inquires through a single channel - citizens with questions about tax payments won't care if the person providing the answer is sitting in the state capitol, or in a regional office in a far corner of the state.  As long as the answer is helpful.

As more and more governments move to offer real-time assistance through IM services, its only a matter of time before Voice over IM is added to the equation.  Governments that are starting to think about offering these services must pay attention to the latest developments in this area.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>63</wp:post_id>
  <wp:post_date>2005-09-22 10:01:02</wp:post_date>
  <wp:post_date_gmt>2005-09-22 14:01:02</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voice-over-im-and-constituent-service</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_d241d5ecf6688bc8adb79b5c08f00db2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f852936b6eb8a2d51707384461f6f112</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>18</wp:comment_id>
    <wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>68.83.81.109</wp:comment_author_IP>
    <wp:comment_date>2005-10-16 11:32:10</wp:comment_date>
    <wp:comment_date_gmt>2005-10-16 15:32:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting article on the future of Voice over Instant Messaging.  Worth a read:

http://www.instantmessagingplanet.com/enterprise/article.php/3527401]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-10-16 15:32:10</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>19</wp:comment_id>
    <wp:comment_author><![CDATA[Voice(XML) of the People &raquo; Click to Call]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=71</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2005-11-29 08:36:59</wp:comment_date>
    <wp:comment_date_gmt>2005-11-29 12:36:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] A while back, I argued that the developing trend toward Voice over IM would have implications for governments. I think that as web surfers become more acclimated to using voice communications from their computer, and more specifically through an IM client, that they will desire to speak with public officials in this manner. It will be interesting to see if this trend plays out for click-to-call as well. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-11-29 12:36:59</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>20</wp:comment_id>
    <wp:comment_author><![CDATA[Voice(XML) of the People &raquo; Adventures in Extreme Phoning "“ Vol II.]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=76</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2005-12-13 11:51:56</wp:comment_date>
    <wp:comment_date_gmt>2005-12-13 15:51:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Extreme web surfers have know the joy of being untethered for some time now, with the continued maturity of the 802.11 family of standards and the proliferation of Wi-Fi hotspots. But VoIP telephony "“ an absolute must for extreme phone users "“ remains largely a tethered experience. It&#8217;s hard to go mobile with VoIP today, unless you want to run a softphone or Voice over IM client on a laptop that connects to a Wi-Fi hotspot. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-12-13 15:51:56</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Reality Check for Voice?</title>
  <link>http://voiceingov.org/2005/09/30/reality-check-for-voice/</link>
  <pubDate>Fri, 30 Sep 2005 11:59:33 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=64</guid>
  <description/>
  <content:encoded><![CDATA[In a <a href="http://news.com.com/Joy+Future+of+the+Web+is+mobile+devices/2100-1016_3-5885769.html?tag=nefd.top">recent interview</a> with CNET News.com, Bill Joy (co-founder of Sun Microsystems) makes some interesting observations about voice technologies:


<blockquote>"Personally, I'm very frustrated by voice. If you leave me a voice mail, it's not likely I'll get around to answering it. But there is a warmth to voice. It's a media that has been difficult to integrate with the Web experience. I have a friend who holds his notebook up to his head to use Skype. We need new formats."
</blockquote>


I can't say I find much to agree with in Joy's statement, but I think it's healthy for voice technology advocates to hear from people who do not share their inherent enthusiasm for the medium. Like any other web technology, voice runs the risk of giving users an adverse experience if it is not used in the appropriate fashion.

What are the appropriate uses of voice in application development? In a <a href="http://www.speechtechmag.com/issues/10_5/cover/12363-1.html">recent article</a> for Speech Technology Magazine, Steve Chirokas makes a keen observation on this point:


<blockquote>"The challenge "¦ is to ensure that callers are engaged in a dialog that allows them to complete a task and also encourages them to call back." </blockquote>


Voice is not the right medium for every type of intereaction, nor is voice-enabling a web application the right thing simply because it can be done. To be truly successful in the future of the web, voice must fill a need that other types of intereactive technologies can not. It is up to voice developers to identify when voice fills that need, and to be honest about when it does not. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>64</wp:post_id>
  <wp:post_date>2005-09-30 07:59:33</wp:post_date>
  <wp:post_date_gmt>2005-09-30 11:59:33</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>reality-check-for-voice</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>New Tutorial Coming Soon</title>
  <link>http://voiceingov.org/2005/10/06/new-tutorial-coming-soon/</link>
  <pubDate>Thu, 06 Oct 2005 14:38:17 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=65</guid>
  <description/>
  <content:encoded><![CDATA[Several weeks back, <a href="http://www.voiceingov.org/blog/?page_id=53">I wrote a tutorial</a> covering the basics of converting visual XHTML web pages into <em>superhappyfantastic</em> <a href="http://www.voiceingov.org/blog/?page_id=13">XHTML+Voice</a> content using PHP.

Specifically, I made use of a PHP class library called <a href="http://minixml.psychogenic.com/index.html">MiniXML</a> that works with PHP 4.x.  Since the new version of PHP (Version 5) has now been out for a bit and is gaining support, I think it makes sense to leverage some of the new features of this latest release to do the same thing.  I'm hoping this will be easier to do "“ in my original tutorial, I had to modify (read "hack") the underlying classes to get it to work the way I wanted.

To this end, I'm working on a new tutorial covering this same technique but using the new <a href="http://us2.php.net/manual/en/ref.dom.php">DOM Functions</a> of PHP 5.  Should be ready soon "“ stay tuned"¦]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>65</wp:post_id>
  <wp:post_date>2005-10-06 10:38:17</wp:post_date>
  <wp:post_date_gmt>2005-10-06 14:38:17</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>new-tutorial-coming-soon</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>When Voice Applications Fail</title>
  <link>http://voiceingov.org/2005/10/10/when-voice-applications-fail/</link>
  <pubDate>Mon, 10 Oct 2005 14:27:08 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=66</guid>
  <description/>
  <content:encoded><![CDATA[<p>It's always frustrating to hear people complain about poorly designed telephone applications, particularly when these complaints relate to government-sponsored applications.  (Encouraging good design principles for developing voice applications is kind of the point of this here blog "“ "˜ya dig?)</p>

<p>You can imagine how disheartened I was to read a <a href="http://www.delawareonline.com/apps/pbcs.dll/article?AID=/20051010/NEWS/510100346">story cataloging a litany of complaints</a> about one such system in my hometown newspaper.  <a href="http://www.delawareonline.com/apps/pbcs.dll/article?AID=/20051010/NEWS/510100346">This article</a> focuses on some extremely negative experiences by callers to the Medicare help line (1-800-MEDICARE).  In an analysis of the Medicare help line, the General Accounting Office <a href="http://www.consumeraffairs.com/news04/medicare_gao.html">concluded late last year</a> that less than two thirds of callers to this "help" line received accurate answers to their questions.</p>

<p>To be perfectly fair, there are few things in this world "“ with the possible exception of the U.S. Tax Code "“ as complex as the <a href="http://www.medicare.gov/default.asp">Medicare</a> program.  Not a surprise considering it's the largest health insurance program in the nation, covering some 40 million Americans (and counting!).  When eligibility and benefit rules are complex, the job of providing clear concise answers to recipient questions is difficult, so some degree of frustration is probably inevitable.</p>

<p>It's also more likely that a phone system set up to answer benefit questions will have to utilize a mixture of automated dialogs and customer service representatives.  Given the nature of the program, developing a fully automated system would seem to be highly impractical.</p>

<p>However, when I read about some of the negative caller experiences, I can't do anything but shake my head:</p>

<blockquote>After two minutes of following instructions from an automated female voice, Bingham arrived at a list of choices.

"If you're calling on the Medicare discount drug cards say, 'Drug card,' " the voice said. "For Medicare health plans, say 'Plan choices.' "

"Plan choices," Bingham said.

"I'm sorry I didn't understand you," the voice said.

"Plan choices!" Bingham said again.

"I'm sorry, I still didn't understand you."

Bingham brought the telephone two inches from her lips.

"PLAN CHOICES!"

"Please hold a moment while I transfer you to a customer service representative who can help you."</blockquote>

<p>This is just a fundamental lack of proper menu construction and grammar tuning "“ the fact that these things do not appear to have been done for an application as heavily used as this one is almost criminal.  At a minimum, the menu should accept both spoken and DTMF input so that a caller can use their key pad to enter a numeric choice if the application is having trouble recognizing what they are saying.  </p>
<p>
<code>
POORLY DESIGNED MENU STRUCTURE:

&lt;menu&gt;
&lt;noinput&gt;I'm sorry I didn't understand you.&lt;/noinput&gt;
&lt;nomatch&gt;I'm sorry I didn't understand you.&lt;/nomatch&gt;
&lt;prompt&gt;Welcome to the Medicare help line.  If you're calling on the Medicare discount drug cards say, Drug card.  For Medicare health plans, say Plan Choices.
&lt;/prompt&gt;
   &lt;choice next="#drugs"&gt;drug cards&lt;/choice&gt;
   &lt;choice next="#choice"&gt;plan choices&lt;/choice&gt;
&lt;/menu&gt;
</code>
</p>

<p>
This type of menu structure has several flaws.  First, the prompts are too dissimilar to the menu choices "“ if the desired input for the second item is "plan choices," why doesn't the prompt direct the user to this input?  "For Medicare health plans, say Plan Choices." should be "For Medicare health plans, say Health Plans."  This increases the likelihood that the caller will provide the right input.</p>

<p>Second, the menu does not allow for approximate input "“ if a caller says simply "cards," or "discount cards" the application will not recognize the input.  Under the VoiceXML 2.0 specification, the <a href="http://www.w3.org/TR/voicexml20/#dml2.2.1">default setting</a> for menu input is "exact" -- in other words, the VoiceXML interpreter will look for an exact match on the menu items, and will not recognize input that includes some (but not all) of the words in the menu item.</p>

<p>Third, the menu does not allow for DTMF entry, which would allow a caller to fall back to their key pad for entry if the application was having trouble recognizing their input.  Properly constructed voice applications will check for the type of input being provided, and direct callers to modify it accordingly (demonstrated below).</p>

<p>Finally, the menu does not use tapered prompts to assist the caller in refining their input, or selecting the appropriate input type.</p>

<code>
PROPERLY DESIGNED MENU STRUCTURE:

&lt;!-- Accept attribute is set to allow approximate input --&gt;
&lt;menu accept="approximate"&gt;

&lt;!-- Tapered prompts when no input is detected --&gt;
&lt;noinput count="1"&gt;
&lt;prompt&gt;I'm sorry. I didn't hear what you said. &lt;/prompt&gt;
&lt;reprompt/&gt;
&lt;/noinput&gt;

&lt;noinput count="2"&gt;
&lt;prompt&gt;I'm having trouble hearing you.  If you are using a speaker phone, you may want to pick up your telephone handset or make sure your phone is not on mute&lt;/prompt&gt;
&lt;reprompt/&gt;
&lt;/noinput&gt;

&lt;noinput count="3"&gt;
&lt;prompt&gt;I'm sorry I'm still having trouble hearing you.  Please wait while I transfer you to a customer service representative.&lt;/prompt&gt;
&lt;goto next="#transfer" /&gt;
&lt;/noinput&gt;

&lt;!-- Tapered prompts when application does not recognize input --&gt;

&lt;nomatch count="1"&gt;
&lt;prompt&gt;I'm sorry I didn't understand what you said. &lt;/prompt&gt;
&lt;reprompt/&gt;
&lt;/nomatch&gt;

&lt;nomatch count="2"&gt;
  &lt;if cond=" application.lastresult$.inputmode='voice'"&gt;
     &lt;prompt&gt;I'm still having trouble hearing you.  Please try entering your selection using your touch tone key pad. &lt;/prompt&gt;
&lt;reprompt /&gt;
&nbsp;&nbsp;&lt;else/&gt;
&lt;prompt&gt;I didn't get that.  Please try entering your selection again. &lt;/prompt&gt;
&lt;reprompt /&gt;
  &lt;/if&gt;
&lt;/nomatch&gt;

&lt;nomatch count="3"&gt;
&lt;prompt&gt;I'm sorry.  I'm still having trouble understanding your selection.  Please wait while I transfer you to a customer service representative.&lt;/prompt&gt;
&lt;goto next="#transfer" /&gt;
&lt;/nomatch&gt;

&lt;prompt&gt;Welcome to the Medicare help line.
&lt;enumerate&gt;
For the Medicare &lt;value expr="_prompt"/&gt; service, say &lt;value expr="_prompt"/&gt;, or press &lt;value expr="_dtmf"/&gt;.
&lt;/enumerate&gt;
&lt;/prompt&gt;

&lt;!-- menu choices allow for alternate DTMF input --&gt;
   &lt;choice next="#drugs" dtmf="1"&gt;discount drug cards&lt;/choice&gt;
   &lt;choice next="#choice" dtmf ="2"&gt;health plans&lt;/choice&gt;
&lt;/menu&gt;</code>


<p>Additionally, a good system will verify user input if the confidence level on recognition is lower than a pre-specified threshold.  There is a good overview of this technique in an <a href="http://www.voiceingov.org/blog/?page_id=33">earlier posting</a> on this site.</p>

<p>This is pretty basic stuff "“ even if the application developers didn't know enough to take this approach when they built the system, it is most certainly something that should have been uncovered during testing.  This is the kind of second rate development that gives voice applications a bad rep.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>66</wp:post_id>
  <wp:post_date>2005-10-10 10:27:08</wp:post_date>
  <wp:post_date_gmt>2005-10-10 14:27:08</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>when-voice-applications-fail</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[Voice(XML) of the People &raquo; Blog Archive &raquo; The Human Factor]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=85</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2006-02-27 21:02:42</wp:comment_date>
    <wp:comment_date_gmt>2006-02-28 01:02:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] VoiceXML makes it easer, not (necessarily) better. There is an excellent discussion in the latest issue of VoiceXML Review that talks about the reasons the technology was developed. This helps underscore the simple fact that it is very possible to build a lousy IVR system using a great technology like VoiceXML. VoiceXML changes the economics and the complexity of building voice applications "“ it doesn&#8217;t make voice applications bulletproof to second rate performance or design issues. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-02-28 01:02:42</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>22</wp:comment_id>
    <wp:comment_author><![CDATA[Non-Profit Tech Blog &raquo; The &#8220;magic&#8221; IVR]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.nonprofittechblog.org/wordpress/?p=4</wp:comment_author_url>
    <wp:comment_author_IP>66.118.190.191</wp:comment_author_IP>
    <wp:comment_date>2006-03-05 21:10:34</wp:comment_date>
    <wp:comment_date_gmt>2006-03-06 01:10:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Need to read up more on proper VXML app design (one of the problems of being the only IT guy around is that you never have time to do more than just hack an app together) Check this link out &#8212; http://www.voiceingov.org/blog/?p=66 [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-03-06 01:10:34</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>IP Telephony &amp; Voice 2.0?</title>
  <link>http://voiceingov.org/2005/10/21/free-calls-for-all/</link>
  <pubDate>Fri, 21 Oct 2005 10:57:55 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=67</guid>
  <description/>
  <content:encoded><![CDATA[Meg Whitman, Chair and CEO of eBay, made <a href="http://news.com.com/eBay+chief+foresees+free+voice+calls+for+all/2100-7352_3-5904540.html">an interesting prediction</a> about the futrure of Internet telephony recently.  In an interview with financial analysts discussing eBay's purchase of Skype, Whitman said:

<blockquote>"In the end, the price that anyone can provide for voice transmission on the 'Net will trend toward zero..."</blockquote>

This raises questions about what is next for the world of telephony and voice applications.  There is an <a href="http://iotum.com/simplyrelevant/2005/10/21/voice-20-a-manifesto-for-the-future/">interesting post</a> on the Simply Relevant blog describing the concept of "Voice 2.0."  The concept and term (which appears to be derived from the notion of <a href="http://en.wikipedia.org/wiki/Web_2.0">Web 2.0</a>) are, in the words of the author:

<blockquote>""¦the marriage of IP Telephony to the Web."</blockquote>

There is a good discussion in this post about the confluence of certain factors that will drive the development of Voice 2.0 "“ things like meterless calling (via Skype or a similar service), development tools for building web applications like <a href="http://vxml.sourceforge.net/">PHPVoice</a> (a project to which I am a contributor) and <a href="http://en.wikipedia.org/wiki/Presence_Information">presence</a>.

While I agree with the author, I'd add another recent technology to the mix "“ <a href="http://en.wikipedia.org/wiki/Podcasting">podcasting</a>.  One of the key differences between the visual web and the voice web (or Voice 2.0 if you want to think of it that way) is permanence.  A voice conversation or interaction happens in real time while the visual web has more permanence "“ value can be "stored up" as text or images and reread, reviewed and referenced for an indefinite period of time.

Podcasting is a recent trend that seeks to do something similar with voice "“ to store the value of a conversation in the form of an MP3 file that can be referenced at a later time.  Its still pretty new, but so is this whole concept of Voice 2.0 (or Web 2.0 for that matter).
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>67</wp:post_id>
  <wp:post_date>2005-10-21 06:57:55</wp:post_date>
  <wp:post_date_gmt>2005-10-21 10:57:55</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>free-calls-for-all</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>Web 2.0 Talk</title>
  <link>http://voiceingov.org/2005/10/31/web-20-talk/</link>
  <pubDate>Mon, 31 Oct 2005 15:15:15 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=68</guid>
  <description/>
  <content:encoded><![CDATA[I made a presentation at the recent <a href="http://deitconference.state.de.us/DTC/DTCRegister.nsf/?open"> State of Delaware IT Conference</a> on new advances in web application development.  My talk focused specifically on Rich Interface Applications (RIAs "“ i.e., AJAX), web services and <a href="http://www.w3.org/TR/2004/WD-voicexml21-20040323/">VoiceXML 2.1</a>.

My main theme in this talk was that despite a good deal of hype around some of these new technologies, they will ultimately have an impact on the way that applications are developed and maintained.  Governments need to think about how these changes will affect them in the future, and also look for opportunities to exploit these new approaches to their benefit today.

A copy of my presentation can be <a href="http://deitconference.state.de.us/DTC/DTCRegister.nsf/f2f224ee493cecc685256e4e0058c1d9/5524eb81041dedad852570a00042baa8/$FILE/Web%20Application%20Development.ppt">obtained here</a> (PPT format).  Any feedback or reactions are welcome.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>68</wp:post_id>
  <wp:post_date>2005-10-31 11:15:15</wp:post_date>
  <wp:post_date_gmt>2005-10-31 15:15:15</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>web-20-talk</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>NYC 311 Getting Bigger</title>
  <link>http://voiceingov.org/2005/11/15/nyc-311-getting-bigger/</link>
  <pubDate>Wed, 16 Nov 2005 00:46:14 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=69</guid>
  <description/>
  <content:encoded><![CDATA[<p>A while back, I posted some information on <a href="http://www.voiceingov.org/blog/?p=51">FCC-sanctioned abbreviated dialing designations</a> ("N11").  One of the largest implementations of n11 - the City of New York's 311 system - is about to get even bigger.</p>

<p>New York's 311 system, which provides callers with government related information, will soon include information on social service programs administered by nonprofits.  Read more in <a href="http://www.govtech.net/news/news.php?id=97250">Government Technology Magazine</a>.</p>

<p>What's notable about this system, aside from the staggering number of calls it supports (an average of <strong>43,000 calls</strong> per day), is that it reportedly uses no automation.  All calls are fielded by human operators and translation services are provided in 170 different languages.</p>

<p>That's not to say that 311 systems (like other n11 systems) don't provide ample opportunity for automation and speech technologies.  A number of governments use VoiceXML as the foundation for their n11 systems but what works for one doesn't necessarily work for all. </p>

<p>Open standards like VoiceXML are <a href="http://www.destinationcrm.com/articles/default.asp?ArticleID=5306">a good fit</a> in call centers of all types.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>69</wp:post_id>
  <wp:post_date>2005-11-15 20:46:14</wp:post_date>
  <wp:post_date_gmt>2005-11-16 00:46:14</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>nyc-311-getting-bigger</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[69]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[69]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>More on N11</title>
  <link>http://voiceingov.org/2005/11/22/more-on-n11/</link>
  <pubDate>Tue, 22 Nov 2005 19:33:48 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=70</guid>
  <description/>
  <content:encoded><![CDATA[Keeping the <a href="http://www.voiceingov.org/blog/?p=51">N11 theme</a> going, it looks like the State of Florida's 511 system is expanding - read about in <a href="http://www.fcw.com/article91515-11-21-05-Web">Federal Computer Week</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>70</wp:post_id>
  <wp:post_date>2005-11-22 15:33:48</wp:post_date>
  <wp:post_date_gmt>2005-11-22 19:33:48</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-on-n11</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[70]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[70]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Click to Call</title>
  <link>http://voiceingov.org/2005/11/29/click-to-call/</link>
  <pubDate>Tue, 29 Nov 2005 12:36:44 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=71</guid>
  <description/>
  <content:encoded><![CDATA[<p>It appears that Google has begun testing a new click-to-call advertising service "“ <a href="http://news.com.com/Hello%2C+this+is+Google%2C+your+operator%2C+speaking/2100-1032_3-5974318.html?tag=nefd.top">check out the story</a> at CNET News.com.  The new service will allow web searchers to click an icon to initiate a phone call with an advertiser, presumably to ask more specific questions about their product or to order goods.  It appears that some other tech heavyweights (i.e., Microsoft, IBM) are also pursuing click-to-call strategies.</p>

<p>It's worth noting that...
<blockquote>[u]nlike voice over Internet Protocol, a technology that sends voice transmission over the Internet, this service appears to connect two parties over the regular phone lines. However, Google declined to provide more details, including the specifics of the technology employed.</blockquote>
</p>

<p>A while back, I argued that the developing trend toward Voice over IM would <a href="http://www.voiceingov.org/blog/?p=63">have implications for governments</a>.  I think that as web surfers become more acclimated to using voice communications from their computer, and more specifically through an IM client, that they will desire to speak with public officials in this manner.  It will be interesting to see if this trend plays out for click-to-call as well.</p>

<p>One can imagine elected officials allowing their constituents to click-to-call, or using it in conjunction with government agency websites that have detailed information about program eligibility.  For example, click-to-call could be tied to government web sites explaining land use rules, eligibility for government programs, or tax questions.  Citizens could get the information they need by reading the text on a web site, but if they had further questions, or needed more information they could click-to-call.  It will be interesting to see how this develops.</p>

<p>By the way dear reader, if you haven't noticed I now have my <strong>own</strong> click-to-call option enabled for this blog "“ I'm using the <a href="http://anti.masendav.com/2005/11/skype-button-for-wordpress/">Skype plugin for Wordpress</a> developed by Anti Veeranna.  Not a bad little plugin "“ don't hesitate to give me a ring.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2005-11-29 08:36:44</wp:post_date>
  <wp:post_date_gmt>2005-11-29 12:36:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>click-to-call</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:comment>
    <wp:comment_id>23</wp:comment_id>
    <wp:comment_author><![CDATA[Voice(XML) of the People &raquo; Google to Takeover Opera?]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=77</wp:comment_author_url>
    <wp:comment_author_IP>65.36.177.34</wp:comment_author_IP>
    <wp:comment_date>2005-12-18 12:57:31</wp:comment_date>
    <wp:comment_date_gmt>2005-12-18 16:57:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] I for one hope that if this happens, that the excellent XHTML+Voice features that the developers at Opera have built in to their browser don&#8217;t get crowded out. If the folks at Google were smart (which they obviously are), they would find a way to leverage the X+V support in the Opera browser to further their click-to-call strategy. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2005-12-18 16:57:31</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Idaho 511</title>
  <link>http://voiceingov.org/2005/11/30/idaho-511/</link>
  <pubDate>Wed, 30 Nov 2005 12:53:42 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=72</guid>
  <description/>
  <content:encoded><![CDATA[<p>It looks like the <a href="http://511.idaho.gov">State of Idaho</a> is the <a href="http://www.govtech.net/news/news.php?id=97410">latest state</a> to implement a 511 traveler information service.  Not a lot of information available on the technology used, but the system appears to accept both voice and <acronym title="Dual Tone Multi Frequency">DTMF</acronym> input.  It also appears that Idaho is partnering with other states in reserving phone lines for the system, to help spread the cost.</p>

<p>Idaho is the <a href="http://www.deploy511.org/deploystatus.htm">24th state</a> to implement a 511 system.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>72</wp:post_id>
  <wp:post_date>2005-11-30 08:53:42</wp:post_date>
  <wp:post_date_gmt>2005-11-30 12:53:42</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>idaho-511</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>New World Order</title>
  <link>http://voiceingov.org/2005/12/05/new-world-order/</link>
  <pubDate>Mon, 05 Dec 2005 18:25:42 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=73</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://news.com.com/At+phone+giants%2C+jobs+may+not+last+a+lifetime+-+page+2/2100-1033_3-5982356-2.html?tag=st.next">Very interesting article</a> on CNET News.com documenting the shift from old line telephone companies to the world of today (and tomorrow), characterized by fiber optic cable, IP telephony and software-based routers and PBX's.</p>

<p>It's a brave new world, and it will have an indelible effect on old line phone companies.  It will also have an impact on how governments regulate telecommunications companies, both old and new: </p>


<p>
<blockquote>"In the end there is going to be more regulation, not less," said <a href="http://chogendorn.web.wesleyan.edu/">Christiaan Hogendorn</a>, who teaches the economics of technology at Wesleyan University. "Every infrastructure industry starts with lots of competition and then as competitive issues come up, we get more regulation."</blockquote>
</p>

<p>
One of the primary issues that will likely shape the nature of the new world order is the stance old line companies (who manage the networks on top of which all of this fun new stuff is happening) take towards their competitors.  There have <a href="http://news.com.com/DSL%2C+cable+providers+spar+with+Vonage/2100-1034_3-5841741.html">already been skirmishes</a> "“ scuffles have developed where broadband providers have blocked access to competing services delivered over their networks.</p>

<p>An uneasy truce appears to have settled around a <a href="http://hraunfoss.fcc.gov/edocs_public/attachmatch/DOC-260435A1.pdf">policy statement</a> adopted by the FCC to outline "net neutrality":</p>

<ul>
<li>Consumers are entitled to access the lawful Internet content of their choice; </li>
<li>Consumers are entitled to run applications and services of their choice, subject to the needs of law enforcement; </li>
<li>Consumers are entitled to connect their choice of legal devices that do not harm the network; and, </li>
<li>Consumers are entitled to competition among network providers, application and service providers, and content providers.</li>
</ul>

<p>Its not clear that this statement (as opposed to a formal regulation by the FCC) is going to cut the mustard as competition among the old and the new heats up.  As old line companies lose these competitive skirmishes, the impact will continue to be felt by workers who a generation ago could count on beginning and ending their career with the phone company.  The <strong>same</strong> phone company.</p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>73</wp:post_id>
  <wp:post_date>2005-12-05 14:25:42</wp:post_date>
  <wp:post_date_gmt>2005-12-05 18:25:42</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>new-world-order</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>VoiceXML 3.0 on its way</title>
  <link>http://voiceingov.org/2005/12/07/voicexml-30/</link>
  <pubDate>Wed, 07 Dec 2005 12:09:50 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=74</guid>
  <description/>
  <content:encoded><![CDATA[The World Wide Web Consortium (W3C) has <a href="http://www.w3.org/2005/12/ssml-pressrelease">announced plans</a> to develop the next generation of VoiceXML.  The new version will include a feature  -- termed "speaker verification" -- to allow for the verification of callers based on their voice print.  This will enhance the security of voice applications, and extend their usefulness in supporting sensitive transactions.

For some background on speaker verification, check out <a href="http://www.voicexmlreview.org/Jun2005/features/speaker_auth.html">this piece</a> written for the VoiceXML Review by Ken Rehor, the new Chairman of the VoiceXML Forum.  If you want to play around with speaker verification, you can check out the extension available on the <a href="http://cafe.bevocal.com/docs/verification/index.html">BeVocal platform</a>.  (Keep in mind, however, that the implementation of speaker verification in VoiceXML 3.0 may differ from BeVocal's implementation.)

As part of the same announcement, the W3C also announced that it will work to further internationalize VoiceXML and its sister specifications to include Mandarin Chinese.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>74</wp:post_id>
  <wp:post_date>2005-12-07 08:09:50</wp:post_date>
  <wp:post_date_gmt>2005-12-07 12:09:50</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voicexml-30</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>Adventures in Extreme Phoning "“ Vol I.</title>
  <link>http://voiceingov.org/2005/12/13/adventures-in-extreme-phoning-vol-i/</link>
  <pubDate>Tue, 13 Dec 2005 12:11:15 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=75</guid>
  <description/>
  <content:encoded><![CDATA[<p>For those knowledgeable in the realm of software PBX's like <a href="http://asteriskathome.sourceforge.net/">Asterisk</a>, the edge of the envelope might be defined by setting up your own home telephone system built around the latest Asterisk release.  For those that want to go to the edge, there is a nice series of podcasts available from <a href="http://www.techhelpweekly.com/">TechHelpWeekly</a> that provide an overview of Asterisk and give some good tips on getting a system up and running:</p>
<ul>
<li><a href="http://www.techhelpweekly.com/modules.php?name=Downloads&amp;d_op=getit&amp;lid=18">Episode 17</a> "“ focuses on using Asterisk in a small business setting. </li>
<li><a href="http://www.techhelpweekly.com/modules.php?name=Downloads&amp;d_op=getit&amp;lid=17">Episode  16</a> "“ provides some good information on some of the hardware requirements for using Asterisk.</li>
<li><a href="http://www.techhelpweekly.com/modules.php?name=Downloads&amp;d_op=getit&amp;lid=16">Episode 15</a> "“ an introduction to Asterisk and software PBX's.  (Kind of "fluffy" "“ if your already interested in using Asterisk and don't need to be convinced of its usefulness, go right to the next episode.) </li>
</ul>
<p>Using Asterisk as the core for a small business telephone system is a great idea "“ it may also make sense for some smaller governments to give this a whirl.  If Asterisk can make Bill &amp; Dave's Hardware Store sound like Home Depot, it may help jurisdictions with more limited resources provide useful service to their citizens.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>75</wp:post_id>
  <wp:post_date>2005-12-13 08:11:15</wp:post_date>
  <wp:post_date_gmt>2005-12-13 12:11:15</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>adventures-in-extreme-phoning-vol-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Adventures in Extreme Phoning "“ Vol II.</title>
  <link>http://voiceingov.org/2005/12/13/adventures-in-extreme-phoning-vol-ii/</link>
  <pubDate>Tue, 13 Dec 2005 15:49:44 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=76</guid>
  <description/>
  <content:encoded><![CDATA[<p>Extreme web surfers have know the joy of being untethered for some time now, with the continued maturity of the <a href="http://en.wikipedia.org/wiki/802.11">802.11</a> family of standards and the proliferation of Wi-Fi hotspots.  But VoIP telephony "“ an absolute must for extreme phone users "“ remains largely a tethered experience.  It's hard to go mobile with VoIP today, unless you want to run a softphone or <a href="http://www.voiceingov.org/blog/?p=63">Voice over IM</a> client on a laptop that connects to a Wi-Fi hotspot.  </p>

<p>Still, this type of wireless VoIP experience can't match the convenience or utility of cellular telephone service.  But that appears to be changing.</p>

<p>VoIP companies are starting to <a href="http://news.com.com/VoIP+unplugged%2C+as+Wi-Fi+meets+Net+phoning/2100-7352_3-5415858.html?tag=nl">work closely</a> with commercial hot-spot providers to roll out true wireless VoIP service (technically called VoWiFi "“ Voice over Wireless Fidelity).  VoIP phone company Vonage has even announced <a href="http://news.com.com/Vonage+to+sell+Wi-Fi+phone/2100-7352_3-5992450.html?tag=nefd.top">plans for a portable phone</a> that will let customers use their Vonage service when connected to a Wi-Fi hotspot.  Not surprisingly, competing interests will come together as VoWiFi service matures, and governments will likely have a role in determining the outcome. </p>

<p>Cellular providers will no doubt point to <a href="http://www.fcc.gov/911/enhanced/">tough government regulations</a> requiring them to provide locational information for cellular users.  Will VoWiFi providers have to comply with the same or similar requirements?</p>

<p>It also remains to be seen how advances in wireless devices themselves will impact the competing interests between cellular providers and VoIP companies.  Since hot spots can provide wireless connectivity only within a limited range (typically about 90 feet), to be truly useful devices will probably need to jump back and forth between Wi-Fi access points and cellular access points.  This is probably true even within big metro locations that are rolling out large Wi-Fi service areas (e.g., the <a href="http://www.phila.gov/wireless/index.html">City of Philadelphia</a>).  It seems likely that some level of cooperation from cellular providers will be needed to make this work "“ will this cooperative spirit develop alone, or will government regulators enter the fray?</p>

<p>It's too soon to tell, but if you live near an area where a large Wi-Fi rollout is scheduled to take place (like I do) and you fancy yourself an extreme phoner (like I <em>kindasorta</em> do), then you may need to have a go at this.  If I have a chance to check this out I'll post a review here in the weeks ahead.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>76</wp:post_id>
  <wp:post_date>2005-12-13 11:49:44</wp:post_date>
  <wp:post_date_gmt>2005-12-13 15:49:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>adventures-in-extreme-phoning-vol-ii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>Google to Takeover Opera?</title>
  <link>http://voiceingov.org/2005/12/18/google-to-takeover-opera/</link>
  <pubDate>Sun, 18 Dec 2005 16:53:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=77</guid>
  <description/>
  <content:encoded><![CDATA[<p>Some interesting talk of late about the possibility of Google making a play for the Norwegian browser company Opera.</p>

<p><a href="http://www.pcworld.com/resource/article/0,aid,123948,pg,1,RSS,RSS,00.asp">Some analysts are speculating</a> that such an acquisition would support Google's recent partnerships with Sun and the <a href="http://www.openoffice.org/">OpenOffice.org</a> project, and align with its strategy to deliver office software functionality as a service through a browser interface.  There is a lot for advocates of voice technologies to be enthusiastic about in such talks "“ and some things to be concerned about as well. </p>

<p>Google clearly recognizes the value of using voice as a medium for delivering information, and for allowing users to interact with each other "“ take a look at <a href="http://www.google.com/talk/">Google Talk</a> (if you haven't already).  The possibilities of a pairing between Google with the browser company that has been at the forefront of helping further the development  of the <a href="http://www.voiceingov.org/blog/?page_id=13">XHTML+Voice</a> standard are very exciting.</p>

<p>However, there are those speculating that such an acquisition could lead to the development of a Google-optimized browser:</p>

<blockquote>"Whilst it may be difficult for Google to make any direct income from acquiring a browser, there might be the advantage that the company could package a browser pre-configured with Google goodies that it could then attempt to get PC suppliers to preload as part of the machines' base install," said Tony Lock, chief analyst with Bloor Research of the U.K.</blockquote>

<p>I for one hope that if this happens, that the excellent <a href="http://www.voiceingov.org/blog/?page_id=13">XHTML+Voice</a> features that the developers at Opera have built in to their browser don't get crowded out.  If the folks at Google were smart (which they obviously are), they would find a way to leverage the X+V support in the Opera browser to further their <a href="http://www.voiceingov.org/blog/?p=71">click-to-call</a> strategy.</p>

<p>If Larry and Sergey decide to give me a ring, this is the advice I'll be giving them.  ;-)</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>77</wp:post_id>
  <wp:post_date>2005-12-18 12:53:18</wp:post_date>
  <wp:post_date_gmt>2005-12-18 16:53:18</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>google-to-takeover-opera</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>Mass. CIO Peter Quinn Resigns</title>
  <link>http://voiceingov.org/2005/12/29/mass-cio-peter-quinn-resigns/</link>
  <pubDate>Thu, 29 Dec 2005 17:08:04 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=78</guid>
  <description/>
  <content:encoded><![CDATA[<p>I usually reserve this blog for postings on voice technologies and their use in government.  However, I feel compelled to comment here on an issue relating to the use of information technology in government more broadly -- the recent <a href="http://news.com.com/Massachusetts+CIO+quits+amid+OpenDocument+debate/2100-1012_3-6012030.html?tag=nefd.top">resignation of Massachusetts CIO Peter Quinn</a>.</p>

<p>Mr. Quinn has been the subject of many a news article and <a href="http://www.technorati.com/search/Peter+Quinn">blog posting</a> since late summer because of his leadership in developing a policy for the Commonwealth regarding an open document format.  If your not familiar with this issue, its <a href="http://www.mass.gov/portal/site/massgovportal/menuitem.28ce312fa5e831c14db4a11030468a0c/?pageID=itdtopic&amp;L=3&amp;sid=Aitd&amp;L0=Home&amp;L1=Open+Initiatives&amp;L2=OpenDocument">worth boning up on</a>.  Since the announcement of this new policy last August, a good deal of controversy was been generated and a <a href="http://www.eweek.com/article2/0,1895,1857298,00.asp">pretty animated debate</a> (which included top Romney Administration officials and State Legislators) ensued.</p>

<p>Mr. Quinn was the subject of intense scrutiny, and <a href="http://www.boston.com/news/local/articles/2005/11/26/romney_administration_reviewing_trips_made_by_technology_chief/">was also investigated</a> for possibly accepting inappropriate reimbursements for travel expenses to various open source conferences "“ he was <a href="http://www.boston.com/news/local/massachusetts/articles/2005/12/10/review_backs_trips_by_technology_chief/">ultimately cleared</a> of any wrongdoing in this regard.  </p>

<p>I don't know Peter Quinn well, but we did meet at a gathering of State IT officials that preceded the launch of the <a href="http://www.gocc.gov/">Government Open Code Collaborative</a> project.  (Mr. Quinn's leadership in getting this project off the ground was invaluable in my opinion.)  I have followed the news accounts surrounding the Massachusetts open document policy and generally believe that it was the right thing to do.  I think that Mr. Quinn is a dedicated, smart, passionate public servant that served the people of the Commonwealth well "“ they may one day find that they were better served by having him as the CIO.  We'll see.</p>

<p>Having said all of that, I think this issue provides a number of very important lessons for government IT professionals:</p>
<ul>

<li><strong>Government is inherently a political environment.</strong>  IT policy makers and managers can not delude themselves into thinking that they are not operating in an arena that is populated largely by political actors.  The nature of this environment must be recognized and respected if significant policy changes (especially controversial ones) are to be enacted.</li>

<li><strong>Being right often isn't enough.</strong>  Simply having a good idea, or proposing a change that is broadly recognized as being "the right thing" often isn't enough to get a policy enacted.  In some ways, politics is the art of reciprocity (or, as Don Vito once said, "Some day I may ask you for a favor"¦").  IT managers are often hesitant to engage in horse trading, and dirty their hands in the political arena.  Legislators, budget officials and politicians are generally interested in doing the right thing "“ they just want to know what's in it for them.</li>

<li><strong>Company cools controversy.</strong>  Radical changes are often helped by having key stakeholders buy into the proposed change.  The open document policy did not have support from <a href="http://news.com.com/Mass.+officials+criticize+OpenDocument+decision/2100-1013_3-5925823.html">some very key players</a>, most notably the official in charge of archiving state records and documents.  Obtaining buy in from key administration officials and legislators should have been part of the broader effort to enact the proposed policy change.  </li>

<li><strong>Wear a cup.</strong>  If a proposed policy threatens an entrenched interest (especially one with lots of money) you're going to have to deal with a couple of kicks to the wontons.  Get your ducks in a row "“ know who the opponents of your policy are likely to be, and how they are likely to come at you.  As Sun Tzu said in the Art of War "“ "One who knows the enemy and knows himself will not be in danger in a hundred battles."</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>78</wp:post_id>
  <wp:post_date>2005-12-29 13:08:04</wp:post_date>
  <wp:post_date_gmt>2005-12-29 17:08:04</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>mass-cio-peter-quinn-resigns</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_89d346d22a7110f46fb56a64be8e1dc9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_58c030a796ea82ae4b0b376b9114791c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>24</wp:comment_id>
    <wp:comment_author><![CDATA[fartman]]></wp:comment_author>
    <wp:comment_author_email>david.gregor@state.de.us</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>167.21.1.240</wp:comment_author_IP>
    <wp:comment_date>2006-01-06 13:40:13</wp:comment_date>
    <wp:comment_date_gmt>2006-01-06 17:40:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Dude,  You've really done it.  You went from a tax nerd, which I know from personal experience, is bad enough...to a nerd's nerd.

I'm thinking of staging an intervention.  What's your brother Marty's phone number?  I may need his help.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-01-06 17:40:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>25</wp:comment_id>
    <wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>66.237.221.18</wp:comment_author_IP>
    <wp:comment_date>2006-01-06 14:53:36</wp:comment_date>
    <wp:comment_date_gmt>2006-01-06 18:53:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Actually, I prefer the term "dork" to "nerd" -- makes me sound more sophisticated.

If I haven't shared this with you already, check out my posting on creating a phone-based tax calcualtor:

http://www.voiceingov.org/blog/?page_id=23

Flexing my tax "dork" muscles a bit on that one.  This could be the basis for a full fledged telefile system -- I'd love to help work on something like that for the State of Delaware.

Hint, hint...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-01-06 18:53:36</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Visual AJAX != Voice AJAX</title>
  <link>http://voiceingov.org/2006/01/08/visual-ajax-voice-ajax/</link>
  <pubDate>Mon, 09 Jan 2006 02:40:20 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=79</guid>
  <description/>
  <content:encoded><![CDATA[<p>There is an <a href="http://www.speechtechmag.com/issues/11_1/technology_trends/12752-1.html">interesting article</a> in the latest installment of Speech Technology Magazine "“ Jim Larson offers his thoughts on the use of the <a href="http://en.wikipedia.org/wiki/Ajax_(programming)">AJAX development technique</a> in VoiceXML applications.</p>

<p>Larson points to <a href="http://www.voicexmlreview.org/columns/Jun2005_speak_listen.html">a notable example</a> of "AJAX-like" programming in VoiceXML.  In fact, its one <a href="http://www.voiceingov.org/blog/?p=31">I have commented</a> on before.  My view of this technique hasn't changed.  It's powerful, but it isn't AJAX.</p>

<p>The way I view AJAX programming, there are two key hallmarks; processing of XML on the client using JavaScript and the <acronym title="Document Object Model">DOM</acronym>, and asynchronous communication with a back end server  using HTTP.  The approach referenced by Larson includes the former, but misses the latter.</p>

<p>Make no mistake, using the new <a href="http://www.w3.org/TR/2005/CR-voicexml21-20050613/#sec-data">VoiceXML 2.1 &lt;data&gt; element</a> to fetch an XML document that can be utilized from within a VoiceXML script without a page transition is indeed handy.  But there isn't any asynchronous communication happening here "“ the external XML document is fetched only once, <a href="http://www.w3.org/TR/2004/REC-voicexml20-20040316/#dml6.1">typically at the begining</a> of script execution.  For asynchronous behavior, we need to look to one of VoiceXML's sister technologies "“ the <a href="http://www.w3.org/TR/2005/WD-ccxml-20050111/">Call Control eXtensible Markup Language</a> (CCXML).</p>

<p>The CCXML 1.0 specification (a last call working draft from the W3C) includes the <a href="http://www.w3.org/TR/2005/WD-ccxml-20050111/#Send">&lt;send&gt; element</a>, which allows a developer to throw a user defined event that can be caught by the initiating (or another) CCXML document.  The classic &lt;send&gt;  example involves the throwing of a "timesUp" event that allows a developer to designate when a call should be terminated.</p>

<p>The good folks at Voxeo (leaders in the effort to formalize the CCXML standard) have added functionality to their platform that allows the &lt;send&gt;  element to asynchronously <a href="http://docs.voxeo.com/ccxml/1.0/frame.jsp?page=appendixg_ccxml.htm">send and receive information via HTTP</a>.  So its theoretically possible to construct a conference call application that sends a message to a back end script to kick off an IM message to the call organizer when there are 30 seconds left on the call.  (Actually, that sounds pretty cool "“ may have to try that one soon.)</p>

<p>When it comes to AJAX in VoiceXML, the same functionality is generally available but the needs of developers are somewhat different.  Callers to a VoiceXML application probably don't perceive page transitions in the same way that users of a visual web application do.  VoiceXML has <a href="http://www.voicexmlreview.org/Dec2002/features/vxml_app_performance.html">fetching and caching functionality built into it</a> that can be used to manage the delay between page transitions.  It's probably a better use of developer time to understand  fetching and caching more intimately than to try and replicate AJAX in voice applications.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>79</wp:post_id>
  <wp:post_date>2006-01-08 22:40:20</wp:post_date>
  <wp:post_date_gmt>2006-01-09 02:40:20</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>visual-ajax-voice-ajax</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <wp:comment>
    <wp:comment_id>26</wp:comment_id>
    <wp:comment_author><![CDATA[Ajaxian &raquo; Voice XML and Ajax]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://ajaxian.com/archives/voice-xml-and-ajax</wp:comment_author_url>
    <wp:comment_author_IP>63.246.7.165</wp:comment_author_IP>
    <wp:comment_date>2006-01-25 04:19:36</wp:comment_date>
    <wp:comment_date_gmt>2006-01-25 08:19:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Voice(XML) of the People has weighed in on their thoughts on bringing Ajax techniques to Voice XML via the  and  elements available. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-01-25 08:19:36</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Voice as the "Killer App"</title>
  <link>http://voiceingov.org/2006/01/17/voice-as-the-killer-app/</link>
  <pubDate>Tue, 17 Jan 2006 16:54:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=80</guid>
  <description/>
  <content:encoded><![CDATA[<p>The <a href="http://churchillclub.org/index.jsp">Churchill Club's</a> 8th annual "Top Ten Tech Trends Debate," which took place in <a href="http://www.ateaseweb.com/songs/paloalto.php" target="_blank" title="Song that spawned the title of a classic album...">Palo Alto</a> last week, was the scene for an interesting discussion about the future of voice technologies.</p>


<blockquote>Steve Jurvetson, managing director of Draper, Fisher, Jurvetson, forecast that voice calls will become free within data networks and that voice becomes the killer app for metropolitan wireless data networks.

"Voice runs as a free incremental service over data networks," said Jurvetson. "It's just like the transition to e-mail, you don't meter it. Communication is the fundamental lubricant of the economy." </blockquote>


<p>&lt;myPrediction&gt; With the proliferation of wireless data networks, and the increased takeup of voice as the communications mode of choice, look for voice applications to play an increasingly important role in how commerce is conducted.  &lt;/myPrediction&gt;</p>

<p>Read <a href="http://www.internetnews.com/bus-news/article.php/3577641">more in depth</a> coverage of the event here.</p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>80</wp:post_id>
  <wp:post_date>2006-01-17 12:54:45</wp:post_date>
  <wp:post_date_gmt>2006-01-17 16:54:45</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voice-as-the-killer-app</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
</item>
<item>
  <title>Open Says Google</title>
  <link>http://voiceingov.org/2006/01/18/google-talks-more-openly/</link>
  <pubDate>Wed, 18 Jan 2006 16:52:59 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=81</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://www.google.com/talk/">Google Talk</a> -- the IM and VoIP client from the Internet search giant -- is now capable of interacting with a larger range of <a href="http://en.wikipedia.org/wiki/List_of_Jabber_clients">different clients</a> because of enhancements to its interoperability.</p>

<p>Google Talk is built on the open <a href="http://www.xmpp.org/">XMPP specification</a>, but when it was originally released several months back it was restricted for use with other Google Talk clients.  The <a href="http://www.internetnews.com/dev-news/article.php/3578196">recently announced</a> enhancements will make it possible for Google Talk to connect with other Jabber-based clients.</p>

<p>This is a major step forward, not only for Google Talk but for open standards that promote interoperability. Nice!</p>

<p>Also, For anyone with an interest in building IM apps that will now be able to connect with Google Talk, check out the <a href="http://cjphp.netflint.net/">PHP Jabber Class</a>.  It's still a relatively young project, but I've found it useful for banging out prototypes of VoiceXML / IM applications.  Worth a look.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>81</wp:post_id>
  <wp:post_date>2006-01-18 12:52:59</wp:post_date>
  <wp:post_date_gmt>2006-01-18 16:52:59</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>google-talks-more-openly</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>Semantic Interpretation of Speech</title>
  <link>http://voiceingov.org/2006/01/24/semantic-interpretation-of-speech/</link>
  <pubDate>Tue, 24 Jan 2006 12:37:11 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=82</guid>
  <description/>
  <content:encoded><![CDATA[<p>A couple of weeks ago, the W3C released the Semantic Interpretation for Speech Recognition (SISR) specification as a <a href="http://www.w3.org/TR/semantic-interpretation/">candidate recommendation</a>.  This is an important step forward in the development of the Speech Interface Framework, and will help further define the differences between voice applications built using VoiceXML and its sister technologies, and <a href="http://www.oreillynet.com/pub/a/etel/2005/12/19/hacking-in-asterisk-and-rails.html">other ways</a> of building voice applications.</p>

<p>To fully understand Semantic Interpretation, a little background is helpful.  VoiceXML applications utilize grammars to define allowable utterances for caller interactions.  The job of a speech recognition platform is to match as closely as possible the spoken input of a caller against a list of allowable utterance defined in a grammar, or to determine that there is no good match (in which case a "nomatch" event is thrown).  When a successful match is made, a grammar can return to a VoiceXML application the exact sequence of words that was spoken (i.e., to fill a &lt;field&gt; variable) or it can return a representation of that information in another format.</p>

<p>Semantic Interpretation is the process of converting the raw text of spoken utterances into a representation of data that is more easily processed by computer programming languages.</p>

<blockquote>In an application, knowing the sequence of words that were uttered is sometimes interesting but often not the most practical way of handling the information that is present in the user utterance. What is needed is a computer processable representation of the information, the Semantic Result, more than a natural language transcript. </blockquote>

<p>To some extent, the facility to do this already exists within VoiceXML and the Speech Recognition Grammar Specification (SRGS).  Most seasoned developers know that a specified value can be returned to a voice application from a grammar based on a match <a href="http://www.w3.org/TR/2004/REC-speech-grammar-20040316/#S2.6">using the &lt;tag&gt; element</a>.  The value returned by the &lt;tag&gt; can be further processed by the application, as opposed to using the string of text that was matched from the grammar.</p>

<p>An example of a grammar that uses this approach <a href="http://www.voiceingov.org/grammars/grammar_test3_xml.txt" target="_blank">can be viewed here</a>.  Note that when a caller speaks a name that is matched in this grammar, the value defined within the &lt;tag&gt; element is returned to the voice application for further processing (in this case, the value is returned to a &lt;field&gt; designated with a slot value of "department").</p>

<p>The purpose of the SISR specification is to define an expanded syntax of the Semantic Interpretation result.  Understanding how these results will structured is critical for making use of them within the larger context of a voice application. </p>

<p>Developers interested in Semantic Interpretation should also check out information on this topic in the <a href="http://www.w3.org/TR/2004/REC-voicexml20-20040316/#dml3.1.5">VoiceXML 2.0</a> specification and the <a href="http://www.w3.org/TR/2004/REC-speech-grammar-20040316/#S1.4">SRGS 1.0</a> specification. </p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>82</wp:post_id>
  <wp:post_date>2006-01-24 08:37:11</wp:post_date>
  <wp:post_date_gmt>2006-01-24 12:37:11</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>semantic-interpretation-of-speech</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>E4X in VoiceXML</title>
  <link>http://voiceingov.org/2006/02/06/e4x-in-voicexml/</link>
  <pubDate>Mon, 06 Feb 2006 12:04:59 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=83</guid>
  <description/>
  <content:encoded><![CDATA[<p>Voice application developers familiar with the proposed VoiceXML 2.1 specification are aware of new functionality that allows external XML documents to be accessed from within VoiceXML scripts.  The new <a href="http://www.w3.org/TR/2005/CR-voicexml21-20050613/#sec-data">&lt;data&gt; element</a> will allow developers to fetch XML data from a web server without transitioning to a new VoiceXML document (a handy trick indeed). The XML data that is fetched is exposed as a read-only subset of the <a href="http://www.w3.org/TR/DOM-Level-2-Core/ecma-script-binding.html">W3C Document Object Model (DOM)</a> and can be manipulated using ECMAScript (JavaScript).</p>

<p>While I'm very excited about this new functionality, using the DOM is not really my favorite thing in the world to do "“ I've always found it a bit clunky and hard to get really comfortable with.  Using the DOM is not the only way to manipulate XML from within JavaScript.  There is another ECMA standard that allows developers to do this "“ <a href="http://developer.mozilla.org/en/docs/E4X">ECMAScript for XML (or E4X)</a>.</p>

<p>E4X is an extension to JavaScript that adds native XML support to the language.  With E4X, in addition to <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference#Global_Objects">native object types</a> in JavaScript like the Number type, the String type, the Boolean type, there is the XML type for representing XML elements, attributes, comments, processing-instructions or text nodes and there is the XMLList type for representing list of XML objects. </p>

<p>E4X is an <a href="http://www.ecma-international.org/publications/standards/Ecma-357.htm">official ECMA standard</a>, but right now support for it is kind of sparse.  There are a couple of JavaScript engines (not surprisingly, both from Mozilla) that support it, but it isn't supported yet in any of the standard browser releases.  If you want to use E4X, you have to download one of the nightly builds from the Mozilla download site.  Hopefully this will change soon, and E4X support will become standard in JavaScript engines.</p>

<p>As the W3C and the VoiceXML community move toward final adoption of the VoiceXML 2.1 standard, it may be worth considering weather the DOM is the only (or best) way that voice developers should be able to access and manipulate XML data from within VoiceXML scripts.  Choice is a good thing -- hint, hint. ;-)</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>83</wp:post_id>
  <wp:post_date>2006-02-06 08:04:59</wp:post_date>
  <wp:post_date_gmt>2006-02-06 12:04:59</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>e4x-in-voicexml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>The Human Factor</title>
  <link>http://voiceingov.org/2006/02/27/the-human-factor/</link>
  <pubDate>Tue, 28 Feb 2006 01:02:20 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=85</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>The true value of a human being can be found in the degree to which he has attained liberation from the self.
<em>Albert Einstein</em></blockquote>

<p>When you create voice applications for a living, it can be hard to watch things like the <a href="http://www.37signals.com/svn/archives2/press_zero_to_talk_to_a_human.php" target="_blank">new Citibank commercials</a> that extol the virtues of being able to dump an automated phone system and talk to a human.  (Although, I will admit that I laugh every time the actor in the commercial has to say his password louder a second time ... "Big Boy!")</p>

<p>There are <a href="http://gethuman.com/" target="_blank">entire web sites</a> devoted to providing information on how to circumvent automated phone systems.  As a VoiceXML developer, I've been asking myself some tough questions about what sort of reflection these developments are on the current state of voice technologies.</p>

<p>Not that aggravation with automated phone systems is a new phenomenon, it's just that we're currently sitting in a pretty happy time for the technologies used to build telephone applications.  The <a href="http://www.w3.org/TR/voicexml20/" target="_blank">VoiceXML 2.0</a> standard has been widely adopted, along with a <a href="http://www.w3.org/TR/voice-intro/" target="_blank">host of related technologies</a> that make creating voice applications easier and more cost effective; platform vendors and developers are embracing the new standards with gusto, and; <a href="http://www.voicexml.org/press/press_releases.asp?item_id=82" target="_blank">improvements to the current standards</a>, which will dramatically enhance their power and flexibility, are already in the works. </p>

<p>So why aren't more people happy with the current state of voice applications?  Why aren't consumers taking corporate web applications to task in the same way they do voice applications?  Why is it still possible for those Madison Avenue weenies to elicit such a visceral reaction from the public when they take jabs a telephone applications?</p>

<p>After I stopped feeling picked on for a few minutes (and secretly laughing at the Citibank commercials) I came up with at least two reasons that explain this apparent paradox:</p>
<ul>
<li><strong>With voice, it's personal.</strong>  Voice applications are inherently more <em>personal</em> than other types of interactive applications, web-based or otherwise.  Because the act of talking is such a fundamental way of communicating and emoting, people will always react differently to voice applications.  As such, they will always hold voice applications to  a different (and higher) standard.  I don't think there is a way around this, but I do think that there is a silver lining in this precept for voice developers.
</li>
<li><strong>VoiceXML makes it easer, not (necessarily) better.</strong>  There is an <a href="http://www.voicexmlreview.org/Jan2006/columns/Jan2006_speak_listen.html" target="_blank">excellent discussion</a> in the latest issue of VoiceXML Review that talks about the reasons the technology was developed.  This helps underscore the simple fact that it is very possible to build a lousy IVR system using a great technology like VoiceXML.  VoiceXML changes the economics and the complexity of building voice applications - it doesn't make voice applications bulletproof to <a href="http://www.voiceingov.org/blog/?p=66">second rate performance or design issues</a>.
</li>
</ul>

<p>It is incumbent upon voice application developers and designers to understand the unique nature of voice as an interactive medium, and to appreciate the limitations that even the most powerful new voice technologies come along with.  Simply put, we have to use the new generation of voice technologies to build the intuitive, agile and elegant voice applications users expect.  I think that most would admit that there is a lot of work that needs to be done to change the stigma that hangs over voice applications.</p>

<p>Until then, enjoy your laughs while you can Big Boy. </p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>85</wp:post_id>
  <wp:post_date>2006-02-27 21:02:20</wp:post_date>
  <wp:post_date_gmt>2006-02-28 01:02:20</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>the-human-factor</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[85]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[85]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The Skinny on Databases</title>
  <link>http://voiceingov.org/2006/03/08/the-skinny-on-databases/</link>
  <pubDate>Thu, 09 Mar 2006 01:08:20 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=86</guid>
  <description/>
  <content:encoded><![CDATA[<p>Here is <a href="http://www.developer.com/db/article.php/3589351">a great article</a> on using  databases to build web applications "“ one of the best that I have read in a while.</p>

<p>This article was especially relevant to me because I recently reviewed several projects where data stored in a configuration table was used to set some variables for a VoiceXML application.  Most of the project tables (separate table for each project) had no more than few records to specify preferences used to control the behavior of the application.  (For example, if the current date falls between a date range stored in the table, play a special greeting file.)  Sometimes the data hadn't been changed since the project was originally developed many months (sometimes a couple of years) before, but no one had ever thought to ask if the application needed to have a database on the back end in the first place.</p>

<p>There are other options that I have floated in such situations.  Since the platform I work on supports the <a href="http://www.w3.org/TR/2005/CR-voicexml21-20050613/#sec-data">&lt;data&gt; element</a> that is part of the VoiceXML 2.1 specification, I think it's reasonable to ask whether this data can be stored in an XML file, especially if it doesn't change all that often.  I think using the &lt;data&gt; element's functionality to read data from an external XML file would be a pretty good use in a scenario like this.  Alternatively, what's wrong with a simple <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array">JavaScript array</a> to hold a few configuration values?</p>

<p>I'm not suggesting that alternatives to databases should be used just because they can be, but if it adds a significant amount of additional complexity to an application why not consider another approach?
</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>86</wp:post_id>
  <wp:post_date>2006-03-08 21:08:20</wp:post_date>
  <wp:post_date_gmt>2006-03-09 01:08:20</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>the-skinny-on-databases</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
</item>
<item>
  <title>Combating the "Alpha Bail"</title>
  <link>http://voiceingov.org/2006/03/27/combating-the-alpha-bail/</link>
  <pubDate>Mon, 27 Mar 2006 17:53:44 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=87</guid>
  <description/>
  <content:encoded><![CDATA[<p>In a <a href="http://www.speechtechmag.com/issues/ 11_1/human_factor/12763-1.html">very interesting piece</a> in the January/February issue of Speech Technology Magazine, Walter Rolandi discusses the problems of speech recognition with individual letters of the English alphabet.</p>

<blockquote>One [problem] is that all but one letter (W) is monosyllabic.  Another reason is that so many of the letters in the English alphabet sound essentially the same. </blockquote>


<p>The most common instance where a speech application might need to collect individual English letters from a caller is probably name and address capture.  Because this can be excruciatingly difficult to do, a number of techniques and tools have been developed to assist voice application developers.</p>

<p>The first approach - which I term the "lookup approach" usually involves the capture of a caller's ANI and a name/address lookup using a <a href="http://community.voxeo.com/services_pro/targus/usage.jsp">third party service</a>.  This is an easy, efficient way of capturing name and address information but it isn't full proof.  Callers that are not listed in publicly available directories may not be candidates for a lookup, and the services themselves are not free.</p>

<p>An alternative - which I have very unscientifically termed the "prebuilt approach" usually involves the construction of a set of pre-built grammars and other components that can be put in place to support a name and address capture.  These components - like the Open Speech Dialog Modules, or OSDM's, available from Nuance - are typically incorporated into voice applications as subdialogs.  They are usually made up of a large collection of individual street-level grammar files that may be precompiled to run faster on a production platform.  They're usually pretty complex, but they act sort of like a black box in your voice application - the caller is handed off to the subdialog and the collected values are &lt;return&gt;ed for post call processing.  As with the lookup approach, this technique isn't full proof.  Since street names and address can change over time (think suburban sprawl) this approach won't work for every caller.  Additionally, since street listings get stale with time, a long-term subscription to a vendor might be required.</p>

<p>The universal alternative to these approaches is human transcription of recorded audio files.  When a lookup or a prebuilt component doesn't work, a voice application will typically fall back to audio recording for transcription later by a human employee.  The obvious downside with this approach is the time and cost of transcription.</p>

<p>There are other alternatives, but for many of the reasons outlined by Rolandi most commercial grade applications will employ one of the approaches outlined above.</p>

<p>Many a voice developer has posited the question; "Why not just build a DTMF grammar that let's a caller spell out words using their keypad?"  Good question and one that I have taken on in my spare time to satisfy my curiosity about how efficient and accurate such an approach might be.  The result of my humble laboring can be <a href="http://www.voiceingov.org/xfiles/spellTest.txt" target="_blank">found here</a>.</p>

<p>In taking this exercise on, I've decided to take a bit of a different approach -- building a DTMF grammar that let's a caller spell out words isn't all that challenging.  Building a voice interface that uses such a grammar gracefully and efficiently most definitely is.  </p>

<p>What I have tried to do is to build a simple, yet graceful VoiceXML application that allows callers to spell words.  My goal was to make it as simple as possible, but also to make it highly flexible.  In undertaking my little exercise, I've decided to keep my grammars simple - in fact, I decided to let callers enter DTMF input for spelling words with nothing but a simple builtin "digits" grammar.</p>

<p>I accomplish this by using a JavaScript array that has all of the allowable values for spelling words with DTMF entry in it.  I'm not sure it's the best way of approaching this problem, but it's definitely unique.</p>

<p>I've also tried to structure my application by using both voice and DTMF entry for spelling words.  There will be times when an ASR engine will do pretty good in recognizing letters.  This won't always be the case, so if ASR fails the application falls back to DTMF entry.</p>

<p>I'm definitely not finished - I suspect that this will be a work in progress for a while.  I'd like to add an additional component that works with the confirmation dialog to speak a word out that begins with the letter the caller entered:</p>

<blockquote>Caller says: "K"
Application says: "Did you say K, as in Karate?" </blockquote>

<p>I'd also like to add logic that would cause the application to fall back permanently to DTMF entry if the ASR engine gets the wrong letter after a certain number of attempts.</p>

<p>If you've got any thoughts, feedback or suggestions please feel free to <a href="mailto:mheadd@voiceingov.org">share them </a>with me.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>87</wp:post_id>
  <wp:post_date>2006-03-27 13:53:44</wp:post_date>
  <wp:post_date_gmt>2006-03-27 17:53:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>combating-the-alpha-bail</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[87]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[87]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Can you Stomach Some More?</title>
  <link>http://voiceingov.org/2006/03/27/can-you-stomach-some-more/</link>
  <pubDate>Tue, 28 Mar 2006 00:28:29 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=88</guid>
  <description/>
  <content:encoded><![CDATA[As scary as it seems, I will soon be published in the <a href="http://www.idea-group.com/reference/details.asp?ID=5066">Encyclopedia of Digital Government</a>.  I submitted an article arguing in favor of the use or voice technologies -- specifically VoiceXML and it's sister technologies -- to improve government service delivery.

<blockquote>The Encyclopedia of Digital Government offers the most comprehensive coverage of the issues, concepts, trends, and technologies of digital government (or electronic government). The challenges and future prospects faced by governments at different institutional levels and in different parts of the world are described in explicit detail in this commanding encyclopedia.</blockquote>

Do check it out if you can, or <a href="http://www.idea-group.com/recommend.asp?ID=5066">recommend</a> this two volume set to a library near you. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>88</wp:post_id>
  <wp:post_date>2006-03-27 20:28:29</wp:post_date>
  <wp:post_date_gmt>2006-03-28 00:28:29</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>can-you-stomach-some-more</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>All About the Phone</title>
  <link>http://voiceingov.org/2006/04/07/all-about-the-phone/</link>
  <pubDate>Fri, 07 Apr 2006 10:54:59 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=89</guid>
  <description/>
  <content:encoded><![CDATA[It's like I've been saying -- its all about the phone. Or, rather, it's <a href="http://www.pewinternet.org/PPF/r/179/report_display.asp">all about the cell phone</a>.

The <a href="http://www.pewinternet.org/pdfs/PIP_Cell_phone_study.pdf">latest report</a> from the Pew Internet and American Life Project should reinforce for governments what they must (if they read anything I write) already know.  Telephones generally are the most ubiquitous, widely used, most evenly distributed communications device in the US.  As it relates to cell phones specifically:

<blockquote>74% of the Americans who own mobile phones say they have used their hand-held device in an emergency and gained valuable help.</blockquote>

Governments that are smart about implementing Amber Alert systems, or reverse 911 systems are taking note (I hope).  This report also dovetails with other research, including that of the Pew Internet and American Life Project, which shows that <a href="http://www.pewinternet.org/PPF/r/128/report_display.asp">most Americans contact their government using their telephone</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>89</wp:post_id>
  <wp:post_date>2006-04-07 06:54:59</wp:post_date>
  <wp:post_date_gmt>2006-04-07 10:54:59</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>all-about-the-phone</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[89]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[89]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Changing VoiceXML Property Values</title>
  <link>http://voiceingov.org/2006/05/01/dynamically-changing-voicexml-properties/</link>
  <pubDate>Tue, 02 May 2006 01:08:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=90</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>Properties are used to set values [in VoiceXML applications] that affect platform behavior, such as the recognition process, timeouts, caching policy, etc.</blockquote>

<p>One of the most frequently used <a href="http://www.w3.org/TR/voicexml20/#dml6.3">properties</a> is the "inputmodes" property, which controls the types of input that a caller may use to interact with a VoiceXML application.  In practice, it's often a wise design consideration to construct handlers for when certain types of input are not working well (e.g., voice input) and direct a caller to utilize another input method (e.g., touch tone, or DTMF entry).</p>

<p>However, while it is fairly easy to detect the type of input method being used by a caller, and even easier to simply tell a caller to use an alternate input method, it can sometime be tricky to change the "inputmodes" property from within a VoiceXML application.  Changing this property value can become important when a VoiceXML application is not handling voice input efficiently.  This can occur in a noisy environment with lots of background noise, or when other factors (static on the line) may be causing the Automatic Speech Recognition (ASR) engine to try and recognize input.  Often, an ASR engine will attempt a recognition when what it thinks is spoken input is detected. Setting the "inputmodes" property to DTMF will cause the VoiceXML platform to ignore spoken input.</p>

<code>
&lt;!-- Default  / typical setting --&gt;
&lt;property name="inputmodes"  value="dtmf voice"/&gt;

&lt;!-- Setting for use in noisy environments --&gt;
&lt;property name="inputmodes"  value="dtmf"/&gt;
</code>

<p>VoiceXML doesn't allow property values to be set through client-side scripting.  There is no "expr" attribute to the &lt;property&gt; tag, as there is with so many other VoiceXML elements, but perhaps there will be in a future version of the specification.  So, what options are there for manipulating this property from within a VoiceXML application...?</p>

<strong>Detecting input modes</strong>

<p>Before we can change the "inputmodes" property, we need to be able to detect which mode a  caller is using, and set up handlers for when there are problems.  To detect the input mode used by a caller, we can access the "<a href="http://www.w3.org/TR/voicexml20/#dml5.1.5">application.lastresult$</a>" variable.  This variable holds, among other things, information about the input mode last used.  A set of handlers that leverages this information to help a caller having trouble might look like this:</p>

<code>
&lt;nomatch count="1"&gt;
&lt;prompt&gt;I'm sorry I didn't understand what you said. &lt;/prompt&gt;
&lt;reprompt/&gt;
&lt;/nomatch&gt;

&lt;nomatch count="2"&gt;
&lt;if cond=" application.lastresult$.inputmode='voice'"&gt;
&lt;prompt&gt;I'm still having trouble hearing you.
Please try entering your selection using your touch tone key pad. &lt;/prompt&gt;
&lt;reprompt /&gt;
  &lt;else/&gt;
&lt;prompt&gt;I didn't get that. Please try entering your selection again.
&lt;/prompt&gt;
&lt;reprompt /&gt;
&lt;/if&gt;
&lt;/nomatch&gt;

&lt;nomatch count="3"&gt;
&lt;prompt&gt;I'm sorry. I'm still having trouble understanding your selection.
Please wait while I transfer you to a customer service representative.
&lt;/prompt&gt;
&lt;goto next="#transfer" /&gt;
&lt;/nomatch&gt;
</code>

<p>As stated above, its pretty straightforward to simply tell the caller to use DTMF entry - which I've done above - but quite another to actually enforce it by changing the "inputmodes" property.  If the problem the caller is having is a function of a faulty line, or a noisy environment (both factors probably outside their control) telling them to use DTMF entry probably isn't a good enough solution by itself.</p>

<strong>Changing property values inside a VoiceXML application - the static approach</strong>

<p>The easiest way to change property settings is simply to direct a caller to another dialog or module with the desired setting.  So, using the above example, we might detect when a caller is having trouble and move them to a different part of the application:</p>

<code>
&lt;nomatch count="2"&gt;
&lt;if cond=" application.lastresult$.inputmode='voice'"&gt;
&lt;prompt&gt;I'm still having trouble hearing you.
Please try entering your selection using your touch tone key pad. &lt;/prompt&gt;
&lt;goto next="#dtmfOnly"/&gt;
  &lt;else/&gt;
&lt;prompt&gt;I didn't get that. Please try entering your selection again.
&lt;/prompt&gt;
&lt;reprompt /&gt;
&lt;/if&gt;
&lt;/nomatch&gt;

&lt;form id="dtmfOnly"&gt;
&lt;property name="inputmodes" value="dtmf"/&gt;

..some more VoiceXML logic...

&lt;/form&gt;
</code>

<p>By directing the caller to a specific portion of the application with a property setting scoped to that part of the application, we may have gone a long way toward solving the problem.  However, we may have inadvertently created another - this approach can get burdensome because it means that there is more code to write and take care of.  The "dtmfOnly" form may be identical to the form that directed the caller there in every way, with the exception of this one property setting.  In some extreme cases, it could mean developing parallel call legs for DTMF and Voice entry.  (Shudder!)</p>

<p>Another approach involves the introduction of some server-side scripting.</p>

<strong>Changing property values inside a VoiceXML application - the dynamic approach</strong>

<p>You can't change the value of a property setting with VoiceXML alone (or even with VoiceXML and JavaScript), but it's possible if you use some server side logic.  For this example, I'll use PHP but you can really use any flavor that you desire.</p>

<p>To start out, lets add some server-side code at the beginning of our VoiceXML script, or in the application root document if you prefer:</p>

<code>
&lt;?php

// Check to see if mode variable is submitted with page request
if (isset($_REQUEST['mode']) ) {
    echo '&lt;property name="inputmodes" value="'.$_REQUEST['mode'].'"/&gt;';
    }

// If not, use default value with property setting
    else {
    echo '&lt;property name="inputmodes" value="dtmf voice"/&gt;';
}

?&gt;
</code>

<p>This, admittedly simplistic set of logic does two things; first it checks to see if a variable submitted with the page request (named "mode") is set, and if it is, it uses the value of "mode" to generate the VoiceXML markup to set the property value for our application.  Otherwise, we simply set the value of our "inputmodes" property to DTMF/voice (this step is probably not necessary, since this is likely the default setting on the platform you are using).</p>

<p>Now, let's return for a moment to our handy handler from previous examples, and continue to add server-side markup:</p>

<code>
&lt;nomatch count="2"&gt;
&lt;if cond=" application.lastresult$.inputmode='voice'"&gt;
&lt;prompt&gt;I'm still having trouble hearing you. Please try entering your selection using your touch tone key pad. &lt;/prompt&gt;
&lt;assign name="mode" expr="'dtmf'"/&gt;
&lt;submit next="&lt;?php echo $_SERVER['PHP_SELF'] ?&gt;" namelist="mode"/&gt;
 &lt;else/&gt;
&lt;prompt&gt;I didn't get that. Please try entering your selection again. &lt;/prompt&gt;
&lt;reprompt /&gt;
&lt;/if&gt;
&lt;/nomatch&gt;
</code>

<p>This handler will now transition the caller to a new dialog - the destination of the submit element is the name of the <a href="http://us2.php.net/reserved.variables">currently executing script</a> (i.e., it's submitted to itself).  When this submit takes place, our "mode" variable will be sent along for the ride with a value of 'dtmf' to be caught and processed by the logic we added above.  (Note, in order to use the &lt;assign&gt; within this handler, we should declare the "mode" variable in our application root document, or somewhere else within our application, before getting to this point.)</p>

<p>This approach lets us rewrite the value of our "inputmodes" property without creating a parallel call flow for DMTF entry only.  It has the additional flexibility of allowing us to set our "inputmodes" property to voice only if that's what we wanted to do:</p>

<code>
&lt;assign name="mode" expr="voice'"/&gt;
&lt;submit next="&lt;?php echo $_SERVER['PHP_SELF'] ?&gt;" namelist="mode"/&gt;
</code>

<p>You'll obviously want to get a bit more sophisticated with your server-side logic.  However, this approach demonstrates that it is possible to dynamically change the value of a property setting in a VoiceXML application to dramatically improve a caller's experience.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>90</wp:post_id>
  <wp:post_date>2006-05-01 21:08:45</wp:post_date>
  <wp:post_date_gmt>2006-05-02 01:08:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>dynamically-changing-voicexml-properties</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[90]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[90]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>On the demise of SALT</title>
  <link>http://voiceingov.org/2006/05/25/on-the-demise-of-salt/</link>
  <pubDate>Thu, 25 May 2006 10:57:09 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=91</guid>
  <description/>
  <content:encoded><![CDATA[<p>There has been much talk of late on Microsoft's announcement that it will <a href="http://www.computerworld.com.au/index.php/id;868712853;fp;2;fpid;1">support VoiceXML</a> in a forthcoming version of Speech Server.  Many that I have read or listened to have pointed to this as </p>
<ul>
<li>Good news; and,</li>
<li>Evidence that open standards (like VoiceXML) are truly the best way to develop phone-based application.  </li>
</ul>
<p>There is ample evidence that Microsoft has no problem advancing it's own standard - even under the banner of "openness" - if it sees a financial benefit in doing so.  If you don't agree, I'd refer you to the debate raging about an <a href="http://news.com.com/Massachusetts+moves+ahead+sans+Microsoft/2100-1012_3-5878869.html">open document format</a>.  So, while I agree wholeheartedly with the second point, I'm not so sure I agree with the first.  At least not totally.</p>

<p>I think the bad news in Microsoft's announcement can be identified by remembering what it's nascent SALT specification was designed to do.   <a href="http://www.saltforum.org/faq/faq.asp">Speech Application Language Tags</a> were designed to be extensions to XHTML "“ in other words, the specification was developed specifically to build multimodal applications.  And although you can build pure telephone applications with SALT, this was not the original intent.</p>

<p>So, if Microsoft suddenly got religion and decided to support VoiceXML for building telephone applications it may mean that multimodal applications aren't going anywhere for a while.  That's bad news in my opinion.</p>

<p>I'd ask that readers refute this assertion by pointing out some existing production uses of multimodal technology.  If they can find any...</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>91</wp:post_id>
  <wp:post_date>2006-05-25 06:57:09</wp:post_date>
  <wp:post_date_gmt>2006-05-25 10:57:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>on-the-demise-of-salt</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_36dd6e4a22af61537213b15f78ebbb4a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2e53397997f3dd7b9a6f9e675d524943</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_88aff6532859346101c834db1890170c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27</wp:comment_id>
    <wp:comment_author><![CDATA[spotter]]></wp:comment_author>
    <wp:comment_author_email>stephen_potter@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>131.107.0.72</wp:comment_author_IP>
    <wp:comment_date>2006-06-09 12:57:03</wp:comment_date>
    <wp:comment_date_gmt>2006-06-09 16:57:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Matt, that's a perceptive insight about multimodality, and I wish I could refute it. (I will certainly refute the "demise" of SALT, see http://blogs.msdn.com/spokenword/archive/2006/04/05/569107.aspx :-)

To be frank, although Speech Server's multimodal capabilities have captured the imagination of many, especially developers, the overwhelming market for Speech Server continues to be in telephony voice services, rather than multimodal. And the latest features of Speech Server are focused squarely on meeting customer needs. But - the vision of speech-enabled multimodal interaction is alive and well here, we are learning and we continue to innovate in multimodal speech technologies. The market may not be there yet, as the lack of comments suggest, but I believe it has a strong future, especially within the converging communications landscape.

Stephen Potter (Microsoft)
http://blogs.msdn.com/spokenword]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-06-09 16:57:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Interpreting Spoken Input</title>
  <link>http://voiceingov.org/2006/06/02/interpreting-spoken-input/</link>
  <pubDate>Fri, 02 Jun 2006 12:51:09 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=92</guid>
  <description/>
  <content:encoded><![CDATA[<p>Since the VoiceXML Forum Community Bulletin Board is increasingly besieged by spammers, going forward I'm going to cross post responses I submit there on this site so that interested parties (assuming there are any ;-)) can read them.</p>

<p>This response relates to the use of semantic interpretation in VoiceXML applications, something I have <a href="http://www.voiceingov.org/blog/?p=82">written on before</a>.  I hope readers find the exchange below helpful.</p>

<strong>QUESTION:</strong>
<p>Is there a way to map a response to a certain value? For instance, if the user says "yes," "sure," or "yeah" I'd like to put 1 in the database?  If the user says "no," "nope," or "nah" I'd put 0.</p>

<strong>ANSWER:</strong>
<p>There are a couple of option open to you if all you are using is a simple yes/no grammar.</p>

Option 1 = use the builtin "boolean" grammar type.  By specifying a field type of "boolean", an implicit grammar is created that should cover affirmative or negative responses for whataver language is being used.  A boolean field returns a JavaScript string based on what the user says (e.g., yes='true' or no='false').  You can convert this to a 1 or 0 using a simple if/else construct and a predefnied variable.

<code>

&lt;var name="convert" expr="0"/&gt;

...

&lt;field name="F_1" type="boolean"&gt;
&lt;prompt&gt;Do you think VoiceXML rocks?&lt;/prompt&gt;
&lt;filled&gt;

&lt;!-- If the user says yes, then the expression in the "cond" attribute will evaluate to true --&gt;
&lt;if cond="F_1"&gt;
&lt;assign name="convert" expr="1"/&gt;
&lt;/if&gt;

&lt;!-- If the preceding if statement did not execute, then expression in the cond attribute evaluated to false.  User said no, so we keep our original value of 0 --&gt;
&lt;submit next="mypage.jsp" namelist="convert"/&gt;

&lt;/filled&gt;
&lt;/field&gt;

</code>

<p>Option 2 = you can use the &lt;tag&gt; element with a custom yes/no grammar to return a 1 or a 0.  (Check your platform vendor's documentation on this element, as there is some variation.)  </p>

<code>

&lt;!-- In your VoiceXML document, reference the yes/no grammar --&gt;
&lt;field name="F_1"&gt;
&lt;grammar src="yesno.grxml"/&gt;
...


&lt;!-- Contents of yesno.grxml file --&gt;
&lt; ?xml version = "1.0"?&gt;
&lt;grammar xml:lang="en-US" version="1.0" root="R_1" type="application/srgs+xml" xmlns="http://www.w3.org/2001/06/grammar"&gt;
&lt;rule id="R_1"&gt;
&lt;one -of&gt;
  &lt;item&gt;yes &lt;tag&gt;F_1=1;&lt;/tag&gt; &lt;/item&gt;
  &lt;item&gt;yeah &lt;tag&gt;F_1=1;&lt;/tag&gt; &lt;/item&gt;
  &lt;item&gt;hells yeah &lt;tag&gt;F_1=1;&lt;/tag&gt; &lt;/item&gt;
  &lt;item&gt;yur damn skippy &lt;tag&gt;F_1=1;&lt;/tag&gt; &lt;/item&gt;
  &lt;item&gt;no &lt;tag&gt;F_1=0;&lt;/tag&gt; &lt;/item&gt;
  &lt;item&gt;nope &lt;tag&gt;F_1=0;&lt;/tag&gt; &lt;/item&gt;
  &lt;item&gt;no way &lt;tag&gt;F_1=0';&lt;/tag&gt; &lt;/item&gt;
  &lt;item&gt;hells no &lt;tag&gt;F_1=0;&lt;/tag&gt; &lt;/item&gt;
&lt;/one&gt;
&lt;/rule&gt;
&lt;/grammar&gt;

&lt;/field

</code>

<p>This has the effect of filling the field named "F_1" with the value specified in the &lt;tag&gt; when one of the grammar items is recognized.  A few good links to get you started follow:</p>

<a href="http://cafe.bevocal.com/docs/vxml/tag.html#288994" target="_blank">BeVocal Cafe</a>

<a href="http://docs.voxeo.com/voicexml/2.0/tag.htm" target="_blank">Voxeo Community</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>92</wp:post_id>
  <wp:post_date>2006-06-02 08:51:09</wp:post_date>
  <wp:post_date_gmt>2006-06-02 12:51:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>interpreting-spoken-input</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
</item>
<item>
  <title>Detecting Caller Frustration </title>
  <link>http://voiceingov.org/2006/06/10/detecting-caller-frustration/</link>
  <pubDate>Sat, 10 Jun 2006 15:21:31 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=93</guid>
  <description/>
  <content:encoded><![CDATA[<p>There are not a lot of really good tools for IVR developers to detect when callers are getting frustrated.  Anger is a human emotion, and human emotions are complex.  The tools generally used within VoiceXML applications for dealing with frustrated callers tend to be a bit ham-fisted. </p>

<p>For example, most developers utilize a graduated set of noinput/nomatch handlers for transferring callers who are having problems to an agent.  Additionally, it is also possible to detect when a certain type of input on the part of the caller is causing problems (e.g., voice input) and to direct them utilize another (e.g., DTMF) -- there is a more complete discussion of this approach <a href="http://www.voiceingov.org/blog/?p=90">here</a>, and <a href="http://www.voiceingov.org/blog/?p=66">here</a>. </p>

<p>We can not detect frustration by looking at the volume, pitch or prosody of spoken input within VoiceXML "“ at least not yet.</p>

<p>However, the new VoiceXML 2.1 specification provides another tool that we can use to try and detect when callers are becoming testy.  The <a href="http://www.w3.org/TR/voicexml21/#sec-mark" target="_blank">&lt;mark&gt; element</a> is a new VoiceXML element that allows developers to determine when caller bargin occurs.  This can be very handy for detecting when callers are becoming frustrated with repetitive prompts (like confirmation dialogs that ask the caller to confirm what they have said or entered).</p>

<p>By using the &lt;mark&gt; element judiciously, we can make reasonable assumptions about when callers are getting sick of confirming input, and act accordingly.  A sample script with some &lt;mark&gt;'s in it <a href="http://www.voiceingov.org/xfiles/markTest.txt" target="_blank">can be found here</a>. </p>

<p>This sample contains a customer satisfaction survey that asks the caller to rate (from 1 to 5) their agreement with several statements.  After each turn, the caller is asked to confirm their answer - you can see how this could become a bit of a pain for a caller, especially if they are not happy to begin with.</p>

<p>The following bit of code does the neat stuff:</p>

<code>
&lt;if cond="confirmation$.markname=='conf_start' &amp;&amp; confirmation$.marktime &lt; 1500"&gt;
&lt;assign name="confirm" expr="false"/&gt;
&lt;/if&gt;
</code>

<p>At the beginning of our confirmation dialog, we insert a &lt;mark&gt; with a name of 'conf_start', and at the end we insert a &lt;mark&gt; with a name of 'conf_end'.  Platforms that support this element will expose some useful information -- the name of the last &lt;mark&gt; executed, and the time since its execution before the caller barged in. </p>

<p>The conditional statement above checks to see what the name of the last executed &lt;mark&gt; is.  If the name is 'conf_start' we know that the 'conf_end' mark was not reached (the caller barged in before the prompt was done).  We also check the time since the &lt;mark&gt; was executed before bargein occurred -- if it is a relatively short period (the caller barged in quickly) we can assume that they are growing frustrated.  We therefore turn off our confirmation flag (setting the variable "confirm" to false) so that the caller is not asked to conform any more input.</p>

<p>There are lots of ways to get creative with the &lt;mark&gt; element -- we could use it to end the survey all together, we could use it to trigger a shorter, more concise set of prompts, etc.  Generally speaking, there is no silver bullet for detecting caller frustration, but with the growing number of tools available (including the &lt;mark&gt; tag), the job is getting easier.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>93</wp:post_id>
  <wp:post_date>2006-06-10 11:21:31</wp:post_date>
  <wp:post_date_gmt>2006-06-10 15:21:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>detecting-caller-frustration</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
</item>
<item>
  <title>Life in the Call Center</title>
  <link>http://voiceingov.org/2006/06/10/life-in-the-call-center/</link>
  <pubDate>Sat, 10 Jun 2006 22:08:09 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=94</guid>
  <description/>
  <content:encoded><![CDATA[<p>Thinking about offshoreing your call center?  Check out the <a href="http://www.callcentermovie.com/" target="_blank">call center movie</a>. </p>

[youtube http://www.youtube.com/watch?v=-9qlS-1Sado]

<p>Hilarious!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>94</wp:post_id>
  <wp:post_date>2006-06-10 18:08:09</wp:post_date>
  <wp:post_date_gmt>2006-06-10 22:08:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>life-in-the-call-center</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Arizona 2-1-1</title>
  <link>http://voiceingov.org/2006/07/05/arizona-2-1-1/</link>
  <pubDate>Wed, 05 Jul 2006 10:48:00 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=95</guid>
  <description/>
  <content:encoded><![CDATA[<p>A while back, I wrote an entry about <a href="http://www.voiceingov.org/blog/?p=51">Abbreviated Dialing Codes</a> used by governments (sometimes referred to as N11).</p>

<p>The State of Arizona has <a href="http://www.govtech.net/news/news.php?id=100058">announced the results</a> of the first year of activity for its 2-1-1 service, which includes both an online component and a call center. </p>

<blockquote>
Arizona's Strategic Plan for 2-1-1 calls for the phased implementation of 2-1-1. The next step for the program is development of local 2-1-1 call centers serving all Arizonans day-to-day as well as in times of emergency.
</blockquote>

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>95</wp:post_id>
  <wp:post_date>2006-07-05 06:48:00</wp:post_date>
  <wp:post_date_gmt>2006-07-05 10:48:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>arizona-2-1-1</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <wp:comment>
    <wp:comment_id>28</wp:comment_id>
    <wp:comment_author><![CDATA[author1701]]></wp:comment_author>
    <wp:comment_author_email>steve@steveeastwood.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>204.89.197.42</wp:comment_author_IP>
    <wp:comment_date>2006-08-08 13:23:18</wp:comment_date>
    <wp:comment_date_gmt>2006-08-08 17:23:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[At this time the state-government-run Arizona 2-1-1 does not have an active call center. In July 2006, they did roll out a call center for declared state emergencies including wildfires, but that has only been used once so far.

The call center component is now in development. In the meantime, long-established information and referral call centers in the state, most notably the two largest in Phoenix and Tucson, are taking calls under contractual obligation to use the Arizona 2-1-1 Online database, but must supply their own non-integrated call logging software to track calls and referrals.

Both of those I&amp;R call centers, each with over 40 years of experience in I&amp;R, are awaiting the chance to bid on becoming part of the call center phase of Arizona 2-1-1.  Arizona Health Care Cost Containment System (AHCCCS -- pronounced "access"), the state's Medicaid organization, is in charge of developing and running the call centers for Arizona's 2-1-1 telephone operation. As of July 1, 2006, they have $1.8 million to set up call centers for this system. They may opt to start fresh with their own call centers rather than contracting with the already experienced non-profit operations.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-08-08 17:23:18</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Some more 2-1-1 news</title>
  <link>http://voiceingov.org/2006/07/11/some-more-2-1-1-news/</link>
  <pubDate>Tue, 11 Jul 2006 21:30:24 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=96</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://www.211maine.org/" target="_blank">Maine</a> has joined 15 other states in rolling out a 2-1-1 service.  <a href="http://www.maine.gov/tools/whatsnew/index.php?topic=Portal+News&amp;id=22123&amp;v=article-2006" target="_blank">Governor John Baldacci</a> was on hand last week to place the inaugural call.</p>

<p>Interestingly, there doesn't appear to be any automation with the Maine 2-1-1 service.  All calls (24/7) go to a representative.</p>

<p>Where is the fun in that...?  ;-)</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>96</wp:post_id>
  <wp:post_date>2006-07-11 17:30:24</wp:post_date>
  <wp:post_date_gmt>2006-07-11 21:30:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>some-more-2-1-1-news</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>A little knowledge = a dangerous thing</title>
  <link>http://voiceingov.org/2006/07/13/a-little-knowledge-a-dangerous-thing/</link>
  <pubDate>Thu, 13 Jul 2006 13:57:24 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=97</guid>
  <description/>
  <content:encoded><![CDATA[<p>This story is as old as dirt now, but I thought since most of the laughter had subsided I would point out the really scary part about Senator Ted Stevens' recent rant in front of the Senate Commerce Committee about <a href="http://blog.wired.com/27BStroke6/?entry_id=1512499" target="_blank">how the Internet works</a>.</p>

[youtube http://www.youtube.com/watch?v=SIn_J_jxf-o]

<p>This is an individual that will probably have a profound impact on how people use the Internet. Doesn't he, at the very least, have a duty to understand the most fundamental concepts about how it works? Or to recuse himself from this issue if he is so uninformed as to be prevented from making an educated decision on the issue? </p>

<p>This guy <a href="http://www.publicknowledge.org/node/497" target="_blank">can't even successfully regurgitate</a> what lobbyists and staffers have probably told him to say.  (By the way, whoever came up with the "tubes" analogy should get canned.)  If you can't synthesize complex issues, at least be able to memorize the rhetoric that you're being spoon fed.</p>

<p>This is a perfect example of why government officials need to have an understanding of how technology works. Understanding the basic principles of the Internet should me made part of "public administration 101" in every MPA program in the country. </p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>97</wp:post_id>
  <wp:post_date>2006-07-13 09:57:24</wp:post_date>
  <wp:post_date_gmt>2006-07-13 13:57:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>a-little-knowledge-a-dangerous-thing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>TellMe Offers Free SIP Hosting</title>
  <link>http://voiceingov.org/2006/07/20/tellme-offers-free-sip-hosting/</link>
  <pubDate>Thu, 20 Jul 2006 16:50:39 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=98</guid>
  <description/>
  <content:encoded><![CDATA[<p>TellMe is now offering an <a href="https://studio.tellme.com/freesip/reachingaudience.html">interesting new hosting option for VoiceXML applications</a>.   Developers that use the TellMe studio can sign up for  a limited access hosting account that will allow up to four simultaneous calls to reach their application.  All calls must utilize SIP to reach the VoiceXML application.</p>

<p>I have yet to dig into the details, but this sounds very interesting.  I've used the TellMe studio in the past, and it has some great features.  In fact, the first VoiceXML applications deployed by <a href="http://dti.delaware.gov/services/accessde.shtml">State of Delaware </a>when I worked there used the TellMe platform (not sure if they still do).</p>

<p>For those that have not tried the TellMe studio, this might be a great incentive to give it a whirl.  As IP telephony becomes more ubiquitous, it will be interesting to see how the major VoiceXML platforms shake up their service offerings.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>98</wp:post_id>
  <wp:post_date>2006-07-20 12:50:39</wp:post_date>
  <wp:post_date_gmt>2006-07-20 16:50:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tellme-offers-free-sip-hosting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Portable Rotary Cellular Phone</title>
  <link>http://voiceingov.org/2006/08/01/portable-rotary-cellular-phone/</link>
  <pubDate>Wed, 02 Aug 2006 00:45:01 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=99</guid>
  <description/>
  <content:encoded><![CDATA[I have to admit; <a href="http://www.sparkfun.com/tutorial/Port-O-Rotary/portable-rotary.htm" target="_blank">this</a> is pretty cool!

By the way, if your looking for a rotary (and after reading this, maybe you are), there are a number <a href="http://electronics.search.ebay.com/rotary-phone_Consumer-Electronics_W0QQfkrZ1QQfromZR8QQsacatZ293" target="_blank">listed on eBay</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>99</wp:post_id>
  <wp:post_date>2006-08-01 20:45:01</wp:post_date>
  <wp:post_date_gmt>2006-08-02 00:45:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>portable-rotary-cellular-phone</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Vocal Democracy</title>
  <link>http://voiceingov.org/2006/10/17/vocal-democracy/</link>
  <pubDate>Tue, 17 Oct 2006 10:52:25 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=100</guid>
  <description/>
  <content:encoded><![CDATA[Where have I been for the past few months? What have I been doing? Certainly not blogging - but hopefully that will change soon.

I've been back at work on a project that I first conceived of almost two years ago; <a href="http://sourceforge.net/projects/vdemocracy" target="_blank"> a phone-based system for voting</a>. It's been tough trying to squeeze work in on this side project, now that I'm developing VoiceXML applications for a living (sometimes you don't feel like working when you come home from work), but I'm making progress.

If your interested, you can read <a href="http://www.nist.gov/itl/vote/upload/phone_voting_whitepaper.doc" target="_blank">my original proposal on this subject</a> which I submitted to the The National Institute of Standards and Technology in early 2005. What's taken me so long on this one? A few things:
<ul>
	<li>First and foremost, I needed some time to develop my skills. I'm now a better programmer in general, and a better VoiceXML programmer specifically. I feel like I can now do the idea justice.</li>
	<li>Second, my original proposal called for using elements of the draft <a href="https://www.w3.org/TR/voicexml21/">VoiceXML 2.1</a> specification - these elements are now more widely support by VoiceXML platform vendors.</li>
	<li>Finally, there was one additional issue that gave me pause - the rampant paranoia about using technology in the voting process. Seems like most people are convinced that the only way to go is back to plain old paper ballots, with no computer technology of any kind. I'll have more to say on this one in future posts.</li>
</ul>
If your interested in helping out on this protect, and you've got some coding skills, let me know. Otherwise, check back in from time to time to see how I'm doing.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>100</wp:post_id>
  <wp:post_date>2006-10-17 06:52:25</wp:post_date>
  <wp:post_date_gmt>2006-10-17 10:52:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>vocal-democracy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="phone-voting"><![CDATA[Phone Voting]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[3801781]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[been-a-while]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Asterisk lowers phone costs</title>
  <link>http://voiceingov.org/2006/10/19/asterisk-lower-phone-costs-for-childrens-agency/</link>
  <pubDate>Thu, 19 Oct 2006 17:53:29 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=101</guid>
  <description/>
  <content:encoded><![CDATA[Here is a <a href="http://enterprise.linux.com/enterprise/06/10/03/2037223.shtml?tid=101">great story</a> about how an education agency in Chicago is using Asterisk and VoIP telephony to lower costs.

I've got an Asterisk server running at home now, but I have not yet had the time to give it the attention it deserves.  Also came across a <a href="http://sourceforge.net/projects/voxy">VoiceXML plugin for Asterisk</a> on SourceForge recently that looks interesting.  Itching to try that one...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>101</wp:post_id>
  <wp:post_date>2006-10-19 13:53:29</wp:post_date>
  <wp:post_date_gmt>2006-10-19 17:53:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>asterisk-lower-phone-costs-for-childrens-agency</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[101]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[101]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How to steal an election</title>
  <link>http://voiceingov.org/2006/10/26/how-to-steal-an-election/</link>
  <pubDate>Thu, 26 Oct 2006 17:05:23 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=102</guid>
  <description/>
  <content:encoded><![CDATA[<p>I found an <a href="http://arstechnica.com/articles/culture/evoting.ars/1">interesting article</a> today on <a href="http://www.slashdot.org">/.</a> that lays out in some detail the problems with "state of the art" direct recording electronic (DRE) voting machines.  There is a lot of good information in this article for those of us interested in using technology to support the elections process <strong>AND</strong> make elections more secure.</p>

<p>Some of the information on the Diebold AccuVote TS (a popular DRE voting unit) just floored me"¦</p>

<blockquote>
The GEMS database stores all of the votes collected from precinct accumulators, and it's used to do the vote tabulation for a county.  Because it's so sensitive, you might think it would be tightly secured.  But you'd be wrong.

The GEMS database is a vanilla, unencrypted Microsoft Access database that anyone with a copy of Access can edit. So if you have physical access to the GEMS server's filesystem (either locally or remotely), then it's not too hard to just go in and have your way with the vote totals. If Access isn't installed on a particular GEMS server, just install it from a CD-ROM, or connect remotely from a laptop and edit the database that way.

</blockquote>

<p>Access?!?!  No wonder people are so paranoid about DRE voting, and insistent on a verifiable paper trail.  I've thought a lot about security in the telephone-based voting project I am working on, and I hope to use some of the points made in this article as context to describe why I think my system will be much more secure.  (Particularly since I'll be using a real database on the backend.)</p>

<p>I don't want to get too far ahead of myself "“ I've still got to finish the $#@^% thing "“ but one of the things I have spent the most time on so far has been security related features.</p>

<p>More to come "“ stay tuned.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>102</wp:post_id>
  <wp:post_date>2006-10-26 13:05:23</wp:post_date>
  <wp:post_date_gmt>2006-10-26 17:05:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>how-to-steal-an-election</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="phone-voting"><![CDATA[Phone Voting]]></category>
  <wp:comment>
    <wp:comment_id>29</wp:comment_id>
    <wp:comment_author><![CDATA[DrBoB]]></wp:comment_author>
    <wp:comment_author_email>robert.finan@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>89.144.210.250</wp:comment_author_IP>
    <wp:comment_date>2006-10-27 03:25:03</wp:comment_date>
    <wp:comment_date_gmt>2006-10-27 07:25:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Just a couple of questions:
Are you planning a speech recognition or dtmf driven voting system?
How will you identify voters?
How do you stop people voting more than once?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-10-27 07:25:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>30</wp:comment_id>
    <wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>69.138.81.171</wp:comment_author_IP>
    <wp:comment_date>2006-10-28 12:29:34</wp:comment_date>
    <wp:comment_date_gmt>2006-10-28 16:29:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The plan is to build a speech-enabled voting system.

Speech is particularly important for the verification of votes.  The system will accept a caller's vote by matching their utterance against a grammar (as you would expect) and incrementing a vote count in a database table.  However, It will also record their utterance on successful grammar match and store it as a separate audio file.  The audio files can be used to validate election results in the database table, much like the proposals that call for a verifiable voting record (i.e., a paper trail) of votes submitted in a voting booth.

Callers will use identification numbers that can be assigned by election authorities when they register, or in preparation for an election.  Each voter will have a unique ID number.  The first thing they do when they call into the system is log in using their ID.

When a caller places a vote, and their vote is finalized, their status in the database of eligible voters will be changed from "has not voted" to "already voted", so they won't be able to vote more than once.

When I finished with the beta version, I plan on doing a lot of writing on the security aspects that I have tried to incorporate.  Much more to come on this subject.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-10-28 16:29:34</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>31</wp:comment_id>
    <wp:comment_author><![CDATA[DrBoB]]></wp:comment_author>
    <wp:comment_author_email>robert.finan@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.voice-push.com</wp:comment_author_url>
    <wp:comment_author_IP>80.121.52.230</wp:comment_author_IP>
    <wp:comment_date>2006-10-28 12:40:49</wp:comment_date>
    <wp:comment_date_gmt>2006-10-28 16:40:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I presume the ID is typed in using DTMF.

But what's missing is the verification.  I could steal someone's ID, ring the system and cast their vote.  There's no verification, as in a driver's licence or a passport.

And of course, if someone speaks unclearly you have all the fun and games of the confirmation dialogs.

What advantages would it have over traditional voting?

Are you thinking of incorporating speaker recognition?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-10-28 16:40:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>32</wp:comment_id>
    <wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>69.138.81.171</wp:comment_author_IP>
    <wp:comment_date>2006-10-28 16:49:34</wp:comment_date>
    <wp:comment_date_gmt>2006-10-28 20:49:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The ID could be entered in using speech, with a fall back to DTMF if not recognized.  The default "inputmodes" setting on most platforms is both dtmf and speech, so either would be acceptable.

To you your point about verification, I'd make several observations.  Driver's licenses and passports can (and often are) faked.  Moreover, some jurisdictions in the U.S do not require these forms of ID at a polling places.  In some places, a voter ID card (usually some form of paper, without a picture) is all that is needed.  Since these are mailed in many jurisdictions in bulk at roughly the same time (usually before a primary election), all one would need to do is walk along a street and pilfer these from the neighbors.

Using a phone-based system, we can accept an ID more securely by doing several things:

* Checking the ANI of the caller to see if it matches the phone number on record for that voter (even though this can be spoofed, it's worth checking -- who said fraudsters aren't lazy sometimes).

* Asking the caller to further verify their identity -- last four digits of their SSN, zip code of their address, birth year, etc.

* Placing a verification call back to the voter after the initial call is complete.  This would allow the voter another chance to confirm their vote, and pretty much guarantee the identity of the caller.  In other words, after a voter places a call to the system and votes, the system ends the call and then calls them back at the phone number of record for that voter (i.e,, their home phone).  The system them asks them to confirm their vote one more time.  A thief may be able to steal an ID number and spoof my ANI, but if he/she is actually in my home to receive a verification call back, I've got bigger problems than voter fraud.

All of this is explained in a bit more detail here: http://vote.nist.gov/ecposstatements/phone_voting_whitepaper.doc

Having said all of this, the system I envision is not for every voter.  It is meant primarily for voters with visual or other disabilities that have challenges traveling to polling places.

I'm interested in speaker verification, but until it becomes a standard part of the VoiceXML spec, I probably won't include it in the system I'm building.  Worth a look down the road.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-10-28 20:49:34</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>33</wp:comment_id>
    <wp:comment_author><![CDATA[DrBoB]]></wp:comment_author>
    <wp:comment_author_email>robert.finan@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.voice-push.com</wp:comment_author_url>
    <wp:comment_author_IP>89.144.214.123</wp:comment_author_IP>
    <wp:comment_date>2006-10-31 04:18:05</wp:comment_date>
    <wp:comment_date_gmt>2006-10-31 08:18:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The call back is a nice idea - though as you say in the paper, this works best for home phones rather than behind a PBX.  Contract cell phones would work even better, as they generally aren't shared.

I'm hoping they'll put speech rec in VoiceXML 3.0, along with a whole bunch of other things!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2006-10-31 08:18:05</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Vocal Democracy Released!</title>
  <link>http://voiceingov.org/2006/11/02/vocal-democracy-released/</link>
  <pubDate>Thu, 02 Nov 2006 15:24:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=103</guid>
  <description/>
  <content:encoded><![CDATA[The alpha version of <a href="http://vdemocracy.sourceforge.net/">Vocal Democracy</a> is now available for download from <a href="https://sourceforge.net/project/showfiles.php?group_id=138695">SourceForge</a>.  I've already got lots of changes planned, but I'm excited to get feedback on the state of the work so far.

This version was designed specifically to run on the <a href="http://www.voxeo.com/prophecy/" target="_blank">Voxeo Prophecy</a> platform.  Going forward, I'll be working on enhancements that will help ensure this package runs easily on a wide array of VoiceXML platforms.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>103</wp:post_id>
  <wp:post_date>2006-11-02 11:24:18</wp:post_date>
  <wp:post_date_gmt>2006-11-02 15:24:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>vocal-democracy-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="phone-voting"><![CDATA[Phone Voting]]></category>
</item>
<item>
  <title>Choice is good</title>
  <link>http://voiceingov.org/2006/11/03/choice-is-good/</link>
  <pubDate>Fri, 03 Nov 2006 11:56:56 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=104</guid>
  <description/>
  <content:encoded><![CDATA[This year at the polls, voters with visual impairments will have more options than ever.  There was a <a href="http://www.delawareonline.com/apps/pbcs.dll/article?AID=/20061103/NEWS/611030354/1006/NEWS" target="_blank">nice article</a> on this very issue waiting for me in my local newspaper this morning.

One of the downsides to those options that current exist for such voters is the cost of the equipment:

<blockquote>Voting machines nationwide are being fitted with such technology, paid for through the federal Help America Vote Act.

Each conversion cost $1,000 and an added machine was bought for each site, said Elaine Manlove, administrative director, Department of Elections for New Castle County. Added storage space also had to be rented.

"This was no small change for us," Manlove said.</blockquote>

One of the benefits of a centralized remote voting system using telephones is that it could be dramatically less expensive.  It could also make the process of voting more efficient:

<blockquote>
A downside is that hearing a whole ballot and directions may take 20 minutes, [Manlove] said.
</blockquote>

One of the nice things about a phone voting system using speech recognition is that it would provide a much more intuitive interface, cutting down on time needed to explain to voters how to use equipment.  Let's face it, voting equipment is technology you use once an election.  Telephones are used everyday.


]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>104</wp:post_id>
  <wp:post_date>2006-11-03 07:56:56</wp:post_date>
  <wp:post_date_gmt>2006-11-03 11:56:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>choice-is-good</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="phone-voting"><![CDATA[Phone Voting]]></category>
</item>
<item>
  <title>Credit where credit is due</title>
  <link>http://voiceingov.org/2006/11/06/credit-where-credit-is-due/</link>
  <pubDate>Mon, 06 Nov 2006 22:00:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=105</guid>
  <description/>
  <content:encoded><![CDATA[It's nice to see that the State of Delaware is <a href="http://www.gcn.com/print/25_32/42505-1.html" target="_blank">still receiving acclaim</a> for the Access Delaware project that I helped start several years ago with <a href="http://www.state.de.us/ltgov/default.shtml" target="_blank">Lt. Governor John Carney</a>.  After it's initial launch, the project was selected as an award winner in the Accenture/MIT Digital Government Award program -- one of the first national technology awards the State of Delaware ever received.

Thanks to a core group of dedicated programmers in the Department of Technology and Information, and the support of forward-thinking public officials like John Carney, the project continues to evolve and improve.

It's interesting to go back now and <a href="http://www.voiceingov.org/media/wdel_com_interview.htm">listen to an interview</a> I gave when the program was first launched.  I'm amazed, and very proud that the program is still being recognized.  Now, if only more governments would follow this lead... ;-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>105</wp:post_id>
  <wp:post_date>2006-11-06 18:00:36</wp:post_date>
  <wp:post_date_gmt>2006-11-06 22:00:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>credit-where-credit-is-due</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="digital-divide"><![CDATA[Digital Divide]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Phoning up some controversy</title>
  <link>http://voiceingov.org/2006/11/07/phoning-up-some-controversy/</link>
  <pubDate>Tue, 07 Nov 2006 11:46:16 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=106</guid>
  <description/>
  <content:encoded><![CDATA[It's interesting to see the part that automated outbound calling applications (or "robo calls" as they are more commonly referred to) are <a href="http://www.nytimes.com/2006/11/07/us/politics/07robo.html?_r=1&amp;ref=politics&amp;oref=slogin" target="_blank">playing in the election</a> taking place today.

Unfortunately, it looks like for the most part they are not being used very scrupulously:

<blockquote>
Political messages are exempt from the federal do-not-call rules meant to discourage unwanted sales pitches. But a New Hampshire law prohibits making automated calls to people who are on the do-not-call list. The Republican committee agreed on Sunday to halt calls there at the urging of the state attorney general.
</blockquote>

I haven't gotten that many calls, but for the next election I'll be getting my <a href="http://nerdvittles.com/index.php?p=75" target="_blank">Asterisk set up</a> configured to block this kind of nonsense. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>106</wp:post_id>
  <wp:post_date>2006-11-07 07:46:16</wp:post_date>
  <wp:post_date_gmt>2006-11-07 11:46:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>phoning-up-some-controversy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[106]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using SoX on Headerless (VOX) Audio files</title>
  <link>http://voiceingov.org/2006/11/16/using-sox-on-headerless-vox-audio-files/</link>
  <pubDate>Thu, 16 Nov 2006 20:35:31 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=107</guid>
  <description/>
  <content:encoded><![CDATA[Recently, I had occasion to use <a href="http://sox.sourceforge.net/" target="_blank">Sound eXchange</a> (SoX), the open source sound processing program that lets you convert audio files into different formats, add sound effects to audio files, mix multiple audio files together, and a bunch of other cool stuff.

I really like this tool -- it's powerful, easy to use and easy to incorporate into scripts for batch processing. I did, however, run into a bit of a snag when using it to try and convert audio files in ".vox" format (used on one VoiceXML platform) to ".wav" format (for use on another platform). I simply could not get SoX to convert my ".vox" files to ".wav" files successfully. Every ".wav" audio file I generated was garbled nonsense that sounded only vaguely like human speech.

Trying things like...
<pre>~$ sox myfile.vox myfile.wav
</pre>
or
<pre>~$ sox -r 8000 -t vox -c 1 myfile.vox myfile.wav
</pre>
...failed miserably. I had a hard time figuring out why. I could find almost nothing helpful on the web.

According to the SoX documentation:
<blockquote>SoX attempts to determine the file type of input files automatically by looking at the header of the audio file. When it is unable to detect the file type or if its an output file then it uses the file extension of the file to determine what type of file format handler to use.</blockquote>
The thing about ".vox" files is that <a href="http://en.wikipedia.org/wiki/VOX_%28file_format%29" target="_blank">they are headerless</a> -- they don't have descriptive information that can be read in by utilities that play these files. The utility has to be told things like sample rate, encoding format, etc. But based on my read of the documentation, I thought that SoX would pick this up through the ".vox" extension on the file.

After a number of unsuccessful attempts, I decided to try again taking a bit of a different approach. The SoX documentation also states that "audio data can usually be totally described by four characteristics"
<ul>
	<li>The sample rate;</li>
	<li>The precision the data is stored in;</li>
	<li>The data encoding, and;</li>
	<li>The number of channels</li>
</ul>
When I told SoX to treat the input file as a raw file (i.e., ignore the ".vox" extension), and then specifically told SoX each of the four characteristics of my file, it finally worked.
<pre>~$ sox -t raw -r 8000 -c 1 -U -b myfile.vox myfile.wav
</pre>
<ul>
	<li>The -t option tells SoX that the input file is raw (headerless) audio</li>
	<li>The -r option tells SoX the sample rate of the input file</li>
	<li>The -c option tells SoX that the input file has one channel (mono)</li>
	<li>The -U option tells SoX that the data encoding is u-law</li>
	<li>The -b option tells SoX that the data size is in bytes</li>
</ul>
My generated ".wav" files are clear as a bell and sound great. In the end, it turned out not to be a SoX issue as much as a lack of information on how to use it properly with ".vox" files, which is a rather old format but is still used on many telephony platforms. I hope this post helps someone else down the line struggling with the same issue.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>107</wp:post_id>
  <wp:post_date>2006-11-16 16:35:31</wp:post_date>
  <wp:post_date_gmt>2006-11-16 20:35:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>using-sox-on-headerless-vox-audio-files</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:comment>
    <wp:comment_id>34</wp:comment_id>
    <wp:comment_author><![CDATA[kearney]]></wp:comment_author>
    <wp:comment_author_email>yenrak@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.79.195.201</wp:comment_author_IP>
    <wp:comment_date>2007-10-25 13:02:32</wp:comment_date>
    <wp:comment_date_gmt>2007-10-25 17:02:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You're right, articles about converting vox files are scant.  So, I found your article tremendously helpful.

I was able to convert vox files to wav on Mac PPC, 10.4 with sox14 with the above commands.

Thanks again!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-10-25 17:02:32</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>35</wp:comment_id>
    <wp:comment_author><![CDATA[mbeach]]></wp:comment_author>
    <wp:comment_author_email>mbeaches@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.89.237.29</wp:comment_author_IP>
    <wp:comment_date>2008-10-16 14:07:11</wp:comment_date>
    <wp:comment_date_gmt>2008-10-16 18:07:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I had a similar issue converting vox files, the command provided failed for me, yeilding:
unknown file type 'raw'

installing libsox-fmt-all fixed that for me on a Ubuntu Hardy setup.  Apparently that lib does not get picked up with the 'sox' program by default.

Works flawlessly after that - thanks for the article.
mb.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-10-16 18:07:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>36</wp:comment_id>
    <wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>75.150.49.141</wp:comment_author_IP>
    <wp:comment_date>2008-10-16 17:06:28</wp:comment_date>
    <wp:comment_date_gmt>2008-10-16 17:06:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<i>
installing libsox-fmt-all fixed that for me on a Ubuntu Hardy setup. Apparently that lib does not get picked up with the 'sox' program by default.
</i>

Good to know.  I'm going to add that detail to the post.  Thanks!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-10-16 21:06:28</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>4643</wp:comment_id>
    <wp:comment_author><![CDATA[Chris]]></wp:comment_author>
    <wp:comment_author_email>chris.clemson@ihg.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>152.134.100.100</wp:comment_author_IP>
    <wp:comment_date>2016-02-03 09:19:31</wp:comment_date>
    <wp:comment_date_gmt>2016-02-03 09:19:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thank you! This technique worked perfectly on our Esnatech Office-Linx voicemail system message files.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1456150399.0558249950408935546875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"mheadd";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1454491179.647140026092529296875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1456150398</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1454495142.573030948638916015625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1456150398</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>New Version of Vocal Democracy Released</title>
  <link>http://voiceingov.org/2006/11/28/new-version-of-vocal-democracy-released/</link>
  <pubDate>Tue, 28 Nov 2006 22:34:57 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=108</guid>
  <description/>
  <content:encoded><![CDATA[A new release of <a href="http://vdemocracy.sourceforge.net/">Vocal Democracy</a> is now available "” the improvements keep coming. I'm very happy with where this project is right now.

There is still a lot of work to be done, but I hope to have another release out before the end of the year.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>108</wp:post_id>
  <wp:post_date>2006-11-28 18:34:57</wp:post_date>
  <wp:post_date_gmt>2006-11-28 22:34:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>new-version-of-vocal-democracy-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="phone-voting"><![CDATA[Phone Voting]]></category>
</item>
<item>
  <title>Audio Control in VoiceXML</title>
  <link>http://voiceingov.org/2006/12/22/audio-control-in-voicexml/</link>
  <pubDate>Fri, 22 Dec 2006 21:32:05 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=109</guid>
  <description/>
  <content:encoded><![CDATA[<p>One of the questions I hear most from VoiceXML developers relates to audio control features in VoiceXML.  VoiceXML does not natively support the ability to "rewind" and "fast forward" through audio files, but some vendors provide this functionality as extensions on their platforms.</p>

<p>While this is nice, I like to keep my code as portable as possible.  Given that VoiceXML platforms are <a href="http://www.w3.org/TR/voicexml20/#dmlAAudioFormats" target="_blank">required to support the WAV audio format</a> and this format is generally well understood, it should be relatively easy to construct server-side logic to simulate "rewind" and "fast forward" functionality.</p>

<p>For this example, I use PHP but I'm confident that it could be replicated in many other languages.  There are several key ingredients to this example:</p>

<ul>
<li>An understanding of the <a href="http://ccrma.stanford.edu/courses/422/projects/WaveFormat/" target="_blank">layout of a WAV file</a>.  There are two portions that we are most interested in - the <strong>Subchunk2Size</strong> (which contains information on the size of the audio file) and audio data itself.</li>
<li>A platform that supports the VoiceXML 2.1 specification.  If we're going to implement these features, we need to be able to determine where in the playback of an audio file a caller issues a command.  The &lt;mark&gt; element does this nicely, and it is supported on the <a href="http://www.voxeo.com/prophecy/" target="_blank">Voxeo Prophecy platform</a>.</li>
</ul>

<p>The approach is simple.  Using the &lt;mark&gt; element, and a preset interval for moving backwards and forwards (I use a setting of 5 seconds in this example) we "rebuild" the audio file each time a user issues a command.  A PHP script takes in a parameter for the offset and reads in the source file from that point, and then outputs the contents of the audio file from that point.</p>

<p>For example, if a caller listens to an audio file for 10 seconds and then issues a command to "fast forward" we need to have our audio file begin playing at a point 15 seconds from the beginning of the file (10 + 5 = 15).</p>

<p>If the caller then listens to the file for 10 more seconds, and issues a command to rewind, we need to play the file starting at an offset of 20 seconds (15 + 10 = 25; 25 - 5 = 20).  Using the PHP "<a href="http://us3.php.net/manual/en/function.fread.php" target="_blank">fread</a>" and "<a href="http://us3.php.net/manual/en/function.unpack.php" target="_blank">unpack</a>" functions, we can read in the contents of an audio file on the fly, based on how long the caller has listened to the file and the command they have issued.</p>

<p>A pair of very simple scripts can be <a href="http://www.voiceingov.org/xfiles/audio_control.zip">downloaded here</a>.  Please bear in mind that these are still very rough, but they do demonstrate the basic idea.</p>

<p>Any comments or suggestions are welcome.</p>

<p>Note -- this example is built on ideas and code originally obtained from <a href="http://snipplr.com" target="_blank">Snippler</a>.  The example that I used can be found <a href="http://snipplr.com/view/285/read-wav-header-and-calculate-duration/" target="_blank">here</a>.  </p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>109</wp:post_id>
  <wp:post_date>2006-12-22 17:32:05</wp:post_date>
  <wp:post_date_gmt>2006-12-22 21:32:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>audio-control-in-voicexml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[109]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[109]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Building Better IVRs</title>
  <link>http://voiceingov.org/2007/02/15/building-better-ivrs/</link>
  <pubDate>Thu, 15 Feb 2007 18:06:33 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=110</guid>
  <description/>
  <content:encoded><![CDATA[Anyone who builds IVRs for a living is aware of the <a href="http://www.gethuman.com/" target="_blank">gethuman project</a>.  This project, started by a fellow named Paul English in response to a fairly crappy phone service experience by a member of his family, aims to provide consumers with information on how to bypass IVR systems.

The project has also developed a <a href="http://www.gethuman.com/standard/v1.0.html" target="_blank">classification and rating system</a> to grade the IVRs of the top 500 organizations it maintains information about.  Not surprisingly, most of the organizations ranked received an F on their current phone systems.  Those organizations that seemed to do well (based on my very unscientific review of the gethuman 500 database) appear to bypass IVRs entirely and go directly to an agent.

There are some <a href="http://www.gethuman.com/us/index.html#government" target="_blank">government entities</a> on this list, all of which are federal agencies of one sort or another.  Since almost every government entity (both large and small) is now utilizing some sort of IVR system, and since the telephone is still one of the <a href="http://www.pewinternet.org/PPF/r/128/report_display.asp" target="_blank">primary methods</a> for citizens to contact their government, it would behoove governments to take notice of the gethuman standard.

Since VoiceXML is the defacto standard for developing IVR systems, I believe that some of the criteria included in the gethuman standard can be translated directly into best practices for coding VoiceXML applications.  The following is a quick summary of suggested coding practices to meet specific gethuman ranking criteria.  (Note, not all of the criteria used to rank IVR systems under the gethuman standard can be addressed using VoiceXML coding techniques.  As such, the following represents a subset of the relevant gethuman criteria.)

<strong>1. The caller must always be able to dial 0 or to say "operator" to queue for a human.</strong>

<blockquote>The VoiceXML &lt;link&gt; element is the best way to provide a global transfer option.  Using &lt;link&gt;, we can easily create a way for a caller to transfer to a representative at any point during an IVR.

The following example shows a link element that will fire off a user defined event called "help" when either the 0 DTMF key is pressed, or the caller says any of the items defined in the grammar.  Placing this call in the application root document gives it scope in any part of the IVR application:

&lt;link dtmf="0" event="help"&gt;
&lt;grammar mode="voice" version="1.0" root="R_1"&gt;
    &lt;rule id="R_1" scope="public"&gt;
       &lt;one-of&gt;
         &lt;item&gt;transfer&lt;/item&gt;
         &lt;item&gt;operator&lt;/item&gt;
         &lt;item&gt;representative&lt;/item&gt;
         &lt;item&gt;help&lt;/item&gt;
       &lt;/one-of&gt;
    &lt;/rule&gt;
  &lt;/grammar&gt;
&lt;/link&gt;

We also need a handler for this event in the same scope as the &lt;link&gt;:

&lt;catch event="help"&gt;
  &lt;assign name="callerSelection" expr="Transfer"/&gt;
  &lt;prompt&gt;Please hold for the next available representative.&lt;/prompt&gt;
  &lt;goto next="#transfer"/&gt;
&lt;/catch&gt;

If you give this &lt;link&gt; application-level scope, you need to be conscious of fields where you may be using similar grammar elements.  So, for example, if your IVR has a field in it that also uses the 0 DTMF key or one of the words in the &lt;link&gt; grammar, make sure that you specify which grammar the field should use by setting the "modal" attribute on your &lt;field&gt; item.

</blockquote>

<strong>2. Callers should never be asked to repeat any information (name, full account number, description of issue, etc.) provided to a human or an automated system during a call.</strong>

<blockquote>This is more a <acronym title="Computer Telephony Integration">CTI</acronym> issue than anything else, but there are some things that can be done within a VoiceXML application to make sure that the appropriate information is passed to an agent when a call is transferred.

The VoiceXML specification describes the "aai" attribute of the &lt;transfer&gt; tag.  This attribute allows a VoiceXML application to pass data to a called party.  Additionally, some VoiceXML platforms allow a developer to set the ANI when making a transfer:

&lt;transfer dest="tel:+13159999999;ani=8077894563"/&gt;

This way, an agent does not need to ask the caller (again) for their telephone number.  Unfortunately, both of these features are somewhat unevenly implemented across platforms.  Improved support for passing information along with a call transfer is certainly one area where VoiceXML could be improved.

</blockquote>

<strong>3. Speech applications should provide touch-tone (DTMF) fall-back.</strong>

<blockquote>In a VoiceXML application, this boils down to setting the "inputmodes" property.  <a href="http://www.voiceingov.org/blog/?p=90">I've written on this before</a> in a previous post where I lay out options for detecting the type of input mode, and changing the "œinputmodes" property within an application where appropriate.

</blockquote>

<strong>4. Callers should not be forced to listen to long/verbose prompts.</strong>

<strong>5. Callers should be able to interrupt prompts (via dial-through for DTMF applications and/or via barge-in for speech applications) whenever doing so will enable the user to complete their task more efficiently.</strong>

<blockquote>These two criteria are related, and deserve to be considered in unison.  VoiceXML developers can allow a caller to break into a prompt either by setting the global "bargein" property, or by setting the "bargein" attribute on a &lt;prompt&gt; tag.

Bear in mind that an Automatic Speech Recognition (ASR) engine will usually attempt a recognition when what it thinks is spoken input is detected; even if this is just background noise, static or a caller mumbling.  Without some careful thought and planning, allowing indiscriminate bargein can cause more problems than it solves, particularly for speech applications.

To allow only DTMF input to bargein, set the "bargein" property appropriately:

&lt;property name="bargein" value="dtmf"/&gt;

Additionally, using the "bargeintype" property can help ensure that bargains only occur when there is an active grammar matched.  Finally, you can use the "marktime" property of the application.lastresult$ object to determine where in a prompt a caller barged in (this is a new feature oF VoiceXML 2.1).  This can be helpful in determining If the bargein was accidental or purposeful.

</blockquote>

<strong>6. Do not disconnect for user errors, including when there are no perceived key presses (as the caller might be on a rotary phone); instead queue for a human operator and/or offer the choice for call-back.</strong>

<blockquote>Although there aren't a lot of rotary callers out there, there are some.  And since handling multiple noinputs/nomatches is pretty straightforward in VoiceXML, there is no reason not to include this in your applications:

&lt;catch event="noinput nomatch" count="3"&gt;
  &lt;prompt&gt; Please hold while I transfer you.&lt;/prompt&gt;
  &lt;goto next="#transfer"/&gt;
&lt;/catch&gt;

</blockquote>

Despite some protestations to the contrary, IVRs do have their place in the customer service equation.  Used correctly governments can go a long toward improving the service they provide to citizens by implementing IVR systems.

However, the governments that use IVRs and the developers that build them must be aware of their limitations, and design appropriately for callers who cannot (or will not) talk to a computer.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>110</wp:post_id>
  <wp:post_date>2007-02-15 14:06:33</wp:post_date>
  <wp:post_date_gmt>2007-02-15 18:06:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>building-better-ivrs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[3801781]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Patent Reform and the Future of VoIP</title>
  <link>http://voiceingov.org/2007/04/26/patent-reform-and-the-future-of-voip/</link>
  <pubDate>Thu, 26 Apr 2007 12:00:50 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=111</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://news.com.com/Is+cable+in+Verizons+crosshairs/2100-7352_3-6175725.html?tag=st.prev" target="_blank">Interesting article</a> on the recent patent infringement ruling against Vonage, and how it could potentially impact other VoIP providers.

It underscores the real need to <a href="http://news.zdnet.com/2100-9593_22-5862506.html" target="_blank">overhaul the current U.S. patent system</a>.  In the words of Gerald Faulhaber, a professor in the business and public policy department for The Wharton School of Business (quoted in the article):

<blockquote>It has gotten out of control. People are getting patents for all kinds of crazy stuff.</blockquote>

Amen, Professor!

<strong>UPDATE</strong>:  Seems that Vonage has set up their own protest site.  See it <a href="http://www1.freetocompete.com/" target="_blank">here</a>.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>111</wp:post_id>
  <wp:post_date>2007-04-26 08:00:50</wp:post_date>
  <wp:post_date_gmt>2007-04-26 12:00:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>patent-reform-and-the-future-of-voip</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:comment>
    <wp:comment_id>37</wp:comment_id>
    <wp:comment_author><![CDATA[Dan Roberts]]></wp:comment_author>
    <wp:comment_author_email>danroberts@hostedvoipinfo.net</wp:comment_author_email>
    <wp:comment_author_url>http://www.avadtechnologies.com/</wp:comment_author_url>
    <wp:comment_author_IP>70.91.147.101</wp:comment_author_IP>
    <wp:comment_date>2008-11-22 18:26:05</wp:comment_date>
    <wp:comment_date_gmt>2008-11-22 22:26:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If the patent problem doesn't kill Vonage, the competition will.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-11-22 22:26:05</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Good stuff from the W3C</title>
  <link>http://voiceingov.org/2007/04/30/good-stuff-from-the-w3c/</link>
  <pubDate>Tue, 01 May 2007 00:05:11 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=112</guid>
  <description/>
  <content:encoded><![CDATA[<p>The World Wide Web Consortium has been busy recently advancing standards that make up the Speech Interface Framework:</p>
<ul>
<li>VoiceXML 2.1 is now a <a href="http://www.w3.org/News/2007#item78">Proposed Recommendation</a>.  No surprise here, as most platforms have already adopted the changes in the 2.1 spec.</li>
<li>Semantic Interpretation  is a W3C <a href="http://www.w3.org/News/2007#item65">Recommendation</a>.  This is an important one that <a href="http://www.voiceingov.org/blog/?p=82">I have written on before</a>.  There is a clear need for some standardization among ASR vendors with respect to SI.</li>
</ul>
<p>It would be nice to see some more movement on the <a href="http://www.w3.org/TR/2007/WD-ccxml-20070119/">CCXML specification</a>.  Hopefully soon...</p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>112</wp:post_id>
  <wp:post_date>2007-04-30 20:05:11</wp:post_date>
  <wp:post_date_gmt>2007-05-01 00:05:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>good-stuff-from-the-w3c</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <wp:comment>
    <wp:comment_id>38</wp:comment_id>
    <wp:comment_author><![CDATA[RJAuburn]]></wp:comment_author>
    <wp:comment_author_email>rj@rjauburn.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.204.222.120</wp:comment_author_IP>
    <wp:comment_date>2007-05-18 09:17:21</wp:comment_date>
    <wp:comment_date_gmt>2007-05-18 13:17:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Expect to see CCXML to move to the next step very soon. We are just finishing up the final stages to get it ready for for Candidate Recommendation.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-05-18 13:17:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>39</wp:comment_id>
    <wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>69.138.81.171</wp:comment_author_IP>
    <wp:comment_date>2007-05-18 12:42:17</wp:comment_date>
    <wp:comment_date_gmt>2007-05-18 16:42:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good to hear -- Thanks, RJ!  Thanks for all of your hard work and leadership on the CCXML front.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2007-05-18 16:42:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Expensive != Secure</title>
  <link>http://voiceingov.org/2007/05/04/expensive-secure/</link>
  <pubDate>Fri, 04 May 2007 13:54:27 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=113</guid>
  <description/>
  <content:encoded><![CDATA[<p>One of the very first jobs I had after getting my undergraduate degree was working on a political campaign.  I learned first hand how tight campaigns can be with money "“ I was paid next to nothing for countless hours of work.  Lack of dough notwithstanding, I learned a lot and it opened up a number of opportunities for me down the road.</p>

<p>This first experience was a few years before websites started to be used in political campaigns (hope I didn't date myself there).  These days, having a campaign website is a requirement.  Still, I'm always amazed at how campaigns choose to invest "“ in terms of both money and time "“ in their websites.</p>

<p>There are plenty of ways to stand up a quality web site with a small outlay of actual dollars.  Clearly the prorogation of open source software has helped in this regard.  I currently volunteer for a campaign that has built <a href="http://www.johncarney.org" target="_blank">it's website</a> on the <acronym title="Linux, Apache, MySQL, PHP">LAMP stack</acronym>.  We use the phenomenally useful PHP blogging platform <a href="http://wordpress.org/" target="_blank">WordPress</a> for our site.  WordPress comes with an active community that contributes a wealth of different <a href="http://wordpress.org/extend/plugins/" target="_blank">plugins</a> that are available to do almost anything a campaign (or any other kind of endeavor) could need.</p>

<p>But investment of dollars is only part of the equation.  Anyone that works on a campaign website needs to be aware of <a href="http://www.cnn.com/2006/POLITICS/08/08/lieberman.website/" target="_blank">security issues</a> (at least the obvious ones), and must take steps to mitigate risks.  This is the part that is so often missed, even by campings with deep pockets.</p>

<p>I had occasion recently to peruse the website of an elected official rumored to be interested in the same job my candidate is running for.  Within about 2 minutes of looking at the site I happened upon a gaping security hole that looked like it was exposing sensitive information for the official in question, and a bunch of other campaigns.  I have no idea how long the hole existed, or if anyone else happened upon it.</p>

<p>Based on what I saw, the issue in question could probably be fixed with a one line change to the servers' Apache configuration file.  The server with the gaping hole is maintained by a third-party company that claims to be a leader in supporting campaigns through the use of technology.  The lesson here "“ ask your consultants about security, and if needed get an objective outside opinion.  This doesn't cost much (if anything) but does require some time and attention.</p>

<p>Fortunately for the official in question, my candidate likes a fair fight.  Our campaign contacted the other candidate with information on the security hole, and suggestions for how to work with their consultant to get it fixed.  Hopefully, they'll do this soon.</p>

<p>I'd like to think this will get us some good karma down the road in the event that the campaign gets ugly "“ we'll see...</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>113</wp:post_id>
  <wp:post_date>2007-05-04 09:54:27</wp:post_date>
  <wp:post_date_gmt>2007-05-04 13:54:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>expensive-secure</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Public Sector Asterisk</title>
  <link>http://voiceingov.org/2007/05/13/public-sector-asterisk/</link>
  <pubDate>Sun, 13 May 2007 12:47:24 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=114</guid>
  <description/>
  <content:encoded><![CDATA[Recently came across some information from a small city in Mississippi that is using Asterisk/Trixbox for it's <a href="http://web.vicksburg.org/vicksburg/Departments/IT/PhoneSystem/tabid/260/Default.aspx" target="_blank">internal phone system</a>.

<a href="http://www.vicksburg.org/" target="_blank">Vicksburg</a> is a city of about 26,000 in Western Mississippi that looks to have a roughly 200 extension Asterisk system in place for city employees.

It's nice to see governments making use of open source technologies, particularly Asterisk -- it <strong>isn't</strong> just for small businesses.  I wonder how many other small to medium sized governments are using a flavor of Asterisk for their phone systems? ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>114</wp:post_id>
  <wp:post_date>2007-05-13 08:47:24</wp:post_date>
  <wp:post_date_gmt>2007-05-13 12:47:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>public-sector-asterisk</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[114]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[114]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Top 5 Things to do after intalling Trixbox: #1</title>
  <link>http://voiceingov.org/2007/05/13/top-5-things-to-do-after-intalling-trixbox-1/</link>
  <pubDate>Sun, 13 May 2007 13:39:27 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=115</guid>
  <description/>
  <content:encoded><![CDATA[<p>Today I'll start a series that I've been meaning to commit to writing for some time.  The top 5 things to do after you finish installing Trixbox.</p>

<p><a href="http://www.trixbox.org/downloads">Trixbox 2.2</a> is now out, so if you've ever thought about setting up your own VoIP system I would strongly recommend giving Trixbox a try.  The Trixbox <a href="http://www.trixbox.org/forum">forums</a> provide a wealth of information, and there is some <a href="http://forge.trixbox.org/gf/project/trixbox2/wiki/?action=index">documentation</a> available from the Trixbox project itself.  However, most of the documentation focuses on the installation process, and does not provide a whole lot of information about what to do after your system is installed and running.</p>

<p>With this in mind, I'd like to share some of the things that I think are important to ensuring that your Trixbox system is running smoothly (and securely).</p>

<p>First things first -- we need to lock down <strong><acronym title="Secure Shell">SSH</acronym></strong>.</p>

<p>If your not familiar with SSH, you should <a href="http://www.suso.org/docs/shell/ssh.sdf">brush up</a> on this remote connection method.  Right out of the gate SSH is a more secure way of connecting to a Linux machine than alternatives like Telnet, but that doesn't mean it's perfect.</p>

<p>At a minimum, the following steps should be taken to improve SSH security:</p>

<ul>
<li>Run SSH on an alternate port (the default is port 22).</li>
<li>Only use the SSH 2 protocol (SSH 1 is not as secure as 2)</li>
<li>Do not allow root logins via SSH (in fact, it's a much better approach to only allow specifically named users to log in via SSH, but never root).</li>
<li>Use public key authentication, instead of passwords.</li>
</ul>
<p>There are a number of other helpful tips and tricks available <a href="http://enterprise.linux.com/enterprise/07/03/26/1423232.shtml?tid=129&amp;tid=100&amp;tid=35">here</a>.</p>

<p>Next up, we'll walk through the process of backing up a Trixbox system and transferring the backup to a remote machine using scp and cron.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>115</wp:post_id>
  <wp:post_date>2007-05-13 09:39:27</wp:post_date>
  <wp:post_date_gmt>2007-05-13 13:39:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>top-5-things-to-do-after-intalling-trixbox-1</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="trixbox"><![CDATA[trixbox]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[115]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[115]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>More on the need for patent reform</title>
  <link>http://voiceingov.org/2007/05/15/more-on-the-need-for-patent-reform/</link>
  <pubDate>Tue, 15 May 2007 12:53:38 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=116</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://money.cnn.com/magazines/fortune/fortune_archive/2007/05/28/100033867/index.htm" target="_blank">Great article</a> on the current state of software patents and the need for fundamental patent reform, specifically as it relates to software.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>116</wp:post_id>
  <wp:post_date>2007-05-15 08:53:38</wp:post_date>
  <wp:post_date_gmt>2007-05-15 12:53:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-on-the-need-for-patent-reform</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>Top 5 Things to do after intalling Trixbox: #2</title>
  <link>http://voiceingov.org/2007/05/16/top-5-things-to-do-after-intalling-trixbox-2/</link>
  <pubDate>Wed, 16 May 2007 15:31:11 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=117</guid>
  <description/>
  <content:encoded><![CDATA[<p>Once you've got your Trixbox all set up, you need to think about backups "“ what happens if your system needs to be restored, or if you're doing and upgrade (say from version 2.0 to 2.2)?</p>

<p>The FreePBX module in Trixbox has a handy "System Backup" feature "“ in FreePBX, go to Tools-&gt;Backup &amp; Restore.</p>

<p>Click on the "Add Backup Schedule" link and name your new schedule "“ I personally take the simple approach of just doing a weekly backup on Sunday night.</p>

<p>When your backup is created, Trixbox places a ".tar.gz" file in the /var/lib/asterisk/backups/ directory.  So, if you created a schedule called "Weekly" your backup file would be placed in the directory /var/lib/asterisk/backups/Weekly/.  Here these files will stay "“ a new one is created each time your scheduled backup is run "“ unless you do something with them.</p>

<p>For obvious reasons, we want to move these backup files to another server for safe keeping.  Additionally, one we've successfully moved our backup, we want to clean up the old files from our backup directory.</p>

<p>There are <a href="http://www.sureteq.com/asterisk/trixboxv2.2.htm#18.1_-_Backing_up_Trixbox" target="_blank">any number</a> of ways of doing this.  Here is my preferred method:</p>



<blockquote><p>Create a new user on your Trixbox machine, and add that user to the "asterisk" group.  (The user will need to be a part of this group to access the backups directory.)</p>

<strong>useradd -G asterisk backup
passwd backup</strong>

<p>Log in as this new user, and create a key pair for ssh connections.  When prompted to enter a pass phrase, simply hit enter (blank pass phrase).</p>

<strong>ssh-keygen -t dsa</strong>

<p>Export your public key to the machine where you will be storing your backups.</p>

<strong>scp ~/.ssh/id_dsa.pub username@xxx.xxx.xxx.xxx:.ssh/authorized_keys</strong>

<p>Make sure you can SSH to the machine where you will store your back up files.  You'll want to make sure that key-based authentication is working (i.e., that your not prompted for a password).  </p>

<strong>ssh  username@xxx.xxx.xxx.xxx</strong>

<p>Make sure you can securely copy files to the machine where you will store your back up files (again, make sure that your not prompted for a password).</p>
<strong>scp /var/lib/asterisk/backups/Weekly/* username@xxx.xxx.xxx.xxx:trixbox_backups/</strong>

</blockquote>

<p>If all of the above steps went successfully, you are now ready to set up your automated process.  We'll use CRON to do this.</p>



<blockquote><p>Log on as the new backup user on your Trixbox machine.</p>

<p>Create a new crontab for this user.</p>

<strong>crontab -e
</strong>
<p>Insert cron entries to copy backup files to the remote machine, and to clean up old files after they have been moved.</p>

<strong>01 0 * * 1 scp /var/lib/asterisk/backups/Weekly/* username@xxx.xxx.xxx.xxx:trixbox_backups/
<br />
01 1 * * 1 rm -f /var/lib/asterisk/backups/Weekly/*</strong>

<p>The first entry will move our weekly backup file at 12:01 a.m. on Monday morning to our remote server.   The second entry will clear the Weekly directory an hour later.  This way, when you go to the office on Monday, all of your backup process are done and your ready to start the week on a good note.</p>

</blockquote>

<p>In the next article, we'll discuss how to monitor your Trixbox to make sure that it is performing properly.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>117</wp:post_id>
  <wp:post_date>2007-05-16 11:31:11</wp:post_date>
  <wp:post_date_gmt>2007-05-16 15:31:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>top-5-things-to-do-after-intalling-trixbox-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="trixbox"><![CDATA[trixbox]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[117]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[117]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Die Zombies Die!</title>
  <link>http://voiceingov.org/2007/05/16/die-zombies-die/</link>
  <pubDate>Wed, 16 May 2007 16:25:07 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=118</guid>
  <description/>
  <content:encoded><![CDATA[Yes.  I admit it.  I created a zombie.  Very recently in fact.  It was ugly (embarrassingly so) and, like all zombies, very hard to kill once it had been created.

No, this is not an excerpt from a <a href="http://en.wikipedia.org/wiki/Image:Zombies_on_broadway.jpg" target="_blank">Bela Lugosi movie</a> "“ I refer to something far more horrifying.  A zombie session in CCXML.

The route to avoiding zombie sessions is pretty straightforward "“ just follow the rules, set up your handlers properly and all will be well.  Occasionally, however, mistakes are made and applications are not tested as thoroughly as they should be.

So as some self imposed penance, I've decided to list some tried and true methods for avoiding zombie sessions.  Nothing new here, but it helps to go over this stuff every once in a while.

<strong>Always &lt;exit&gt; properly</strong>

When catching errors, be very careful not to get fancy, especially with a handler that is meant to catch multiple types of errors.

<blockquote>&lt;transition event="error.*"&gt;
&lt;exit/&gt;
&lt;/transition&gt; </blockquote>

Some people try and get cute here, and execute logic inside this transition "“ be very careful.  If the logic has an error in it, you will enter a loop and have a really bad day.  I don't even like to put log statements in this kind of transition.  Log files are generally verbose enough to tell you what the problem is.

<strong>Order &lt;transition&gt;s carefully</strong>

When a CCXML file is executed, &lt;transition&gt; elements are executed in document order "“ even though a more appropriate &lt;transition&gt; for an event exists in a document, the CCXML platform will execute the first &lt;transition&gt; that matches the event/condition in document order.  So, even though you place your catch all error handler (like the one above) at the end of your file, if you have another problem in a different &lt;transition&gt;, it may never get executed.  For example, consider the following:

<blockquote>
&lt;transition event="error.semantic"&gt;
&lt;log expr="'This log statement has an error'"&gt;
&lt;!-- A semantic error in another part of my CCXML app will get me stuck here --&gt;
&lt;exit/&gt;
&lt;/transition&gt;

&lt;transition event="error.*"&gt;
&lt;exit/&gt;
&lt;/transition&gt;
</blockquote>

<strong>Set up your zombie killer in advance</strong>

Make it standard practice to send an event to the currently running session when the page loads to close things down after a certain period of time if the session doesn't end normally.



<blockquote>&lt;transition state="'initial'" event="ccxml.loaded"&gt;
&lt;send event="'sessionEnd'" target="session.id" delay="'600s'"/&gt;
&lt;/transition&gt;

&lt;transition event="sessionEnd"&gt;
&lt;/exit&gt;
&lt;/transition&gt;
</blockquote>


<strong>Test.  Test again.  Test some more...</strong>

The best way to ensure that your not going to create some zombie sessions (or do anything else really stupid) is to test thoroughly.

The best way to do this "“ in my humble opinion "“ is to download a copy of <a href="http://www.voxeo.com/prophecy/" target="_blank">Voxeo Prophecy</a> and use it to develop your application.  You can use Prophecy to test your application in your own environment before moving it to Voxeo hosting, or upgrading to a production version of Prophecy to run your app.

Be careful.  Follow these steps.  Avoid all zombies.  Good luck!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>118</wp:post_id>
  <wp:post_date>2007-05-16 12:25:07</wp:post_date>
  <wp:post_date_gmt>2007-05-16 16:25:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>die-zombies-die</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Wireless Philadelphia</title>
  <link>http://voiceingov.org/2007/05/23/wireless-philadelphia/</link>
  <pubDate>Wed, 23 May 2007 12:27:13 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=119</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://news.com.com/Philadelphia+Wi-Fi+project+advances/2100-7351_3-6186595.html?tag=nefd.top" target="_blank">Looks like</a> they'll be selling lots of <a href="http://us.accessories.skype.com/servlet/ControllerServlet?Action=DisplayPage&amp;Env=BASE&amp;Locale=en_US&amp;SiteID=skype&amp;id=ProductDetailsPage&amp;productID=66159700" target="_blank">WiFi phones</a> in Philly real soon.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>119</wp:post_id>
  <wp:post_date>2007-05-23 08:27:13</wp:post_date>
  <wp:post_date_gmt>2007-05-23 12:27:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>wireless-philadelphia</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>Fonality announces trixBox Pro</title>
  <link>http://voiceingov.org/2007/08/14/fonality-announces-trixbox-pro/</link>
  <pubDate>Tue, 14 Aug 2007 19:48:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=120</guid>
  <description/>
  <content:encoded><![CDATA[Some <a href="http://opensourcepbx.tmcnet.com/topics/open-source/articles/9539-fonality-launches-trixbox-pro-rebranded-pbxtra.htm" target="_blank">very cool news</a> today from Fonality, stewards of the trixBox project -- <a href="http://www.trixbox.com/products/trixbox-pro/" target="_blank">trixBox Pro</a> is essentially a blending of trixBox with Fonality's PBXtra, but the whole definitely seems to be greater than the sum of it's parts:
<blockquote>With trixBox Pro, users can enjoy both basic and many advanced VoIP features "” conferencing, unified messaging, presence features, embedded secure corporate chat, Outlook integration, and more.

Perhaps the most exciting new feature included with trixBox Pro is trixNet, the equivalent of a private VoIP peering service, which essentially connects trixBox Pro users to one another without connecting to the PSTN, regardless of the service provider either party uses.  When a user places a call, trixNet quickly checks its database to determine whether the called party is also part of trixNet, and if not, routes the call to the PSTN. Additionally, the system has also been designed to detect connection times and reroute calls to the PSTN if calls are not connected within one second.</blockquote>
What is even cooler -- trixNet is expected to be extended to trixBox CE (the stand alone version of trixBox) and to users of <a href="http://www.google.com/talk/" target="_blank">Google Talk</a> in the near future.

Nice -- can't wait to get mine!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>120</wp:post_id>
  <wp:post_date>2007-08-14 15:48:45</wp:post_date>
  <wp:post_date_gmt>2007-08-14 19:48:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fonality-announces-trixbox-pro</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="trixbox"><![CDATA[trixbox]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[120]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[120]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>IVR Systems Strengthen Democracy</title>
  <link>http://voiceingov.org/2007/10/16/ivr-systems-strengthen-democracy/</link>
  <pubDate>Tue, 16 Oct 2007 13:45:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=121</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>
<p>
When voters in Kenya and the Ukraine go to the polls this month, speech technologies from Angel.com will be there to make sure the elections run smoothly.
</p>
<p>The International Republican Institute (IRI), a Washington-based independent, nonprofit, nonpartisan organization that sends delegates to foreign countries to observe elections and report on violations of fair election practices, will use Angel.com's Virtual Call Center and IVR Survey applications to automate the reports that delegates file from the field in those countries. IRI first used the applications during local and presidential elections in Nigeria in mid-April.</p></blockquote>

<p>Full story <a href="http://www.speechtechmag.com/Articles/ReadArticle.aspx?ArticleID=39747" target="_blank">here</a>.</p>

<p>This is a great idea, and possibly something that could be useful in the upcoming presidential election next year.</p>

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>121</wp:post_id>
  <wp:post_date>2007-10-16 09:45:18</wp:post_date>
  <wp:post_date_gmt>2007-10-16 13:45:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ivr-systems-strengthen-democracy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="phone-voting"><![CDATA[Phone Voting]]></category>
</item>
<item>
  <title>W3C Publishes Revised Standards Plan</title>
  <link>http://voiceingov.org/2007/11/27/w3c-publishes-revised-standards-plan/</link>
  <pubDate>Tue, 27 Nov 2007 17:37:05 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=122</guid>
  <description/>
  <content:encoded><![CDATA[New on the W3C Voice Browser Activity site is the addition of a <a href="http://www.w3.org/Voice/#plan">new schedule</a> for the release of some major voice application standards.  There is some very cool stuff on tap for 2008.

First, it looks like the Call Control eXtensible Markup Language (CCXML) will finally reach full recommendation status next year.  The last call working draft was first published in June of 2005.  I've been jonesin' for this one <a href="http://www.voiceingov.org/blog/?p=112">for a while</a>.

Those looking for an easy to install yet powerful CCXML platform can try out the <a href="http://voxeo.com/prophecy/">Prophecy platform</a> from Voxeo.  The one downside is that it only runs on Windows, but it already supports most of the functionality laid out in the most recent CCXML last call working draft (released in January of 2007).  Those looking to run a CCXML interpreter on *NIX based systems can try the <a href="http://sourceforge.net/projects/oktopous/">Oktopous</a> platform.

Second, and maybe even more exciting, the first public working draft of VoiceXML 3.0 is expected to be released early next year.  According to the W3C, VoiceXML 3.0 will:

"...provide enhancements to existing dialog and media control, as well as major new features (e.g. modularization, a cleaner separation between data/flow/dialog, and asynchronous external eventing) to facilitate interoperability with external applications and media components."

Looks like the new year will be a happy one for voice application developers!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>122</wp:post_id>
  <wp:post_date>2007-11-27 13:37:05</wp:post_date>
  <wp:post_date_gmt>2007-11-27 17:37:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>w3c-publishes-revised-standards-plan</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>The State of the X+V Standard</title>
  <link>http://voiceingov.org/2007/11/29/the-state-of-the-xv-standard/</link>
  <pubDate>Thu, 29 Nov 2007 17:36:47 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=123</guid>
  <description/>
  <content:encoded><![CDATA[A very interesting new extension for the Firefox web browser became available recently on alphaWorks (IBM's site devoted to emerging technologies).  The <a href="http://www.alphaworks.ibm.com/tech/tadpole">"Tadpole" extension</a> implements the <a href="http://www.voiceingov.org/blog/?page_id=13">X+V specification</a> for the Firefox web browser.

Those already familiar with X+V know that the Opera browser has, for some time, <a href="http://dev.opera.com/articles/voice/">supported this language</a> for building multimodal applications.  However, a Firefox extension for X+V raises some additional possibilities -- a mashup between X+V and <a href="http://www.mozilla.org/projects/xul/" title="XML User Interface Language">XUL</a> anyone?

While I lack the courage to build the necessary <a href="http://www.alphaworks.ibm.com/tech/tadpole/requirements">software prerequisites</a> to run this extension (like the Opera browser's support for X+V, the Tadpole extension will only work on Windows) reading about it did inspire me to upgrade to the latest version of the Opera browser -- 9.24 -- and play around with some X+V samples.

It got me thinking about the X+V standard and where it's heading.  It's very likely that the W3C's work on the new VoiceXML 3.0 standard will incorporate changes meant to support multimodal applications.  A sneak preview of the new standard can be viewed <a href="http://www.w3.org/Voice/2006/voicexml3.pdf">on the W3C site</a>.

To say that I'm excited for the first public draft of the VoiceXML 3.0 standard next Spring would be a monumental understatement!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>123</wp:post_id>
  <wp:post_date>2007-11-29 13:36:47</wp:post_date>
  <wp:post_date_gmt>2007-11-29 17:36:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>the-state-of-the-xv-standard</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
</item>
<item>
  <title>Verizon to Open Cell Phones?</title>
  <link>http://voiceingov.org/2007/11/29/verizon-to-open-cell-phones/</link>
  <pubDate>Thu, 29 Nov 2007 18:04:56 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=124</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://www.nytimes.com/2007/11/28/technology/28phone.html?_r=1&amp;ref=technology&amp;oref=slogin">This</a> is big.  To understand the root cause of this, one need only look to Mountain View, California (the headquarters of Google).

It was Google that pressed the FCC to <a href="http://www.google.com/intl/en/press/pressrel/20070720_wireless.html">open up</a> the auction on the 700 Mhz spectrum.  And it was Google that got the ball rolling on the <a href="http://www.openhandsetalliance.com/">Open Handset Alliance</a>.

There is an interesting lesson that can be taken away from this:

Openness + Choice == Innovation!

Or, to quote Lowell McAdam, chief executive of Verizon Wireless:


<blockquote>"The trend we see here is an explosion of innovation.  People want to take so much of what's on the Internet and put it on the phone."</blockquote>


Lots of other places in the software world that could benefit from applying this philosophy.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>124</wp:post_id>
  <wp:post_date>2007-11-29 14:04:56</wp:post_date>
  <wp:post_date_gmt>2007-11-29 18:04:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>verizon-to-open-cell-phones</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[124]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[124]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Google to bid on Spectrum</title>
  <link>http://voiceingov.org/2007/11/30/google-to-bid-on-spectrum/</link>
  <pubDate>Fri, 30 Nov 2007 16:32:56 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=125</guid>
  <description/>
  <content:encoded><![CDATA[The reason for Verizon's decision to consider allowing third party applications and devices to run on their network becomes a little clearer:
<a href="http://www.news.com/Google-ready-to-bid-on-mobile-airwaves/2100-1039_3-6220806.html?tag=nefd.top">
Google ready to bid on mobile airwaves</a>

My question -- does Verizon's move mean they anticipate losing the spectrum auction to Google?

Something to ponder...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>125</wp:post_id>
  <wp:post_date>2007-11-30 12:32:56</wp:post_date>
  <wp:post_date_gmt>2007-11-30 16:32:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>google-to-bid-on-spectrum</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
</item>
<item>
  <title>A Good Year for Open Source </title>
  <link>http://voiceingov.org/2007/12/27/a-good-year-for-open-source/</link>
  <pubDate>Thu, 27 Dec 2007 13:13:01 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=126</guid>
  <description/>
  <content:encoded><![CDATA[It was a very good year for Open Source Software (OSS).  The annual end of year lists have <a href="http://www.informationweek.com/blog/main/archives/2007/12/top_five_openso.html">started to appear</a>.

Here are a couple of stories on my personal list of top OSS stories for 2007.

<strong><a href="http://www.openhandsetalliance.com/index.html">Google launches Open Handset Alliance</a></strong>.
Bringing the Linux OS to mobile phones and opening the mobile phone platform for developers to build real world applications.  In todays IT world, few landscapes are as closed as that of mobile devices.  Few companies have done more to open it up than Google.

<strong><a href="http://laptop.org/">One Laptop Per Child</a></strong>.
Bringing innovative laptops (running Linux) to the developing world.  Nicholas Negroponte and his team have been so successful that they now face competition from the likes of <a href="http://www.intel.com/intel/worldahead/classmatepc/">Intel</a>.  Yet it is the quirky visionary from MIT who has <a href="http://www.cnn.com/2007/TECH/ptech/12/25/onelaptop.onevillage.ap/index.html">delivered the superior product</a>:

<blockquote>"... no competitor approaches the XO in innovation. It is hard drive-free, runs on the Linux operating system and stretches wireless networks with 'mesh' technology that lets each computer in a village relay data to the others."</blockquote>

Yes it was a good year for OSS.  I'll probably think of several other stories as we count down to the <a href="http://www.timessquarenyc.org/nye/nye_ball.html">drop of the ball</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>126</wp:post_id>
  <wp:post_date>2007-12-27 09:13:01</wp:post_date>
  <wp:post_date_gmt>2007-12-27 13:13:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>a-good-year-for-open-source</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Mitigating SQL Injection Vulnerabilities in VoiceXML Applications</title>
  <link>http://voiceingov.org/2007/12/28/mitigating-sql-injection-vulnerabilities-in-voicexml-applications/</link>
  <pubDate>Fri, 28 Dec 2007 20:24:00 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=127</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://unixwiz.net/techtips/sql-injection.html">SQL Injection</a> is a well known technique for compromising web applications that suffer from vulnerabilities such as improper validation of user input.  It allows an attacker to "inject" SQL statements into web form inputs that are subsequently used in a database query.  When these inputs are not properly sanitized, an attacker can cause all sorts of trouble such as exposing sensitive information or destroying important data.</p>

<p>Most seasoned web developers understand the risk of SQL injection and follow best practices to guard against it.  Unfortunately, there are some VoiceXML and IVR developers (I've worked with them!) that do not fully appreciate the risk that SQL injection can pose for voice applications.  I've had some strange conversations with these folks, and heard just about every excuse in the book.  Here are the usual excuses and my responses to each:</p>

<p><em>"Users access my application through the telephone.  You can't inject SQL statements into a voice application over the phone..."</em></p>

<p>VoiceXML platforms communicate with web / application servers using HTTP.  Just because most of your users access it through the phone, doesn't mean someone can't point Firefox at your application server.  If your VoiceXML content is served up as straight XML it will display just fine in an ordinary browser (unless you've taken steps to prevent this -- see below).  In fact, this is how lots of developers troubleshoot and debug their applications.</p>

<p><em>"There are no links to the CCXML / VoiceXML documents that make up our application, and they aren't indexed by search engines.  No one can find them."</em></p>

<p>Ah, the old security by obscurity argument...  Not good enough!  There's nothing stopping someone from scanning your web server looking for specific documents.  If it's accessible on your web server, even if you think no one knows where it is, consider it public information.</p>

<p><em>"Our application servers are behind a firewall and aren't accessible from outside our network.  The only connection to the outside world are the phone lines coming into our call center."</em></p>

<p>That may be true (its not "“ I assume that there is Internet access in your call center.  Doh!), but even if it is it just means your safe from outside attacks.  There isn't anything stopping anyone from inside your network from getting cute.   Still think your safe?</p>

<p>To boil it down, there is no good excuse for not taking steps to avoid SQL injection attacks in voice applications.</p>

<h3>What can be done?</h3>

<p>First and foremost, voice developers should have a thorough understanding of the issue and take the appropriate steps to cleanse user input.  User input is anything that a user can possibly submit to your application "“ you may have control over what selections a user can make in your voice application, but an attacker that is "footprinting" your application with a browser can put in anything they want.</p>

<p>The best way to mitigate the risk of SQL injection attacks against voice applications is (not surprisingly) identical to that for other kinds of web applications.  Follow the <a href="http://www.owasp.org/index.php/Top_10_2007-A2">checklist provided by Open Web Application Security Project</a>.  If I can quote Brad (Judge Reinhold) from Fast Times at Ridgemont High: "Learn it... Know it... Live it!"</p>

<h3>Some Additional Considerations for Voice Applications</h3>

<p>While it's true that voice applications face the same risks as other kinds of web applications when it comes to SQL injection attacks, there are some differences from traditional web applications that can be leveraged to add greater security (or to at least make SQL injection tougher).</p>

<p>Most SQL injection attacks usually begin with the process of "footprinting" -- an attacker will usually view the source HTML for a web site and determine what variables are being submitted by a web form, and the URL that they are being submitted to.  The attacker will then try and manipulate the values to break the SQL statement that is being constructed with the submitted values.  When this happens, valuable information can be gleaned from the behavior of the web application, including any error messages or warnings that are displayed to the end user.</p>

<p>It's hard to prevent people from looking at the source code of a web site "“ visual web sites generally have to be available to respond to requests from any browser that requests a page.  They work on the standard HTTP port (port 80).  Otherwise, visitors would have a hard time seeing and using a web site and it would probably defeat the purpose of building it in the first place.</p>

<p>VoiceXML applications are different.  Users do not interact directly with the "browser" that is requesting pages from the web server -- they interact with a telephone.  A web server that is interacting with a VoiceXML browser does not need to be available to <strong>any</strong> browser making a request "“ it only needs to be available to the VoiceXML browser(s) that it is set up to interact with.</p>

<p>One method of obscuring VoiceXML pages from prying eyes (and reducing the risk of footprinting) is to lock down access to a voice application server, so that it only responds to requests from the IP address(es) of the VoiceXML browser(s) it is set up for.  There are several ways to do this:</p>

<ul>
<li>Configure the firewall sitting in front of the server to deny requests from any IP address except those of the VoiceXML browser(s).</li>
<li><a href="http://www.linux-hero.com/howto/network-security-hosts-allow-and-hosts-deny">Configure the server</a> itself so that only specified IP addresses can access services like http.  On Linux this will involve configuring hosts.allow and hosts.deny.</li>
<li>Including code in your application to check the IP address of the requesting party to make sure that it is legitimate.  Probably not the most efficient or elegant way of doing it, but certainly better than nothing.</li>
</ul>

<p>In PHP, this last point might look something like:</p>

<blockquote><p>
if($_SERVER['REMOTE_ADDR'] != "myValidIP") {
&nbsp;&nbsp;header('HTTP/1.1 404 Not Found');
&nbsp;&nbsp;exit();
}
</p></blockquote>

<p>Another alternative is to <a href="http://httpd.apache.org/docs/1.3/mod/core.html#port">run your web server on an alternate port</a> "“ there isn't any reason that the server responding to requests from your VoiceXML browser needs to run on port 80.  (Note "“ this really doesn't prevent anyone who knows how to use <a href="http://netcat.sourceforge.net/">netcat</a> from scanning your server to see what ports are open, but it makes life a bit harder for the average person intent on mischief.)</p>

<p>A final thought on this topic is to limit the requests that your web server will respond to by predicating the response on the MIME types listed in the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">HTTP Accept header</a>.  This header tells the web server what kind of content the requesting browser can consume.  Many visual web browsers make their requests with the wildcard */* telling the server to send any content back.  VoiceXML browsers <strong>should</strong> include the appropriate MIME type for VoiceXML content ("application/voicexml+xml") in their HTTP requests.  This would allow someone so inclined to look for this MIME type on incoming requests, and to only consider requests that include it as legitimate.</p>

<p>I'll have more on this last point another time.  For now, <a href="http://www.owasp.org/index.php/Top_10_2007-A2">read up on the checklist</a> at the OWASP project.  Have a safe and happy New Year!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>127</wp:post_id>
  <wp:post_date>2007-12-28 16:24:00</wp:post_date>
  <wp:post_date_gmt>2007-12-28 20:24:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>mitigating-sql-injection-vulnerabilities-in-voicexml-applications</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_34fa5068c22eea0f7e6935376dd8a655</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7cdce40002da9ef5c5492281292a736c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3c84b794d0afc6a139613a3f1ec8d840</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e04801dd589692056ba7740a8e354211</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_23db829cbdd9272674b900eae981fba1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What's MIME is Not Yours</title>
  <link>http://voiceingov.org/2008/01/01/whats-mime-is-not-yours/</link>
  <pubDate>Tue, 01 Jan 2008 16:50:11 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=128</guid>
  <description/>
  <content:encoded><![CDATA[Continuing on the theme of safety and security in VoiceXML applications, I've been thinking a lot lately about MIME types and how VoiceXML browsers request content from a web server.

When any browser (VoiceXML or otherwise) requests a document from a server, it sends along information in the request telling the server what media types it can consume. This information is usually conveyed in the HTTP accept header as a MIME type. A VoiceXML browser should explicitly request documents from a web server using the VoiceXML MIME type ("application/voicexml+xml") and servers should use this MIME type when responding to such requests (instead of sending back plain old "text/xml").

If a browser can't consume VoiceXML, what's the point of responding with it (unless were doing something legitimate, like debugging). It was with this thought in mind that I decided to throw together a quick script to inspect the Accept header on HTTP requests and to only send back VoiceXML content if the appropriate MIME type is included in the request.
<h3>Classes for Inspecting HTTP Headers</h3>
This example will use two small PHP classes to inspect HTTP headers. The parent class looks like this:
<pre>
// A simple parent class to read HTTP request headers

class readHeaders {

Â Â Â  private $httpHeaderArray;

Â Â Â  function __construct(Array $headerArray) {
Â Â Â Â Â  $this-&gt;httpHeaderArray = $headerArray;
Â Â Â  }

Â Â Â  function getHeaderCount() {
Â Â Â Â Â  return count($this-&gt;httpHeaderArray);
Â Â Â  }

Â Â Â  function getHeaderValue($name) {
Â Â Â Â Â  try {
Â Â Â Â Â Â Â  if(isset($this-&gt;httpHeaderArray[$name])) {
Â Â Â Â Â Â Â Â Â  return $this-&gt;httpHeaderArray[$name];
Â Â Â Â Â Â Â  } else {
Â Â Â Â Â Â Â Â Â  return 'Sorry.Â  Could not find that header.';
Â Â Â Â Â Â Â  }
Â Â Â Â Â  }

Â Â Â Â Â  catch (Exception $e) {
Â Â Â Â Â Â Â  return 'There was a problem: '.$e-&gt;getMessage();
Â Â Â Â Â  }
Â Â Â  }
Â  }

</pre>

The class is instantiated with an array containing all of the HTTP headers that are sent with the request. There are two methods; one to determine the number of headers values and the other to retrieve a specific header value.

The child class for our example looks like this:
<pre>
  // A simple child class to inspect the HTTP Accept header
  class parseAcceptHeader extends readHeaders {

    function __construct(Array $headerArray) {

      parent::__construct($headerArray);
    }

    function parseHeader($pattern) {

      $acceptHeaderValue = parent::getHeaderValue('accept');

      if(@strstr($acceptHeaderValue, $pattern)) {
        return true;
      } else {
        return false;
      }

    }
  }

</pre>
This class uses a specific pattern (passed in to its one an only method as a string) and looks for it in the accept header. We return a boolean value depending on whether the string is found in the header value (note "“ many browsers, including VoiceXML browsers, will use a comma delimited string of different MIME types in the accept header)
<h3>Using the HTTP Header Inspection Classes</h3>
Now that we have our two simple classes, we use them like so:
<pre>
  // Get HTTP Request headers
  $headers = apache_request_headers();

  // Instantiate new object to inspect Accept header
  $myValue = new parseAcceptHeader($headers);
  $myPattern = 'application/voicexml+xml';

  /*
   If the requesting browser doesn't explicitly accept VoiceXML
   give it a 404 error
 */
  if(!$myValue-&gt;parseHeader($myPattern)) {

    header('HTTP/1.0 404 Not Found');
    exit();

  }

  // Otherwise, send the appropriate MIME type back in the response
  header('Content-type: $myPattern');

  // Write out the the VoiceXML content to be returned
  ...
</pre>
Of particular note here is our use of the PHP <a href="http://us2.php.net/manual/en/function.apache-request-headers.php">apache_request_headers()</a> function. This function will return an associative array of all the HTTP headers and their values. Use of this function is limited, however, to instances where PHP is running as an Apache module.

In this example, we check specifically for the presence of the "application/voicexml+xml" content type in the HTTP headers. If we find it, we send back VoiceXML; if not, we simply respond with a 404 error and stop execution of the script.

This simple example is just one way of ensuring that your VoiceXML code is obscured form prying eyes. Its far from perfect "“ anyone with some chops can easily construct an HTTP request with the appropriate MIME type and look at your VoiceXML code in an effort to footprint your application for possible SQL injection.

However, an approach like this one (and those discussed in the previous post) can make life harder for the average web surfer intent on doing a little mischief. It might also make it harder for automated vulnerability scanners to footprint your applications.

Its a new year. Be safe.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>128</wp:post_id>
  <wp:post_date>2008-01-01 12:50:11</wp:post_date>
  <wp:post_date_gmt>2008-01-01 16:50:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>whats-mime-is-not-yours</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[128]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[128]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Phone Jamming and Other Dirty Political Tricks</title>
  <link>http://voiceingov.org/2008/01/07/phone-jamming-and-other-dirty-political-tricks/</link>
  <pubDate>Mon, 07 Jan 2008 18:03:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=129</guid>
  <description/>
  <content:encoded><![CDATA[An <a href="http://abcnews.go.com/Politics/Vote2008/story?id=4088097&amp;page=1">interesting read</a> can be found over at ABC News, where Ex-GOP Consultant Allen Raymond describes the dirty tricks used by political operatives to sway elections.

What's really disturbing is that most of the techniques used to disrupt elections or smear political rivals are phone-based.

One of the most disturbing practices is described by Raymond as follows:

<blockquote>"Call 8,000 ... county committee members at home in the middle of the Super Bowl on behalf of your opponent, enraging all those couch potatoes."</blockquote>

Ouch!  This is shockingly easy to do if you know how to <a href="http://www.google.com/search?hl=en&amp;q=spoof+ani&amp;btnG=Google+Search" target="_blank">spoof ANI</a>.  If your using an Asterisk-based PBX with a VoIP service that supports spoofing, your in business.

I also take issue with one contention made by Raymond regarding the <a href="http://politicalticker.blogs.cnn.com/2007/11/16/romney-camp-anti-mormon-calls-repulsive/">recent spate of calls</a> made to potential primary voters in New Hampshire and Iowa regarding Mitt Romney:

<blockquote>"That was not nickel-and-dime stuff," says Raymond, explaining that the cost of such an operation narrows the field of suspects. "It couldn't have come from Huckabee, McCain or Thompson "” they don't have enough money to pay for that kind of operation."</blockquote>

Baloney!  These kinds of tricks are easy to pull off and extremely cheap.  All you need is a little bit of know how, access to a voter registration file and some basic equipment and you can pull off one of these despicable tactics.  It is not expensive anymore to initiate an outbound calling campaign to thousands of households.

This ought to be a wake up call (pun intended) to those interested in cleaning up the election process.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>129</wp:post_id>
  <wp:post_date>2008-01-07 14:03:36</wp:post_date>
  <wp:post_date_gmt>2008-01-07 18:03:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>phone-jamming-and-other-dirty-political-tricks</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
</item>
<item>
  <title>Yet Another Voice Plugin for Facebook</title>
  <link>http://voiceingov.org/2008/04/01/yet-another-voice-plugin-for-facebook/</link>
  <pubDate>Tue, 01 Apr 2008 23:16:04 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=130</guid>
  <description/>
  <content:encoded><![CDATA[I've been enamored of late with <a href="http://www.grandcentral.com/">GrandCentral</a>, the very cool web phone service recently acquired by Google (which makes it even more cool I guess).

GrandCentral isn't a standard phone service provider -- they require you to get your phone service from somewhere else.  What GrandCentral excels at is providing a way to "front end" a number of different phones (home, business, cell) with a single number that you can choose.  This lets you control how calls from different friends and family (or even perfect strangers) get routed between your phones.

For example, some contacts can get routed to your home phone, some to your cell -- depending on who they are and how you set up where calls go.  One of <a href="http://www.grandcentral.com/support/howitworks/">the options</a> that is provided is to route calls to a <a href="http://www.grandcentral.com/howitworks/gizmo">soft phone from the Gizmo Project</a>.  In a nutshell, this lets you route calls from the PSTN -- using a number in your area code, mind you -- to the SIP phone running on your computer (either Linux or Windows, as Gizmo runs on both).   How cool is that?

You can imagine my excitement when I learned that there is a GrandCentral plugin for facebook -- it basically adds a "Call Me" button to your <a href="http://www.facebook.com/profile.php?id=527353413">facebook profile</a>.

While this is cool, I <a href="http://pulverblog.pulver.com/archives/007455.html">already have a voice application</a> enabled in my facebook profile.  So now I've got two of them...

Unfortunately, I've not received a single call yet.  Not sure if it's me, or if people just aren't ready to use voice applications from within Facebook.

Maybe I need more friends.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>130</wp:post_id>
  <wp:post_date>2008-04-01 19:16:04</wp:post_date>
  <wp:post_date_gmt>2008-04-01 23:16:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>yet-another-voice-plugin-for-facebook</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>Why I Like Gizmo</title>
  <link>http://voiceingov.org/2008/04/02/why-i-like-gizmo/</link>
  <pubDate>Wed, 02 Apr 2008 12:28:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=131</guid>
  <description/>
  <content:encoded><![CDATA[Oprah <a href="http://www.mediaincanada.com/articles/mic/20080305/oprah.html">loves Skype</a>, but I'm pretty fond of <a href="http://gizmo5.com/pc/products/desktop/">Gizmo</a>.

If your like me then you've probably got a number of different VoIP and IM clients running on your computer(s) -- Skype, Google Talk, Gizmo, etc.  I've used Skype heavily in the past, but I've now moved on to Gizmo.  Here's why:
<ul>
	<li><strong>I want something that will run on Linux</strong>.  No, I don't use Windows unless I have to, so this pretty much takes Google Talk out of the picture.</li>
	<li><strong>I want something that will let me IM contacts in multiple networks</strong>.  Google Talk can do this, as can Gizmo -- Skype can't.</li>
	<li><strong>I want something that will hook into my Asterisk server easily</strong>.  Google Talk <a href="http://www.voip-info.org/wiki/view/Asterisk+Speaks+with+Google+Talk">can do this</a>, but it's a <a href="http://gizmo5.com/pc/network/asterix-support/">piece of cake with Gizmo</a> because it uses <a href="http://en.wikipedia.org/wiki/Session_Initiation_Protocol">SIP</a>.</li>
</ul>

In addition, Gizmo works great with services like <a href="http://www.grandcentral.com/howitworks/gizmo">GrandCentral</a>.  To be fair, Google Talk has everything I want -- if it only ran on Linux I'd be on it like stink on a monkey.  Perhaps in time.

Skype may be more popular, and Goggle Talk may have more buzz but Gizmo is the VoIP / IM client for me.  For now...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>131</wp:post_id>
  <wp:post_date>2008-04-02 08:28:45</wp:post_date>
  <wp:post_date_gmt>2008-04-02 12:28:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>why-i-like-gizmo</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
</item>
<item>
  <title>A Look at Google's FCC Auction Strategy</title>
  <link>http://voiceingov.org/2008/04/06/a-look-at-googles-fcc-auction-strategy/</link>
  <pubDate>Sun, 06 Apr 2008 13:28:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=132</guid>
  <description/>
  <content:encoded><![CDATA[The NY Times has a <a href="http://www.nytimes.com/2008/04/04/technology/04auction.html?_r=1&amp;ref=technology&amp;oref=slogin">really interesting article</a> detailing the strategy of Google executives bidding on wireless spectrum in the recent FCC auction.

Google's legacy from this historic auction is that it helped ensure that a portion of the spectrum purchased would be <a href="http://slashdot.org/article.pl?sid=07/07/23/2020216&amp;from=rss">subject to specific requirements of openness</a>.  The "C Block" of spectrum that the FCC will require be managed under the tenants of openness was ultimately <a href="http://www.pcworld.com/article/id,143675-pg,1/article.html">won by Verizon Wireless</a>.

Even though Google didn't "win" the auction for the C Block outright, there are those that believe that their strategy of opening up the world of wireless communication may have been served nonetheless:

<blockquote>"If Google had won a license, there was only downside risk for them," said Gregory L. Rosston, a former F.C.C. official and senior fellow at the Stanford Institute for Economic Policy Research. "Now they can just spend $1 million a year on a law firm to ensure Verizon lives up to the openness requirements."</blockquote>

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>132</wp:post_id>
  <wp:post_date>2008-04-06 09:28:36</wp:post_date>
  <wp:post_date_gmt>2008-04-06 13:28:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>a-look-at-googles-fcc-auction-strategy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_206c027f680efdd1130c361dcdd0e9c5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Telephone Links in Web Pages</title>
  <link>http://voiceingov.org/2008/04/15/telephone-links-in-web-pages/</link>
  <pubDate>Tue, 15 Apr 2008 13:26:37 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=133</guid>
  <description/>
  <content:encoded><![CDATA[Have you ever hovered over a hyperlink on a web page and noticed that it uses the mysterious <strong>tel:</strong> protocol?  What happens when you click on a link <a href="tel:18005551234">like this</a> in your browser?

The answer to that question can depend a lot on how your browser is set up.  If your using Firefox, you can associate specific applications with different protocols by opening a new tab and entering <strong>about:config</strong> in the address bar.

In the configuration settings you'll need to add two entries, or modify the existing ones if these are already there:
<ul>
	<li>network.protocol-handler.external.tel (boolean - set to true).</li>
	<li>network.protocol-handler.app.tel (string - the path to the application you want to launch)</li>
</ul>
Not exactly sure if this works the same way on Windows, but on my Linux machine I set the second value to the path to my Gizmo softphone  (/usr/bin/gizmo) and it automatically launches and dials the number.  Pretty neat!

There is a <a href="http://www.faqs.org/rfcs/rfc3966.html" target="_blank">standard for telephone URIs</a> out there, but there doesn't seem to be a lot of good information on how different browsers / platforms deal with this type of link.

This might be a good area for some standards, especially since lots of web content is now being consumed on mobile devices (like iPhones) that are more tightly coupled with phones.

If anyone is aware of some standards in this area, or even where better information on different browsers / platforms can be obtained, please <a href="tel:13024824592">call me</a>. ;-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>133</wp:post_id>
  <wp:post_date>2008-04-15 09:26:37</wp:post_date>
  <wp:post_date_gmt>2008-04-15 13:26:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>telephone-links-in-web-pages</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[133]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[133]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Government Technology Mistakes</title>
  <link>http://voiceingov.org/2008/04/16/government-technology-mistakes/</link>
  <pubDate>Wed, 16 Apr 2008 17:55:22 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=134</guid>
  <description/>
  <content:encoded><![CDATA[One of the things that makes government agencies unique is that they are repositories for vast amounts of information -- some of which is highly sensitive (i.e., tax data), or that could be damaging if it fell into the wrong hands (i.e., social security numbers).

Accounts of government agencies exposing sensitive data, like social security numbers, are <a href="http://www.nytimes.com/2007/04/21/washington/21data.html">shockingly common</a>.  Many of these stories share an underlying theme or two.  One of the most frustrating -- poor web programming.

The State of Oklahoma's Department of Corrections is the <a href="http://thedailywtf.com/Articles/Oklahoma-Leaks-Tens-of-Thousands-of-Social-Security-Numbers,-Other-Sensitive-Data.aspx">latest to join</a> this embarrassing fraternity of government entities that have completely overlooked the most basic tenets of good web development and exposed sensitive information.

<blockquote><em>One of the cardinal rules of computer programming is to never trust your input. This holds especially true when your input comes from users, and even more so when it comes from the anonymous, general public. Apparently, the developers at Oklahoma's Department of Corrections slept through that day in computer science class, and even managed to skip all of Common Sense 101. You see, not only did they trust anonymous user input on their public-facing website, but they blindly executed it and displayed whatever came back.

The result of this negligently bad coding has some rather serious consequences: the names, addresses, and social security numbers of tens of thousands of Oklahoma residents were made available to the general public for a period of at least three years.</em></blockquote>

Including an SQL statement as a URL parameter and then blindly allowing your web application to execute said parameter is a recipe for disaster.

After reading this, I thought it might be interesting to see how common this problem might be with other government website.  I decided to run a quick check using one of the advanced search features of Google to look for SQL keywords in web site URLs that have ".gov" in them.  The results?  Very, very <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3ASELECT+FROM+WHERE+.gov&amp;btnG=Search" target="_blank">Depressing</a>.

The fact that the Oklahoma DOC allowed the social security numbers of individuals to be displayed through SQL manipulation masks a deeper issue -- why are these social security numbers being stored in unencrypted form in their database?  If there isn't a legitimate reason to store this data in an unencrypted form, then it should be avoided at all costs.  (And the database that holds the unencrypted version should be nowhere near a web server.)  <a href="http://www.webmonkey.com/webmonkey/00/20/index4a.html">One way encryption</a> works just fine for most authentication needs.

This same issue was the cause of a breach at the <a href="http://www.udel.edu/PR/UDaily/2006/mar/classifieds031006.html">University of Delaware</a> a few years back -- wonder if they learned their lesson?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>134</wp:post_id>
  <wp:post_date>2008-04-16 13:55:22</wp:post_date>
  <wp:post_date_gmt>2008-04-16 17:55:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>government-technology-mistakes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[134]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[134]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Earth Day Special Project: GreenPhone</title>
  <link>http://voiceingov.org/2008/04/17/earth-day-special-project-greenphone/</link>
  <pubDate>Thu, 17 Apr 2008 16:15:16 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=135</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://ww2.earthday.net/">Earth Day 2008</a> is fast approaching, so I wanted to try and build something that would help the environment and also be a cool demonstration of telephone applications generally, and the <a href="http://voxeo.com/prophecy/">Voxeo Prophecy</a> platform in particular.

I decided to whip up a simple application that would allow a caller to search for E85 and Bio-diesel fuel stations in their state.  Some of the specific goals that I had in mind when I got started were:
<ul>
<li>To make use of the Voxeo Prophecy platform, the premiere VoiceXML/CCXML platform for building voice applications (at least in my opinion).</li>
<li>To code the application entirely in VoiceXML, CCXML, ECMAScript and PHP (that's right, no database!). </li>
<li>To integrate with SOAP-based web services to obtain data on E85 and Bi-Diesel station locations, and to do other cool stuff like send an SMS message from VoiceXML.</li>
<li>To make use of interesting and unique audio files for prompts and to signal specific types of outcomes.</li>
</ul>

The fruits of one weekend of labor can be <a href="http://www.voiceingov.org/tutorials/greenPhone.zip">downloaded here</a>.  To set up and test this application, you will need the following:

<ul>
<li>An account with StrikeIron to use the web services that drive the GreenPhone application.</li>
<li>A copy of Voxeo Prophecy.</li>
<li>A good headset and microphone (to place test calls using Prophecy).</li>
<li>A cell phone (preferably one with a liberal text messaging contract).</li>
</ul>

<strong>Sign Up With StrikeIron:</strong>

Create an account with <a href="http://strikeiron.com/Default.aspx">StrikeIron</a> and sign up for the <a href="http://strikeiron.com/ProductDetail.aspx?p=257">Super Data Pack Web Service</a>.  This is a collection of web services that allow for up to 10,000 hits / month at no charge (where are you going to get a better deal than that?).  You'll also want to sign up for the <a href="http://strikeiron.com/ProductDetail.aspx?p=190">Global SMS Pro Web Service</a> - this is the service that is used to send SMS messages from the GreenPhone application.  Note - this service is priced quite differently than the Super Data Pack Web Service - only 10 free hits before you start paying.  If you want to use this service for anything more than just testing out how to send an SMS message from Voxeo Prophecy, you'll need to get your wallet out.

Make note of the user ID (email address) and password used to create your StrikeIron account - these will be needed momentarily.

<strong>Download and install Voxeo Prophecy:</strong>

Download and install the <a href="http://voxeo.com/prophecy/#download">Voxeo Prophecy</a> software.  Follow all of the instructions for installing and obtaining a license - a two-port license (which will support 2 concurrent phone calls) is free.  Right now, prophecy only runs on Windows, but a Linux version is in the pipeline.

<strong>Download and Configure GreenPhone:</strong>

Download the <a href="http://www.voiceingov.org/tutorials/greenPhone.zip">GreenPhone application</a> and extract it to a new directory under c:{Prophecy install path}www.  (For example, on my Windows machine I've extracted to c:Program FilesVoxeowwwGreenPhone).  You don't have to run the GreenPhone application on the same machine as Prophecy - if you decide to deploy it on another machine, it must support PHP 5 - GreenPhone makes use of the PHP SOAP and SimpleXML extensions.

Once this is complete, navigate to the directory where you just extracted the GreenPhone application files.  Go to the directory called "php", and open the file called <em>common.php</em>.  At the top of this file, enter the credentials from your StrikeIron account.  Save and close the file.

<strong>Creating a Call Route for GreenPhone:</strong>

Open the Prophecy Management Console in your web browser (http://127.0.0.1:9995/mc.php) - the default user ID and password are <em>admin</em>/<em>admin</em>.  Click on the "Call Routing" option on the left hand menu - this is where you will set up a call route to the GreenPhone application.

Pick one of the numbered route Ids (e.g., Route 1 ID) and make the following changes:

<ul>
<li>Change the route ID to <em>green</em> </li>
<li>Change the Route Type to <em>CCXML W3C</em></li>
<li>Change the URL to <em>http://127.0.0.1:9990/{ GreenPhone Install Directory}/greenPhoneStart.xml</em></li>
<li>Scroll to the bottom of the page and click "Save Changes"</li>
</ul>

<strong>Making a test call:</strong>

Now that Prophecy is installed, fire up the SIP Phone that it is bundled with - you should see the Prophecy icon in your system tray.  Click on it, and select "SIP Phone" from the menu.  When the SIP Phone launches, select <em>Options</em>.  In the <em>SIP Proxy / Registrar Options</em> section, enter your cell phone number in the <em>Local Username</em> field (e.g., 2125551234).  Click OK, and restart your SIP Phone.  This last step allows your cell phone number to be delivered as the caller ID (or ANI) on the test call you are about the make, even though your initiating the call from a SIP phone.

GreenPhone is built to use ANI to look up E85 and Bio-Diesel stations in the caller's home state.  We do this by invoking the <a href="http://strikeiron.com/ProductDetail.aspx?p=263">U.S. Area Code Information Web Service</a> that is part of the StrikeIron Super Data Pack to determine which state a caller is calling from.  There are additional web services in the StrikeIron Super Data Pack that we can invoke to locate <a href="http://strikeiron.com/ProductDetail.aspx?p=299">Bio-Diesel stations</a> and <a href="http://strikeiron.com/ProductDetail.aspx?p=279">E85 Stations</a> -- the methods invoked on these last two services require us to identify the state we want a listing of stations for.

The caller's ANI is also used to send the details on a particular E85 or Bio-Diesel station via text message to the caller's phone - so if you enter your cell phone number in the Voxeo SIP Phone as described above, you can get details on a station that may be near you sent directly to your cell phone.

As an aside, you'll notice that a single phone call can result in up to 4 web service invocations -- not really sure if that's "too many" but there are probably some opportunities for caching that I'll be discussing in the next couple of posts on this, as I describe in more detail how to interact with web services via Voxeo Prophecy.

Now you are ready to place a test call.  When your SIP Phone restarts, go to the field called <em>Dial String</em> and enter "sip:green@127.0.0.1" (without the quotes).  Click dial and you are now interacting with the GreenPhone application!

You'll notice (and hopefully enjoy) the unique sounds I've tried to used throughout the application.  All of them were obtained from the <a href="http://freesound.iua.upf.edu/index.php">FreeSound Project</a> and modified to conform to the <a href="http://docs.voxeo.com/voicexml/2.0/audioformats.htm">Prophecy standard</a> for audio files with <a href="http://audacity.sourceforge.net/">Audacity</a>.

There are some obvious limitations to how this application currently works, and the VUI clearly needs some refinement (DTMF only at this point).

In the next several posts, I'll point to this application to discuss examples on how to accomplish things in VoiceXML and CCXML using the Voxeo Prophecy Platform.

Have a happy Earth Day on 4/22!!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>135</wp:post_id>
  <wp:post_date>2008-04-17 12:15:16</wp:post_date>
  <wp:post_date_gmt>2008-04-17 16:15:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>earth-day-special-project-greenphone</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[135]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Accessing Web Services From CCXML</title>
  <link>http://voiceingov.org/2008/04/21/accessing-web-services-from-ccxml/</link>
  <pubDate>Tue, 22 Apr 2008 00:40:05 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=136</guid>
  <description/>
  <content:encoded><![CDATA[This is the first in a series of posts that will highlight how to accomplish specific things using the <a href="http://voxeo.com/prophecy/">Voxeo Prophecy</a> platform.  All of the examples that will be discussed draw directly from the <a href="http://www.voiceingov.org/blog/?p=135">GreenPhone project</a> discussed in a previous post.

The first issue that will be discussed "“ accessing web services from CCXML using PHP.

One of the very cool things about Prophecy is that it comes bundled with the PHP scripting language.  In fact, I have on occasion referred to PHP as Prophecy's "embedded scripting language."  PHP 5 comes with an abundance of features that will be of interest to IVR developers "“ chief among them, the ability to create <a href="http://us2.php.net/manual/en/ref.soap.php">SOAP clients</a> to interact with web services, and the ability to easily work with data in XML format using the <a href="http://us2.php.net/manual/en/book.simplexml.php">SimpleXML</a> extension.

If you've read my previous post on the GreenPhone Project, you will know that I am using a collection of web services from <a href="http://strikeiron.com/">StrikeIron</a> that includes a web service to provide information on U.S. area codes.  If we pass this web service an area code, it will return the U.S. state that area code is in.  Ultimately, what the GreenPhone application will do is look up E85 and bio-diesel stations by state.  So when a person calls the application, we want to use their area code to look up what state they are in "“ thereby saving them the trouble of entering this information manually.

In CCXML, we can access the caller's ANI via the Connection Object:
<code>
&lt;transition state="initial" event="connection.alerting"&gt;
&nbsp;&lt;log expr="'*** Call is coming in.  Lookup area code information. ***'"/&gt;
&nbsp;&lt;assign name="ani" expr="event$.connection.remote"/&gt;
&nbsp;&lt;assign name="areacode" expr="ani.substring(0,3)"/&gt;
&nbsp;&lt;send target="'php/areaCodeLookup.php'" name="'lookupEvent'" targettype="'basichttp'" namelist="areacode"/&gt;
&lt;/transition&gt;
</code>
This block of code show how to set up a transition to access the ANI on an incoming call.  When an incoming call is detected by Prophecy, the "connection.alerting" event is delivered and we have access to the Connection Object's "remote" property "“ this property exposes the telephone URL for the device that is calling into the platform.  Note "“ in <a href="http://www.voiceingov.org/blog/?p=135">my previous post</a>, I explained the process of setting up the Prophecy SIP phone to deliver a specific ANI.  This is how we access the value that is set in the Prophcy SIP phone.

We assign the ANI value to a variable we have previously declared and (very cleverly) called "ani", and then we grab the first 3 characters of this string (using the ECMAScript substring method) and assign them to another variable called "areacode".  We then pass the area code value to a PHP script that will interact with the StrikeIron area code web service.

Using the <a href="http://www.w3.org/TR/2007/WD-ccxml-20070119/#Send">CCXML &lt;send/&gt; element</a> in this fashion is identical to an HTTP GET with the areacode variable appended to the URL of the PHP script, like this:
<code>
http://myserver/php/areaCodeLookup.php?areacode=123
</code>

There several possible outcomes of this HTTP request:

<ol>
<li>Our PHP script was able to successfully interact with the StrikeIron web service and lookup the U.S. state information for the submitted area code;
</li>
<li>Our PHP script was able to successfully interact with the StrikeIron web service but was not able to lookup the state information for the submitted area code (bad area code);</li>
<li>Something went wrong (an exception occurred) while trying to interact with the web service; or,</li>
<li>Something really went wrong and our HTTP request resulted in a bad response from the server.</li>
</ol>

We need to set up handlers for each possible outcome "“ we won't discuss them in detail until after we look more closely at the PHP components that are interacting with the StrikeIron web service, but to summarize what we'll need, here they are:
<pre>
&lt;transition state="lookup" event="areaCodeLookupSuccess"&gt;
&lt;/transition&gt;

&lt;transition state="lookup" event="areaCodeLookupFailure"&gt;
&lt;/transition&gt;

&lt;transition state="lookup" event="error.send.failed"&gt;
&lt;/transition&gt;
</pre>
The first two handlers react to custom events that we will toss into the CCXML event stream (more on that shortly), and the last will take care of instances where we get an invalid response back from the server (e.g., a 404 response).  Now lets look at the PHP components that interact with the StrikeIron web services.

When the HTTP request from Prophecy that holds our area code information is received in PHP, we can access the submitted value by using the PHP <a href="http://us2.php.net/manual/en/reserved.variables.request.php">$_REQUEST superglobal</a>:
<code>
$areacode = (int) $_REQUEST['areacode'];
</code>

You'll notice that we also <a href="http://us3.php.net/manual/en/language.types.type-juggling.php#language.types.typecasting">typecast</a> the value as a way of cleansing the input "“ as with any other kind of web application, never trust user input.  Even though we're not using the submitted information in a SQL query, this is a really good habit to get into.  There are certainly other ways to achieve this, but type casting is simple and effective for our purposes.

The PHP version that comes bundled with Prophecy has support for PHP's SOAP extension right out of the box.  Since we're going to be accessing several different web services over the course of one telephone call, I decided to set up a very simple class to handle all of the interactions with the StrikeIron web services.

<pre>
class greenSoapClient {

  private $client;
  private $headers;

  function __construct($type) {
    global $WSDL, $USER, $PSWD;
    $this-&gt;client = new SoapClient($WSDL[$type], array('trace' =&gt; 1,
                                          'exceptions' =&gt; 0));
    $headerArray = array("RegisteredUser" =&gt; array("UserID" =&gt; $USER,
                                          "Password" =&gt; $PSWD));
    $this-&gt;headers = new SoapHeader("http://ws.strikeiron.com",
                                          "LicenseInfo", $headerArray);
  }

  function makeSoapCall($name, $params) {
    $result = $this-&gt;client-&gt;__call($name, array($params), NULL, $this-&gt;headers);
    return $this-&gt;client-&gt;__getLastResponse();
  }

  function __destruct() {
    unset($this-&gt;client);
  }

}
</pre>

This class has only three functions "“ a constructor, a destructor and a function to make the call to the SOAP method we want information from.

When we instantiate the greenSoapClient class, we pass in a reference to a WSDL file for the service we want to invoke.  In this case, we will pass in a reference to the WSDL file for the U.S. Area Code Information Web Service.  (Actually, the string "areaCode" is used to access the WSDL reference from a pre-established associative array holding the URL references for all of the WSDL files used by the greenPhone application.)
<code>
$mySoapClient = new greenSoapClient("areacode");
</code>

Now that we have our area code information, and a shiny new greenSoapClient object to work with, we can make our SOAP call:
<code>
$param = array('AreaCode' =&gt; $areacode);
$response = $mySoapClient-&gt;makeSoapCall('GetAreaCode', $param);
</code>

The variable $response now holds the XML response that was returned from the web service.  We'll need to process this response in order to properly format the information we want to return to CCXML.

One of the very cool things about the <a href="http://docs.voxeo.com/ccxml/1.0-final/appendixg_ccxml10.htm">Voxeo implementation of CCXML</a> is that developers can toss custom events into the CCXML event stream using simple HTTP responses.  Prophecy lets us send back a custom event, as well as any data that we want to access in CCXML as properties of that event.  We do this by formatting our response as follows:

First line of body of HTTP response = custom event name.
Data to be returned to CCXML = name value pair appearing on successive lines of the HTTP body, one pair per line.

The U.S. Area Code Information Web Service returns two pieces of information that we want to access in CCXML "“ a count of the number of locations identified for each area code (typically 1), and the name of the U.S. state that area code belongs to.  A snippet of the raw response returned from the web service might look something like this (for the 610 area code):
<code>
&lt;ServiceResult&gt;
&nbsp;&lt;Count&gt;1&lt;/Count&gt;
&nbsp;&lt;AreaCodes&gt;
&nbsp;&nbsp;&lt;AreaCodeInfo&gt;
&nbsp;&nbsp;&nbsp;&lt;AreaCode&gt;610&lt;/AreaCode&gt;
&nbsp;&nbsp;&nbsp;&lt;Location&gt;Pennsylvania&lt;/Location&gt;
&nbsp;&nbsp;&lt;/AreaCodeInfo&gt;
&nbsp;&lt;/AreaCodes&gt;
&lt;/ServiceResult&gt;
</code>

We want to format our raw XML response like so:
<code>
areaCodeLookupSuccess
count=1
location=Pennsylvania
</code>

The easiest way to do this in PHP is to use the SimpleXML extension:
<code>
$xml = new SimpleXmlElement($response);
$result = $xml-&gt;soapBody-&gt;GetAreaCodeResponse-&gt;GetAreaCodeResult;
$output = "areaCodeLookupSuccessn";
$output .= "count=".$result-&gt;ServiceResult-&gt;Count."n";
$output .= "location=".$result-&gt;ServiceResult-&gt;AreaCodes-&gt;AreaCodeInfo-&gt;Location."nn";
</code>

We take the response from the StrikeIron web service and use it to create a new SimpleXML object.  We can then access the values we want and build our HTTP response.

How do we deliver our response once we're done constructing it, we simply use the PHP "echo" language construct to write it out:
<code>
echo $output;
</code>

Now that we've returned our values to CCXML, how do we access them?  For the answer to that,we need to go back to the handlers we set up previously, most importantly the handler for the custom "areaCodeLookupSuccess" event:
<code>
&lt;transition state="lookup" event="areaCodeLookupSuccess"&gt;
&nbsp;&lt;assign name="count" expr="event$.count"/&gt;
&nbsp;&lt;if cond="count == 1"&gt;
&nbsp;&nbsp;&lt;assign name="location" expr="event$.location"/&gt;
&nbsp;&nbsp;&lt;assign name="stateCode" expr="getStateCode(event$.location)"/&gt;
&nbsp;&nbsp;&lt;assign name="myState" expr="'accepting'"/&gt;
&nbsp;&nbsp;&lt;accept connectionid="connection_id"/&gt;
&nbsp;&lt;else/&gt;
&nbsp;&nbsp;&lt;log expr="'*** Could not look up area code. ***'"/&gt;
&nbsp;&nbsp;&lt;reject/&gt;
&nbsp;&lt;/if&gt;
&lt;/transition&gt;
</code>

When we write out our web service response in PHP, we can cause a custom event to drop into the CCXML event stream "“ the name of this event is the first line of the HTTP response we just constructed "“ areaCodeLookupSuccess.

We access the values we just returned to CCXML as properties of the areaCodeLookupSuccess event using the "event$." vernacular.  This allows us to assign these values to ECMAScript variables that we have previously declared.  It also lets us decide how we want our application to react, based on certain conditions (e.g., if count = 0).

Similarly, our other event handlers can be used if we get an unexpected response form the web service "“ we could send back a "areaCodeLookupFailure" event.  If something really bad happens "“ like an invalid response from the web server we will get an "error.send.failed" event, so we'll want to have a handler ready for that as well.

Now that you have a flavor for how to access web services using CCXML and PHP, we'll look at two different techniques for returning information from a web service to VoiceXML.  We'll cover these two techniques in the next two posts.  Stay tuned...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>136</wp:post_id>
  <wp:post_date>2008-04-21 20:40:05</wp:post_date>
  <wp:post_date_gmt>2008-04-22 00:40:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>accessing-web-services-from-ccxml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_e6b8d7b4a7cf8ab2efccb37de560e450</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_59c7c7ef6fa264636f2f8527af7cf6c4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bf4e3f13774cfd613bb0f9d512eb4f81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d1a5d2d75902b837a0f5e177c16f729a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a5d43f77469e88a15231ca5c6d06a070</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_336afc21564e1bac40dfe72dac6f4ff5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[136]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[136]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Virtualize Some Savings</title>
  <link>http://voiceingov.org/2008/04/23/virtualize-some-savings/</link>
  <pubDate>Wed, 23 Apr 2008 22:58:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=137</guid>
  <description/>
  <content:encoded><![CDATA[There is a <a href="http://www.govtech.com/pcio/265074">great article</a> over on the Government Technology Magazine site discussing the virtues of virtualization.  It includes some great examples of how governments are using this technology to reduce the footprint of their data centers, use less energy and simplify the maintenance of aging, unwieldy fleets of servers.

Sadly, it looks like governments have not led the charge on this:

<blockquote>"Although virtualization has entered the mainstream, the transition process is still in the beginning stage. About 75 percent of large organizations have started down the path to some degree, Goldworm said, but only about 5 percent of those organizations' servers have been virtualized. She estimated that only 20 percent to 40 percent of government organizations have begun the process."</blockquote>

What is especially interesting is that the trend towards the use of virtualization seems to favor smaller governments like counties and cities, that typically lag behind the federal and state governments in implementing new technologies:

<blockquote>"...smaller groups like city governments, because they tend to be in a homogeneous environment that is not as complex, are able to achieve results more quickly than larger organizations."</blockquote>

It would be interesting to find out home many government agencies in my state have looked at virtualization, and how many have started down this road.  I may have to look into how to conduct a survey on this issue.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>137</wp:post_id>
  <wp:post_date>2008-04-23 18:58:45</wp:post_date>
  <wp:post_date_gmt>2008-04-23 22:58:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>virtualize-some-savings</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[137]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[137]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>JavaScript Trick for Voice Applications</title>
  <link>http://voiceingov.org/2008/04/25/javascript-tricks-in-voice-applications/</link>
  <pubDate>Fri, 25 Apr 2008 21:40:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=138</guid>
  <description/>
  <content:encoded><![CDATA[There are times when it is desirable to change the behavior of a VoiceXML application based on a specific setting.

For example, the GreenPhone application that I have mentioned in <a href="http://www.voiceingov.org/blog/?p=135">several</a> <a href="http://www.voiceingov.org/blog/?p=136">previous posts</a> has a setting that can be used to control whether special audio files are played.  I personally find these audio files funny and somewhat endearing -- others may not.  To control whether they are played, there is a variable in the application root document called (cleverly) <strong>playAudio</strong>.
<code>
&lt;var name="playAudio" expr="true"/&gt;
</code>
It's default setting is <strong>true</strong>, and this can be changed to <strong>false</strong> to prevent these files from playing.  The typical method for checking a variable like this one to determine if an audio file should be played looks something like this:
<code>
&lt;if cond="playAudio"&gt;
&nbsp;&nbsp;&lt;audio src="myFile.wav"/&gt;
&lt;/if&gt;
</code>
There isn't anything wrong with this, and since there isn't a "cond" attribute on the &lt;audio/&gt; tag there aren't very many good alternatives.  There is one alternative method that I rather fancy that uses the <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:Conditional_Operator">JavaScript conditional operator</a> to distill this to a single line of code:
<code>
&lt;audio expr="playAudio ? 'myRealAudioFile.wav' : 'myFakeAudioFile.wav'"/&gt;
</code>
This shortcut allows us to assign a value to the audio file reference via the "expr" attribute, instead of using an explicit URI to the location of an audio file.  The way the operator behaves is to first evaluate the condition on the far left side -- if it evaluates to <strong>true</strong> then the first expression is assigned as the URI of the audio file.  If it evaluates to <strong>false</strong>, then the second expression is used.

The trick here is that the second expression resolves to a bogus audio file -- it doesn't exist.  This will not cause a fatal error in your application, it will simply cause Prophecy not to play an audio file (it can't because the file doesn't exist).

The JavaScript conditional operator can come in very handy in CCXML as well.  For example, there are times in CCXML where I want to use &lt;dialogterminate/&gt; to end a call, but I may not be certain which dialog a caller is in -- the JavaScript conditional operator can come in handy here:
<code>
&lt;dialogterminate dialogid="loggedIn ? voiceMailDialog : loginDialog"/&gt;
</code>
Since the "dialogid" attribute is an expression, we can use the JavaScript conditional operator to check and see if a caller has logged into a voice mail system to retrieve their voicemail.  If there loggedIn status is true, we assume that they are in the voiceMailDialog and yank them from that.  Otherwise, we assume they are in the first dialog and yank from there.

There are surely other ways to do these things, but in my humble opinion the JavaScript conditional operator deserves some attention as a powerful shortcut for doing things in CCXML or VoiceXML using the <a href="http://voxeo.com/prophecy/">Voxeo Prophecy platform</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>138</wp:post_id>
  <wp:post_date>2008-04-25 17:40:45</wp:post_date>
  <wp:post_date_gmt>2008-04-25 21:40:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>javascript-tricks-in-voice-applications</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[138]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[138]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Accessing Web Services From VoiceXML</title>
  <link>http://voiceingov.org/2008/05/06/accessing-web-services-from-voicexml/</link>
  <pubDate>Tue, 06 May 2008 22:21:03 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=139</guid>
  <description/>
  <content:encoded><![CDATA[A few weeks ago, I posted about <a href="http://www.voiceingov.org/blog/?p=136">accessing web services from CCXML</a> using PHP.  This post will demonstrate how to do the same thing, only from VoiceXML.  We'll be using <a href="http://voxeo.com/prophecy/">Voxeo Prophecy</a> and PHP for this example.  We'll also be referring to the <a href="http://www.voiceingov.org/blog/?p=135">GreenPhone project</a> -- available free for download -- for the sample code.

Before we dive in, its important to keep in mind that there are a number of different techniques for getting information from web services into a VoiceXML dialog.  This is just one method -- there are many others.  Voxeo even has its own <a href="http://www.voicexmlguide.com/appendixo.htm">platform-specific way of accessing SOAP web services via JavaScript</a>.  Ultimately, the method you employ needs to be a good fit for the environment your working in and the requirements of your project.

<strong>Using the greenSoapClient Class</strong>

In the last post on this topic, I demonstrated how to use a simple PHP class as a way to access multiple SOAP-based web services from CCXML.  This class forms the basis of our method for accessing web services from VoiceXML as well.  However, in this instance, instead of using the CCXML &lt;send/&gt; element, we'll use a VoiceXML <a href="http://www.w3.org/TR/2004/REC-voicexml20-20040316/#dml2.3.4">subdialog</a>.

Subdialogs in VoiceXML are typically used to create reusable dialog components for capturing common types of input, like a series of digits (e.g., credit card numbers, account numbers, etc).  They can also be used to compartmentalize complex interactions with a caller and provide a simple interface for accessing results.   By way of example, this is how the <a href="http://www.nuance.com/dialogmodules/advanced/">OSDMs from Nuance</a> work, as well as the <a href="http://community.voxeo.com/services_pro/targus/home.jsp">Targus service</a> from Voxeo.  We'll borrow this approach to access a <a href="http://www.strikeiron.com/ProductDetail.aspx?p=190">web service from StrikeIron</a> that will send the details of an E85 or bio-diesel station to a cell phone via SMS.

<strong>Setting up our Subdialog</strong>

In order to send an SMS message with details on an E85 or bio-diesel station, we'll need 2 things; the station details, and a cell phone number to send it to.

In order to send the details on a station from VoiceXML to PHP, we'll pack it up in a pipe-delimited string called "detailsToSend" (I won't go into too much detail about how this is done in this post -- to learn more, refer to the GreenPhone Project code).  The cell phone number we are sending to is obtained from the caller ID of the calling party, stored in a variable named "ani".  Details on how to access caller ID are given in a <a href="http://www.voiceingov.org/blog/?p=136">previous post</a>.

Our subdialog call will look like this:
<code>
&lt;form id="sendDetails"&gt;
&nbsp;&lt;catch event="error.badfetch"&gt;
&nbsp;&nbsp;&lt;prompt&gt;
&nbsp;&nbsp;&nbsp;There was a problem sending the station details to your phone.
&nbsp;&nbsp;&nbsp;&lt;break strength="weak"/&gt;
&nbsp;&nbsp;&lt;/prompt&gt;
&nbsp;&nbsp;&lt;goto next="#goodbye"/&gt;
&nbsp;&lt;/catch&gt;
&lt;subdialog name="sendSMS" src="../php/sendStationDetails.php" namelist="ani detailsToSend"&gt;
&nbsp;&lt;prompt&gt;
&nbsp;&nbsp;Sending the station details to
&nbsp;&nbsp;&lt;say-as interpret-as="telephone"&gt;&lt;value expr="ani"/&gt;&lt;/say-as&gt;
&nbsp;&lt;/prompt&gt;
&nbsp;&lt;filled&gt;
&nbsp;&nbsp;&lt;if cond="sendSMS.result==0"&gt;
&nbsp;&nbsp;&nbsp;&lt;prompt&gt;Your message has been sent.&lt;break strength="weak"/&gt;&lt;/prompt&gt;
&nbsp;&nbsp;&lt;else/&gt;
&nbsp;&nbsp;&nbsp;&lt;prompt&gt;
&nbsp;&nbsp;&nbsp;&nbsp;There was a problem sending the station details to your phone.
&nbsp;&nbsp;&nbsp;&nbsp;&lt;break strength="weak"/&gt;
&nbsp;&nbsp;&nbsp;&lt;/prompt&gt;
&nbsp;&nbsp;&lt;/if&gt;
&nbsp;&lt;goto next="#goodbye"/&gt;
&nbsp;&lt;/filled&gt;
&lt;/subdialog&gt;
&lt;/form&gt;
</code>
We use the attributes on the &lt;subdialog&gt; element to give our subdialog a name (which we'll use to access the results sent back from PHP), to specify where to POST our variables to and also to specify which variables to POST.

You'll also notice that we have set up a handler here for an "error.badfetch" event.  This is a good habit to get into whenever you set up a request to an external resource (like a PHP script).  If the script isn't there or has problems, an "error.badfetch" event will get returned and unless you specified a handler for this event, your day will not end well.

Additionally, we've set up logic in our filled block to inspect the result of the subdialog call.  We access the result as a property of the subdialog, using the name we set up in the &lt;subdialog&gt; element and the dot notation (".") familiar to JavaScript.

&lt;if cond="sendSMS.result==0"&gt;

... code logic goes here ...

&lt;/if&gt;

With this in mind, our PHP script needs to send back a variable called "result".  How do we do this?  Lets take a look at the PHP script:

<strong>A Simple Subdialog using PHP</strong>

The subdialog that we want to render is extremely simple -- we only need to render enough VoiceXML to declare a variable called "result" and return it to the parent dialog.  We'll do this after we make our web service call to send the SMS message.

There are two pieces of information returned from the StrikeIron web service that we are interested in; a string that holds the response message from the service (i.e., "success", "failure", etc.) and a number indicating the outcome of the web service call.

We'll take these two bits if information and assign them to PHP variables:

<code>
$result = $xml-&gt;soapHeader-&gt;ResponseInfo-&gt;ResponseCode;
$message = $xml-&gt;soapHeader-&gt;ResponseInfo-&gt;Response;
</code>
Now, we want to write out these variables in a simple VoiceXML subdialog:

<code>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;vxml version="2.1" xmlns="http://www.w3.org/2001/vxml"&gt;
&lt;form id="F_1"&gt;
&nbsp;&lt;log&gt;*** SMS response message was: &lt;?php echo $message; ?&gt;. ***&lt;/log&gt;
&nbsp;&lt;block&gt;
&nbsp;&nbsp;&lt;var name="result" expr="&lt;?php echo $result ?&gt;"/&gt;
&nbsp;&nbsp;&lt;return namelist="result"/&gt;
&nbsp;&lt;/block&gt;
&lt;/form&gt;
&lt;/vxml&gt;</code>

As discussed above, this creates just enough VoiceXML to instantiate a variable and return it to the parent dialog.  For good measure, we'll write out the web service string (contained in the PHP variable $message) as a log statement, in case it contains information we want to look at later.

<strong>Why This Approach?</strong>

Using this technique for accessing web services from VoiceXML provides a couple of advantages.  First, it allows us to completely separate the presentation layer (the VoiceXML) from the logic used to invoke the web service.  This is a fairly standard design practice that makes creating the dialog much easier for a developer that does not necessarily know a whole lot about web services.  With this approach, they don't really need to -- they only need to know that the subdialog call will return a variable called "result" whose value can be inspected to determine what to do next.

Additionally, because the parent dialog is just static VoiceXML it may be possible to cache it.  Since the parent dialog isn't dynamic, it can be cached for fast access, while the subdialog -- which must be dynamic -- is the only component sent from the web server to the VoiceXML platform each time a caller accesses the application.  Careful design can yield additional caching opportunities that can make your applications more efficient and less bandwidth intensive.

In the next post, we'll explore one additional method for accessing web service from VoiceXML.  Stay tuned...
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>139</wp:post_id>
  <wp:post_date>2008-05-06 18:21:03</wp:post_date>
  <wp:post_date_gmt>2008-05-06 22:21:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>accessing-web-services-from-voicexml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
  <category domain="post_tag" nicename="soap"><![CDATA[SOAP]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <category domain="post_tag" nicename="voicexml"><![CDATA[VoiceXML]]></category>
  <category domain="post_tag" nicename="web-services"><![CDATA[Web Services]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[139]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[139]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Wireless Philadelphia: is the dream over?</title>
  <link>http://voiceingov.org/2008/05/14/wireless-philadelphia-is-the-dream-over/</link>
  <pubDate>Wed, 14 May 2008 17:17:53 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=141</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://www.philly.com/philly/blogs/cityhall/BREAKING_NEWS_EarthLink_To_Dump_Wireless_Philadelphia_Next_Month.html">Disappointing news</a> from the Wireless Philadelphia project "“ it seems EarthLink is throwing in the towel.  The <a href="http://www.wirelessphiladelphia.org/blog_detail.cfm/blog/68">latest statement</a> from the Wireless Philadelphia CEO is more encouraging:

<blockquote>Wireless Philadelphia is utterly steadfast in its determination to extend internet access to all members of the community, and we intend to do everything in our power to continue the momentum generated by WP in support of Digital Inclusion.</blockquote>

I hope that the goals of this project can still be achieved, but it ain't looking good right now. :-(
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>141</wp:post_id>
  <wp:post_date>2008-05-14 13:17:53</wp:post_date>
  <wp:post_date_gmt>2008-05-14 17:17:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>wireless-philadelphia-is-the-dream-over</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="digital-divide"><![CDATA[Digital Divide]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[141]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[141]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Android Developer Challenge Winners Announced</title>
  <link>http://voiceingov.org/2008/05/14/android-developer-challenge-winners-announced/</link>
  <pubDate>Wed, 14 May 2008 17:21:26 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=142</guid>
  <description/>
  <content:encoded><![CDATA[The winners of the first round of the <a href="http://code.google.com/android/adc.html">Android Developer Challenge</a> have <a href="http://phandroid.com/2008/05/10/adc-round-1-winners/">been announced</a>.  Some very cool stuff!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>142</wp:post_id>
  <wp:post_date>2008-05-14 13:21:26</wp:post_date>
  <wp:post_date_gmt>2008-05-14 17:21:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>android-developer-challenge-winners-announced</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[142]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[142]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Wireless Philadelphia May Survive After All</title>
  <link>http://voiceingov.org/2008/06/18/wireless-philadelphia-may-survive-after-all/</link>
  <pubDate>Wed, 18 Jun 2008 19:57:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=143</guid>
  <description/>
  <content:encoded><![CDATA[It looks like a <a href="http://www.philly.com/dailynews/local/20080617_Wireless_Philadelphia_may_survive_after_all.html">group of local investors</a> may pick up where EarthLink left off.

This is good news, but more work is still needed to complete the network:

<blockquote>
"We're not anywhere near close to delivering a full service yet," said local entrepreneur Richard A. Rasansky, who is on the board of the new company [that will take over the network]. "The network is not completed. It's not so much a problem with how it's built, it's that it's currently unbuilt."</blockquote>

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>143</wp:post_id>
  <wp:post_date>2008-06-18 15:57:18</wp:post_date>
  <wp:post_date_gmt>2008-06-18 19:57:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>wireless-philadelphia-may-survive-after-all</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="digital-divide"><![CDATA[Digital Divide]]></category>
  <category domain="post_tag" nicename="digitsal-divide"><![CDATA[digitsal divide]]></category>
  <category domain="post_tag" nicename="wireless"><![CDATA[wireless]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[143]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[143]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>WebAnywhere:  A Web-Based Screen Reader</title>
  <link>http://voiceingov.org/2008/06/27/webanywhere-a-web-based-screen-reader/</link>
  <pubDate>Fri, 27 Jun 2008 19:13:13 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=144</guid>
  <description/>
  <content:encoded><![CDATA[Just happened upon a story <a href="http://uwnews.org/article.asp?articleID=42563">from the University of Washington News</a> describing a project to build a web-based screen reader -- called <a href="http://webanywhere.cs.washington.edu/">WebAnywhere</a> -- to allow the visually impaired to surf the web.

Most people have heard of or even tried <a href="http://www.freedomscientific.com/fs_products/software_jaws.asp">screen readers like Jaws</a>.  The problem with software like Jaws is that it must be installed and run on the computer a visual impaired person is using.  This can be inconvenient if someone is traveling, or is otherwise away from home or work.

WebAnywhere is different in that it is web-based, so there is no software to install.  Any computer can be made more accessible to the visually impaired as long as it has a browser.  The software that runs WebAnywhere is available for review from <a href="http://code.google.com/p/webanywhere/">Google Code</a>.

This sounds like an outstanding project -- I'll have to pull the source code down and take a look at it.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>144</wp:post_id>
  <wp:post_date>2008-06-27 15:13:13</wp:post_date>
  <wp:post_date_gmt>2008-06-27 19:13:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>webanywhere-a-web-based-screen-reader</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="digital-divide"><![CDATA[Digital Divide]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[144]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[144]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The State of Talking Computers</title>
  <link>http://voiceingov.org/2008/06/30/the-state-of-talking-computers/</link>
  <pubDate>Mon, 30 Jun 2008 18:01:33 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=145</guid>
  <description/>
  <content:encoded><![CDATA[The New Yorker has <a href="http://www.newyorker.com/reporting/2008/06/23/080623fa_fact_seabrook">an interesting piece</a> about the state of speech synthesis and voice recognition.  Decades after the original notion of the "conversational computer" was first conceptualized, where are we?

Turns out, we're not as far along as we thought we'd be.  Scientists and researchers found out the hard way that modeling speech is waaaaaay harder than anyone thought it would be.  Don't go throwing that keyboard away just yet.

A fascinating read -- we've come so far, and yet we are still so far away from the original vision of the talking computer.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>145</wp:post_id>
  <wp:post_date>2008-06-30 14:01:33</wp:post_date>
  <wp:post_date_gmt>2008-06-30 18:01:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>the-state-of-talking-computers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[145]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[145]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Verizon Launches Hosted VoiceXML Platform</title>
  <link>http://voiceingov.org/2008/07/16/verizon-launches-hosted-voicexml-platform/</link>
  <pubDate>Wed, 16 Jul 2008 13:13:42 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=146</guid>
  <description/>
  <content:encoded><![CDATA[A friend just sent <a href="http://www.speechtechmag.com/Articles/News/News-Feature/Verizon-Launches-Hosted-Speech-Platform-49901.aspx" target="_blank">this</a> to me:

<blockquote>Verizon Business today launched Open Hosted Speech Services (OHSS), a speech platform that allows customers to create and host their own speech applications...[the platform includes] a hosted IVR application, a VoiceXML interpreter, text-to-speech capabilities, and a speaker verification application.</blockquote>

Hey, Verizon...  2001 called for you. Its wants its idea back.

Companies like <a href="http://www.voxeo.com/">Voxeo</a>, <a href="http://bevocal.com/corporateweb/">BeVocal</a> (now owned by Nuance) and <a href="https://studio.tellme.com/">TellMe</a> (now owned by Microsoft) have been doing this for a long time.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>146</wp:post_id>
  <wp:post_date>2008-07-16 09:13:42</wp:post_date>
  <wp:post_date_gmt>2008-07-16 13:13:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>verizon-launches-hosted-voicexml-platform</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[146]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[146]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Voxeo Offers Advance Peek at Prophecy 9</title>
  <link>http://voiceingov.org/2008/08/21/voxeo-offers-advance-peek-at-prophecy-9/</link>
  <pubDate>Thu, 21 Aug 2008 15:02:15 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=147</guid>
  <description/>
  <content:encoded><![CDATA[Voxeo has <a href="http://blogs.voxeo.com/voxeotalks/2008/08/19/voxeo-announces-prophecy-9-with-new-management-ui-new-sip-apis-and-linux-and-mac-os-x-support/" target="_blank">announced the release of the latest version of their Prophecy platform</a>.

Prophecy 9 includes a slew of new features, including (be still my heart) support for Linux.  I've run VoiceXML platforms on Linux before, but I do not have fond memories of the install / maintenance process.  The prospect of running a platform as easy to install and maintain as Prophecy on Linux is really exciting.

Head on over to the <a href="http://www.voxeo.com/prophecy/" target="_blank">Voxeo website</a> and check it out!

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>147</wp:post_id>
  <wp:post_date>2008-08-21 11:02:15</wp:post_date>
  <wp:post_date_gmt>2008-08-21 15:02:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voxeo-offers-advance-peek-at-prophecy-9</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[147]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[147]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Demystifying VoiceXML Subdialogs</title>
  <link>http://voiceingov.org/2008/10/03/demystifying-voicexml-subdialogs/</link>
  <pubDate>Fri, 03 Oct 2008 17:46:15 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=148</guid>
  <description/>
  <content:encoded><![CDATA[<i>Note "“ this post demonstrates the use of VoiceXML subdialogs.  The examples below were tested on the Voxeo Prophecy platform.  To download the Prophecy software and run these examples locally, go to <a href="http://www.voxeo.com/prophecy/" target="_blank">http://www.voxeo.com/prophecy/</a>.</i>

<strong>What are Subdialogs?</strong>

<a href="http://www.w3.org/TR/2004/REC-voicexml20-20040316/#dml2.3.4" target="_blank">Subdialogs</a> are a powerful, but often misunderstood, part of the VoiceXML specification that can be used to create reusable components for telephone applications.

The official W3C VoiceXML specification defines subdialogs thusly:

<blockquote>
A subdialog is like a function call, in that it provides a mechanism for invoking a new interaction, and returning to the original form. Variable instances, grammars, and state information are saved and are available upon returning to the calling document. Subdialogs can be used, for example, to create a confirmation sequence that may require a database query; to create a set of components that may be shared among documents in a single application; or to create a reusable library of dialogs shared among many applications.
</blockquote>

One of the most confusing aspects of subdialogs is that they run in a completely separate execution context from the dialog that invokes them (the parent dialog).  However, once developers get over this conceptual hurdle, the real power of subdialogs becomes apparent.

<strong>Fun with Subdialogs</strong>

One of the things I like most about subdialogs is their reusability.  I often find myself in situations where I need to collect input from a caller in several steps that are generally the same (i.e., a series of digits), but each has a specific validation requirement.

For example, in order to process a credit card payment there are several pieces of information that need to be obtained form a caller "“ credit card number, CVV number, expiration date, etc.  All have the same common characteristic that they are a series of digits, but all have unique verification requirements. Valid credit card numbers have specific lengths and must pass <a href="http://en.wikipedia.org/wiki/Luhn_algorithm" target="_blank">a "mod 10" check</a>.  CVV numbers are <a href="http://en.wikipedia.org/wiki/Card_Security_Code" target="_blank">specific lengths</a> for different card types.

As with a typical function call in any programming language, parameters can be passed into a VoiceXML subdialog when it is invoked.  These parameters often take the form of a string of text to be read out to the caller, or a number that is used to count actions.  However, we also have the option of passing more complex data types into a subdialog call

We can pass JavaScript arrays and custom object into a subdialog, or we can pass some of the native object types in JavaScript.  For example, every function that is declared in JavaScript is also an instance of the <a href="http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function" target="_blank"> JavaScript Function Object</a>.  So a JavaScript function that is declared in a parent dialog can be passed into a subdialog as a parameter.

For example, consider the following simple subdialog:

&lt;form id="S_1"&gt;

&lt;!-- Parameters passed into subdialog --&gt;
&lt;var name="myPrompt" /&gt;
&lt;var name="myFunction" /&gt;

&lt;catch event="noinput nomatch"&gt;
&nbsp;&nbsp;&lt;prompt&gt;That was not valid input.  Try again.&lt;/prompt&gt;
&nbsp;&nbsp;&lt;reprompt/&gt;
&lt;/catch&gt;

&lt;field name="getInput" type="digits"&gt;
&nbsp;&lt;prompt&gt;&lt;value expr="myPrompt"/&gt;&lt;/prompt&gt;
&nbsp;&nbsp;&lt;filled&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;if cond="myFunction(getInput)"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;return namelist="getInput"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;else/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;clear/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;throw event="nomatch"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;
&nbsp;&nbsp;&lt;/filled&gt;
&lt;/field&gt;

This subdialog accepts two parameters "“ a prompt that is read out to the caller, and a function that is used to validate the input.  The conditional logic in the &lt;filled&gt; block assumes that the function returns a boolean (true/false).

This same subdialog structure can be used to collect input that meets a wide range of validation criteria.  To use this subdialog to collect a 5-digit zip code, we would set the parameters as follows:

<blockquote>
// JavaScript function to determine length of a string variable
function isFive(x) {
&nbsp;&nbsp;if (x.length == 5 ) {
&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;}
    return false;
  }

&lt;param  name="myPrompt" expr="'Please enter your five digit zip code.'"/&gt;
&lt;param  name="myFunction" expr="isFive"/&gt;
</blockquote>

To use this subdialog to collect and validate a credit card numbers, we would set the parameters as follows:
<blockquote>
// JavaScript function to perform a mod 10 check
function mod10Check(x) {
&nbsp;&nbsp;&nbsp;&nbsp;// logic of mod 10 check
&nbsp;&nbsp;&nbsp;&nbsp;return true;
    }
    return false;
  }

&lt;param  name="myPrompt" expr="'Please enter your credit card number.'"/&gt;
&lt;param  name="myFunction" expr="mod10Check"/&gt;
</blockquote>


A sample VoiceXML document, demonstrating how this same basic subdialog can be used to collect different kinds of input <a href="../tutorials/sub_db_example.vxml.txt" target="_blank">can be found here</a>.

As this discussion shows, subdialogs are a tremendously powerful tool that can enhance the reusability of code and reduce the maintenance requirements of telephone applications.  So, if you find yourself in a situation where you need to collect the same type of input from a  caller several times during a call flow, take a look at subdialogs.

Their power and reusability have the potential to make your life a lot easier.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>148</wp:post_id>
  <wp:post_date>2008-10-03 13:46:15</wp:post_date>
  <wp:post_date_gmt>2008-10-03 17:46:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>demystifying-voicexml-subdialogs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[148]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[148]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a46c610c4815abcdc4cc67d23499be98</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Apps For Democracy</title>
  <link>http://voiceingov.org/2008/10/22/apps-for-democracy/</link>
  <pubDate>Wed, 22 Oct 2008 12:39:05 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=149</guid>
  <description/>
  <content:encoded><![CDATA[The District of Columbia is sponsoring an innovative contest to encourage developers to build applications that utilize data published on everything from <a href="http://data.octo.dc.gov/" target="_blank">crime locations to building permits</a>.

The development contest -- <a href="http://www.appsfordemocracy.org/" target="_blank">Apps for Democracy</a> -- is currently underway, and concludes on November 12th.

I've signed up for this contest and will be submitting an application for consideration -- I'll be building a multimodal application using <a href="http://www.voxeo.com/prophecy/" target="_blank">Voxeo Prophecy</a> and the <a href="http://www.voiceingov.org/blog/?page_id=41">HAWHAW PHP library</a>.  I hope to have it done by the end of the week and will post details here, and probably a video demonstrating how the app works.

Stay tuned...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>149</wp:post_id>
  <wp:post_date>2008-10-22 08:39:05</wp:post_date>
  <wp:post_date_gmt>2008-10-22 12:39:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>apps-for-democracy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[149]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[149]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>DC Crime Finder</title>
  <link>http://voiceingov.org/2008/10/30/dc-crime-finder/</link>
  <pubDate>Thu, 30 Oct 2008 19:15:05 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=150</guid>
  <description/>
  <content:encoded><![CDATA[The "DC Crime Finder" is a multimodal app that lets residents of the District of Columbia search for crime locations in their neighborhoods.

It uses <a href="http://data.octo.dc.gov/" target="_blank">actual crime data published by the District</a> and supports a wide range of devices for looking up addresses and crime locations. The DC Crime Finder works with traditional desktop web browsers, mobile devices and PDAs, smart phones, iPhones, G1 phones -- essentially any device that has a web browser and access to the Internet.

<img style="float:left;padding:15px;margin:5px;" title="DC Crime Finder" src="http://voiceingov.files.wordpress.com/2008/10/cell-phonethumbnail.gif" alt="" />

The application also works with ordinary cell phones and even land line phones. It sports a voice user interface (VUI) which makes it accessible from any old school telephone -- even a rotary phone (if anyone in DC still has one).

This application is my submission to the<a href="http://www.appsfordemocracy.org/" target="_blank"> Apps For Democracy</a> contest being sponsored by the District of Columbia and iStrategyLabs.

<strong>Get the App:</strong>

The source code for the application is hosted on <a href="http://code.google.com/p/dc-crime-locater/" target="_blank">Google Code</a>.

Its written in PHP and makes use of the <a href="http://www.hawhaw.de/" target="_blank">HAWHAW</a> PHP library by Norbert Huffschmid. This application should run equally well on Linux or Windows (I developed it on Ubuntu 8.04), but you'll need PHP 5 with SOAP support enabled.

You'll also need a MySQL database -- the District of Columbia provides information on crime locations in a variety of formats, including real time XML-based feeds. For this application, I opted to go with data in CVS format that I imported into a simple MySQL table. One of the things the application does is to calculate the distance of crime locations from a specific address. I believe that this calculation is much more efficiently done in the context of a database, rather than trying to use a real time XML feed (there are a <strong>lot</strong> of crime locations).

The other requirement, if you want to hear this application on a standard telephone or cell phone, is to grab a copy of <a href="http://www.voxeo.com/prophecy/" target="_blank">Voxeo Prophecy</a>. This app should run on most mature VoiceXML/CCXML platforms, but Prophecy is by far the easiest to use and the most standards compliant. Best of all, its free to download and use. If your interested in developing other telephone applications, consider signing up for a <a href="http://evolution.voxeo.com" target="_blank">free developer account</a> with Voxeo.

<strong>Test the App:</strong>

I've set up a demo of this application in a test environment. You can look at the visual interface for this application (which uses a simulator to mimic the look and feel of a cell phone browser) by <del>clicking here</del> (demo is no longer active). Any mobile device with a browser can also access the application -- the HAWHAW library uses some pretty slick device detection, so any device that can handle it should get standard XHTML. Smaller, or older devices will get old school WAP markup.

See <a href="http://www.voiceingov.org/blog/wp-content/app_view_ipaq-228x300.jpg" target="_blank">what this app looks like</a> in an older iPaq handheld device.

The beauty of this application is that when a voice browser (like Voxeo Prophecy) comes a knockin' it gets its standard markup language - VoiceXML. If you want to hear this application on a telephone, simply dial <del>(202) 684-7894.</del> (demo is no longer available.)
<blockquote><em><del>Note: this demo is currently running in a test environment, so you may experience the occasional hiccup. A production deployment of an application like this would be much more robust.</del></em>


<strong>Unfortunately, the demo is no longer active.</strong></blockquote>
<strong>Why a Multimodal App?</strong>

"Multimodal Applications" provide access to services and information through different modalities. This application provides access to crime information, including the ability to search for crime incidents by proximity, through a wide range of different client devices include traditional web browsers, handheld devices and PDAs, cell phones and standard land line telephones.

Unlike other applications that are targeted to a specific platform -- i.e., applications targeted to a desktop web browser, or to a specific handheld device -- the DC Crime Locater can be accessed from a range of different devices. The application is accessible from sophisticated handheld devices like iPhones or G1 phones and from standard home telephones.

This Multimodal paradigm can be used to improve access to other types of government information giving citizens more choices in the devices (and modalities) they will use to consume this information.

<strong>Special Thanks!</strong>

Serious props need to go to the folks in the <a href="http://www.octo.dc.gov/octo/site/default.asp" target="_blank">Office of the CTO</a> in Washington DC. You don't see very many government providing the kind of data that the Apps for Democracy challenge is based on. This innovative contest is a fantastic way to get development firms and independent developers (like moi) excited about building powerful applications.

Whether it's the U.S Census Bureau, the federal Departments of Labor or Commerce, a state health agency, or a local police force, governments are the repositories of vast amount of information. Much of this data has direct relevance for our everyday lives, and can't be obtained from any other source.

How governments make this information available for public consumption will define the debate on open government for many years to come.

I hope other governments follow DC's example in putting on this innovative contest.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>150</wp:post_id>
  <wp:post_date>2008-10-30 15:15:05</wp:post_date>
  <wp:post_date_gmt>2008-10-30 19:15:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dc-crime-finder</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1cf8f70c89dad837444e6f7bdee1db99</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ea591d1f8e37da035f4afefbdb1c3123</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_08bb398ebe346ae11c6d1183f7ccc558</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>40</wp:comment_id>
    <wp:comment_author><![CDATA[DelaWonk | Apps for Democracy]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.delawonk.com/?p=132</wp:comment_author_url>
    <wp:comment_author_IP>76.12.82.140</wp:comment_author_IP>
    <wp:comment_date>2008-11-13 18:28:13</wp:comment_date>
    <wp:comment_date_gmt>2008-11-13 22:28:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] In about a week, I had completed my application and submitted it to the contest organizers. You can read more about my application "“ and even download the source code "“ by visiting here. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-11-13 22:28:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>4879</wp:comment_id>
    <wp:comment_author><![CDATA[Blood, Sweat &amp; Civic Hacking | Open Data Science]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.opendatascience.com/blog/blood-sweat-civic-hacking/</wp:comment_author_url>
    <wp:comment_author_IP>198.71.238.44</wp:comment_author_IP>
    <wp:comment_date>2016-08-23 19:25:54</wp:comment_date>
    <wp:comment_date_gmt>2016-08-23 19:25:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] several early civic app challenges – including the Apps for Democracy Contest, in which I won a silver medal in one of the challenge categories – and I’ve been involved with open data and civic hacking since early 2008. I’ve helped [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>trash</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1471985082.6159470081329345703125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1471980355.395721912384033203125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1546095869.036256;s:5:"event";s:12:"status-trash";s:4:"user";s:6:"mheadd";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
      <wp:meta_value>0</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
      <wp:meta_value>1546095869</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Building a Custom Stats Monitor for Voxeo Prophecy</title>
  <link>http://voiceingov.org/2008/11/05/building-a-custom-stats-monitor-for-voxeo-prophecy/</link>
  <pubDate>Wed, 05 Nov 2008 22:12:22 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=153</guid>
  <description/>
  <content:encoded><![CDATA[I do a lot of work on the <a href="http://www.voxeo.com/prophecy/" target="_blank">Voxeo Prophecy platform</a>.  Pretty regularly, I have a need to check and see how many ports are in use, or how many active sessions are currently running on a Prophecy machine.

Prophecy has some nice features that make checking these stats pretty easy.  You can get a view of currently running sessions by pointing your browser at <em>sessions_10</em> on either the CCXML or VoiceXML control port -- for example, if you want to check CCXML sessions you would point to http://prophecy_ip:9999/sessions_10.  There is also another utility that provides a wealth of information on what is happening on your Prophecy server -- <em>stats_10</em>.

This utility is particularly useful because you can pass in query string parameters and customize the information that is returned, as well as the format that it is rendered in.  Pointing your browser to http://prophecy_ip:9999/stats_10?type=counters&amp;format=xml gets you a list of currently utilized ports and running CCXML sessions in a compact XML document.  As handy as this is, because its browser-based, you have to keep hitting refresh to get updated stats from your server.  Since this can be inconvenient, I decided to whip up a small AJAX-powered stats monitor for Voxeo Prophecy.

<strong>Requirements / Considerations:</strong>

<ul>
<li>You'll need to download the <a href="http://xajaxproject.org/" target="_blank">xajax PHP class library</a> to use this utility.  I downloaded 0.5 RC 2 Full -- you can do this by entering the following at the Linux command line:<em> wget http://xajaxproject.org/download/0.5_rc2/xajax_0.5_rc2_full.zip</em>.  Extract these files to a folder where PHP scripts can be executed. </li>

<img style="float:right;padding-left:10px;" src="http://www.voiceingov.org/blog/monitor_off.jpg" />

<li>  Before running this monitor, you'll want to make sure that you can run xajax applications -- do this by testing out the helloworld.php sample in the xajax/examples directory.  I developed this app on Ubuntu 8.10.  It should run just fine on Windows -- if you want to run this on the same machine as Prophecy you should use a separate PHP installation, not the one that comes bundled with Prophecy.</li>
</ul>

<strong>Get the Source Code:</strong>

You can <a href="http://www.voiceingov.org/tutorials/prophecy_stats_monitor.zip">get the code</a> for the custom stats monitor <a href="http://www.voiceingov.org/tutorials/prophecy_stats_monitor.zip">here</a>.

When downloaded, extract the files to the same directory where you placed your xajax files.  Open up the file called <strong>voxeo.php</strong> in an editor and modify the configuration options as needed.  The value of <em>$interval </em>determines how frequently an AJAX callback will be made to your Prophecy server to check stats.  You will want to change the value of <em>$prophecyHost</em> to the IP address of your Prophecy server.  You can add stats items to the <em>$counterNames</em> array if you want to check more than the basic level of stats.  Save and close this file when finished.

<img style="float:right;padding-left:10px;" src="http://www.voiceingov.org/blog/monitor_on.jpg" />

Open up the <strong>voxeo.php</strong> file in your web browser.  When the page loads, the stats monitor is not yet started -- click "Start Monitor" to engage.  When you make a test phone call to your Prophecy server, you will see the numbers change for ports and sessions.

Prophecy 9 is <a href="http://evolution.voxeo.com/forums/main.jsp?bb-cid=85&amp;bb-tid=718099" target="_blank">on the horizon</a>, and the good folks at Voxeo will likely be adding all sorts of eye candy that will make monitoring your Prophecy server a snap.  Still, it is nice to know that the Prophecy platform is open enough to support custom utilities that can help manage your server.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>153</wp:post_id>
  <wp:post_date>2008-11-05 18:12:22</wp:post_date>
  <wp:post_date_gmt>2008-11-05 22:12:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>building-a-custom-stats-monitor-for-voxeo-prophecy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ajax"><![CDATA[AJAX]]></category>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="digital-divide"><![CDATA[Digital Divide]]></category>
  <category domain="post_tag" nicename="prophecy"><![CDATA[Prophecy]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <category domain="post_tag" nicename="utilities"><![CDATA[utilities]]></category>
  <category domain="post_tag" nicename="voxeo"><![CDATA[Voxeo]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[153]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[153]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Behold the Power of Twitter</title>
  <link>http://voiceingov.org/2008/11/30/behold-the-power-of-twitter/</link>
  <pubDate>Sun, 30 Nov 2008 14:08:44 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=154</guid>
  <description/>
  <content:encoded><![CDATA[The recent terrorist attack in Mumbai has <a href="http://www.forbes.com/2008/11/28/mumbai-twitter-sms-tech-internet-cx_bc_kn_1128mumbai.html?feed=rss_news" target="_blank">underscored the power of Twitter</a> to instantly provide firsthand information on events as they unfold.

But Twitter can be more than just a powerful new tool for citizen-journalists, it can also be a powerful tool for governments to use as part of an emergency notification system.

There are plenty of <a href="http://fly4change.wordpress.com/2008/06/26/the-governments-a-twitter-comprehensive-list-of-government-twitter-feeds/" target="_blank">government information feeds on Twitter</a>, but I'm wondering when a state or local government will integrate a Twitter feed into an emergency notification system to generate Tweets on natural disaster warnings, amber alerts, weather emergencies and other types of emergencies.

There is a Twitter feed for <a href="http://twitter.com/amberalert" target="_blank">Amber Alerts</a> that is maintained by <a href="http://amberalert.com/" target="_blank">AmberAlert.com</a> - although this isn't a government agency, its exactly the idea I am referring to.

I hope some folks in law enforcement in state and local governments take notice.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>154</wp:post_id>
  <wp:post_date>2008-11-30 10:08:44</wp:post_date>
  <wp:post_date_gmt>2008-11-30 14:08:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>behold-the-power-of-twitter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="amber-alert"><![CDATA[Amber Alert]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[154]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[154]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Of Medicine and Broadband</title>
  <link>http://voiceingov.org/2008/12/03/of-medicine-and-broadband/</link>
  <pubDate>Wed, 03 Dec 2008 13:37:14 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=155</guid>
  <description/>
  <content:encoded><![CDATA[With services like <a href="http://www.bewell.com/" target="_blank">bewell.com</a> and <a href="http://www.americanwell.com/index.html" target="_blank">americanwell.com</a> popping up, it looks as if our interactions with doctors and medical professionals will increasingly take place on the Internet.

Whether its through the Facebook-like groups of BeWell (referred to as "expert-guided communities"), or through a web camera (i.e., the "virtual house call" pitched by American Well), the quality of a person's Internet connection may one day soon have a meaningful impact on the quality of medical information that person receives.

These new interactive medical services follow the unveiling of other web-based health services from both <a href="http://www.google.com/intl/en-US/health/about/index.html" target="_blank">Google</a> and Microsoft.

As health care services become increasingly web-based, the problem of the digital divide generally, and the <a href="http://www.pewinternet.org/PPF/r/220/report_display.asp" target="_blank">broadband divide</a> specifically, will become more acute.

This is an area where we could use some original thinking, and some fresh ideas.  Public policy leaders need to step up on this one - it ain't going to fix itself.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>155</wp:post_id>
  <wp:post_date>2008-12-03 09:37:14</wp:post_date>
  <wp:post_date_gmt>2008-12-03 13:37:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>of-medicine-and-broadband</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="digital-divide"><![CDATA[Digital Divide]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[155]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[155]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>CCXML, XMPP and PHP</title>
  <link>http://voiceingov.org/2008/12/05/ccxml-xmpp-and-php/</link>
  <pubDate>Fri, 05 Dec 2008 22:20:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=156</guid>
  <description/>
  <content:encoded><![CDATA[Ever want to build an IVR application that could do <a href="http://en.wikipedia.org/wiki/Screen_pop" target="_blank">screen pops</a>?  Want to build it using open standards / open source software?  Guess what; you can.  Here's how...
<ol>
	<li>Download yourself a copy of <a href="http://www.voxeo.com/prophecy/" target="_blank">Voxeo Prophecy</a></li>
	<li>Grab a copy of the very cool <a href="http://code.google.com/p/xmpphp/" target="_blank">XMPPHP library</a> from Google Code</li>
	<li>Get yourself an <a href="http://www.igniterealtime.org/projects/openfire/index.jsp" target="_blank">XMPP server</a> and a <a href="http://www.igniterealtime.org/projects/spark/index.jsp" target="_blank">client</a>, or simply use your Google account.</li>
</ol>

I won't go over all of the gory details here on how to build a screen pop capable IVR, but if you can build a simple CCXML app to accept an inbound call, you're more than ready to do this on your own.  You can also <a href="http://docs.voxeo.com/ccxml/1.0-final/home.htm" target="_blank">check out the Voxeo tutorials</a> for pointers.

On an inbound call, I usually grab the caller's <acronym title="Automatic Number Identification">ANI</acronym> in order to make it part of the screen pop:
<code>
&lt;transition state="'init'" event="connection.alerting"&gt;
&nbsp;&lt;assign name="ani" expr="event$.connection.remote"/&gt;
&nbsp;&lt;send target="'screen_pop.php'" targettype="'basichttp'" namelist="ani"/&gt;
&lt;/transition&gt;
</code>

Sending this information to a simple PHP script built with the XMPPHP library allows you to generate a screen pop via an instant message to the XMPP account of your choice:
<code>
connect();
$conn-&gt;processUntil("session_start");
$conn-&gt;message("someguy@someserver.net", "You are receiving a call from: $ani");
$conn-&gt;disconnect();
?&gt;
</code>

How cool is that!

Obviously there are lots of options for looking up information on the caller, once you have their ANI, that you can use to augment the information in your screen pop.

Just goes to show you, there isn't much you can't do with open source / open standards.

Viva screen pop!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>156</wp:post_id>
  <wp:post_date>2008-12-05 18:20:45</wp:post_date>
  <wp:post_date_gmt>2008-12-05 22:20:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ccxml-xmpp-and-php</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[156]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[156]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>41</wp:comment_id>
    <wp:comment_author><![CDATA[Khyle]]></wp:comment_author>
    <wp:comment_author_email>khyle.keys@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.web2voice.net</wp:comment_author_url>
    <wp:comment_author_IP>69.217.124.123</wp:comment_author_IP>
    <wp:comment_date>2008-12-05 18:43:48</wp:comment_date>
    <wp:comment_date_gmt>2008-12-05 22:43:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mark,

I did the same thing recently, but used Twitter instead.  Using the Twitter API, it's very easy to send a direct message.  I'm going to do the Google Talk next, just to get it working. Using my inbound number at IfByPhone,  I'm tying it to my contacts database so I can get a screen pop to see exactly who is calling, and what company they are with.

Great post.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-05 22:43:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>42</wp:comment_id>
    <wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2008-12-05 20:55:22</wp:comment_date>
    <wp:comment_date_gmt>2008-12-06 00:55:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<em>I did the same thing recently, but used Twitter instead. Using the Twitter API, it's very easy to send a direct message.</em>

That's a great idea - I'll have to try that next.

I'll also have to get cracking on some ifbyphone posts as well.  Stay tuned for that...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-06 00:55:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Voxeo Keeps on Rolling with VoiceObjects Acquisition</title>
  <link>http://voiceingov.org/2008/12/09/voxeo-keeps-on-rolling-with-voiceobject-acquisitions/</link>
  <pubDate>Tue, 09 Dec 2008 11:54:15 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=157</guid>
  <description/>
  <content:encoded><![CDATA[Voxeo just picked up their second important acquisition of the year, acquiring <a href="http://www.voiceobjects.com/index.html" target="_blank">VoiceObjects</a> "“ the makers of tool sets for developing, deploying and managing telephone applications.

I've always been interested in trying out the VoiceObjects <a href="http://www.voiceobjects.com/en/products/desktop/index.html" target="_blank">developer interface</a> "“ it integrates with the Eclipse IDE "“ and I have now downloaded their developer package to give it a test drive.  (Look for a future post on this topic.)

Earlier this year, Voxeo acquired a company called Micromethod -- a developer of SIP-based communication and collaboration software "“ and it almost immediately showed up as a benefit to Voxeo users by the <a href="http://blogs.voxeo.com/voxeotalks/2008/08/19/voxeo-announces-prophecy-9-with-new-management-ui-new-sip-apis-and-linux-and-mac-os-x-support/" target="_blank">inclusion of important new features in the forthcoming Prophecy 9</a>.  This means that Voxeo users will probably soon see some very interesting and useful new features in Prophecy as a result of the VoiceObjects acquisition.

Here is a snippet from <a href="http://www.emediawire.com/releases/2008/12/prweb1725624.htm" target="_blank">the announcement</a> that I read with interest:

<blockquote>
VoiceObjects uniquely enables the development of phone applications that can be deployed on a wide variety of VoiceXML platforms. This capability is in stark contrast to vendor-specific development solutions offered by Voxeo's competitors. These single-vendor solutions restrict application deployment to a vendor's own VoiceXML platform, denying the freedom of vendor independence and application portability the VoiceXML standard was designed to support. Voxeo will continue to openly and actively support VoiceObjects' application deployment on multiple VoiceXML platforms including Aspect, Avaya, Genesys, Intervoice and Nortel. VoiceObjects will also be available in extremely cost-effective on-demand and on-premise offerings bundled with Voxeo's own Prophecy VoiceXML Platform.</blockquote>

Application portability is a big issue for many developers (including myself), and its impressive that Voxeo has underscored their long standing commitment to this principle with their acquisition of VoiceObjects.

Overall, this is very exciting news , and I'm really looking forward to seeing the VoiceObjects tool set bundled with Prophecy (which, in my humble opinion, can now pretty much lay claim to the title of "Best Freakin' Voice Platform on the Market").]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>157</wp:post_id>
  <wp:post_date>2008-12-09 07:54:15</wp:post_date>
  <wp:post_date_gmt>2008-12-09 11:54:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voxeo-keeps-on-rolling-with-voiceobject-acquisitions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[157]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[157]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Thoughts on Gmail-SMS Chat</title>
  <link>http://voiceingov.org/2008/12/11/thoughts-on-gmail-sms-chat/</link>
  <pubDate>Thu, 11 Dec 2008 15:32:58 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=158</guid>
  <description/>
  <content:encoded><![CDATA[Having only used it briefly since enabling this new <a href="http://labs.google.com/" target="_blank">Google Labs</a> feature, I can say without hyperbole that it is 100 times greater than anything Google has ever done before!  (Seriously, though, it is pretty cool.)

In the past, I have used my <a href="http://gizmo5.com/pc/products/features/two-way-sms/" target="_blank">Gizmo client</a> to send SMS messages but it requires the pre-purchase of minutes from Gizmo and it always felt a little clunky to me.

<a href="http://gmailblog.blogspot.com/2008/12/really-new-in-labs-this-time-sms-text.html" target="_blank">Gmail-SMS chat</a> feels like a regular Gmail chat session, and it doesn't require the purchase of any credits to send them (although it may cost the person your sending the SMS to -- if it does, you should probably get them to upgrade their wireless plan).

From the Gmail blog announcing this feature:

<blockquote>
On the receiving end, when you get a text message from Gmail on your phone, it will come from a number in the 406 area code. (The l33t folks in the crowd will note that this spells G0O.) You can reply to this text on your phone just like you'd reply to any other text. The reply gets routed back to our Gmail servers and shows up in your friend's Gmail chat window. Each of your friends' messages will come from a different 406 number so you can reply to any message and it will get back to the right person. Messages from the same person will always come from the same number, so you can even bookmark it in your phone.
</blockquote>

If you haven't already, I suggest you give this new feature a try.  Very, very cool.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>158</wp:post_id>
  <wp:post_date>2008-12-11 11:32:58</wp:post_date>
  <wp:post_date_gmt>2008-12-11 15:32:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>thoughts-on-gmail-sms-chat</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[158]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[158]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Upgrade U</title>
  <link>http://voiceingov.org/2008/12/11/upgrade-u/</link>
  <pubDate>Thu, 11 Dec 2008 16:58:31 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=159</guid>
  <description/>
  <content:encoded><![CDATA[WordPress 2.7 is up and running.  This is my first post from the new QuickPress Dashboard utility.  Very cool.  The upgrade process was pretty simple.

Lots more updates to the site planned, including a new theme.  This should be done later today (hopefully).  Stay tuned.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>159</wp:post_id>
  <wp:post_date>2008-12-11 12:58:31</wp:post_date>
  <wp:post_date_gmt>2008-12-11 16:58:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>upgrade-u</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[159]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[159]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>43</wp:comment_id>
    <wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2008-12-11 16:34:15</wp:comment_date>
    <wp:comment_date_gmt>2008-12-11 20:34:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[New theme installed -- still tweaking, but I think it looks much better.

I've also got Google Friend Connect integrated.  Now I just need people to sign up... ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-11 20:34:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>More Governments Using Twitter</title>
  <link>http://voiceingov.org/2008/12/11/more-governments-using-twitter/</link>
  <pubDate>Thu, 11 Dec 2008 20:31:55 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=164</guid>
  <description/>
  <content:encoded><![CDATA[I posted a few weeks ago about the <a href="http://www.voiceingov.org/blog/?p=154" target="_blank">potential that Twitter has to assist governments</a> in disseminating information.  Since then, I've come across lots of stories on how governments are using Twitter for everything from traffic notifications to press releases to public meeting notices.

Government Technology has <a href="http://www.govtech.com/gt/articles/423688" target="_blank">an interesting piece</a> on how the State of Washington is using Twitter.

If you know of an interesting use of Twitter by a public sector organization, post a link to it in the comments section.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>164</wp:post_id>
  <wp:post_date>2008-12-11 16:31:55</wp:post_date>
  <wp:post_date_gmt>2008-12-11 20:31:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>more-governments-using-twitter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[164]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[164]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>My Favorite Linux Commands: find</title>
  <link>http://voiceingov.org/2008/12/14/favorite-commands-find/</link>
  <pubDate>Sun, 14 Dec 2008 20:45:14 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=186</guid>
  <description/>
  <content:encoded><![CDATA[Over the next week or so (as time allows), I'll attempt to write a short summary of my favorite Linux commands.  These are commands that I use regularly and make my life a lot easier.  Hopefully, they'll make your life easier too.  Up first, the <code>find</code> command.

Not surprisingly, you can use the <code>find</code> command to locate files (and other things ;-)).  What is surprising is the large number of options that you can set to find exactly the file(s) that you are looking for, and take action on them.

Let's say that I have a directory called "sale" with JPEG files in it that have differences in their file extension (i.e, some were saved as *.jpg, and some as *.JPG) and their permission settings.  I'd like to know how many of each I have, and then I'd like to change the permissions on a subset of them, to make those that are currently not readable by the "other" group readable.

First, lets see how many files are in the directory:

<code>$ find sale/ -type f -iname "*.jpg"
sale/P9130285.JPG
sale/P9130286.JPG
sale/P9130287.JPG
sale/P9130288.JPG
sale/P9130289.JPG
sale/P9130290.JPG
sale/P9130291.JPG
sale/phone_1.jpg
sale/phone_2.jpg
sale/phone_3.jpg
sale/phone_4.jpg
sale/phone_5.jpg</code>

Like other Linux commands, you can direct the output of <code>find</code> into another command to get a summary count of all the files located:

<code>$ find sale/ -type f -iname "*.jpg" | wc -l
12</code>

In the above example, I use the <code>-type</code> option and the <code>-iname</code> option to list all files with a .jpg extension (regardless of case).  Not surprisingly, using the <code>-name</code> option applies a similar, but case sensitive, pattern match on file names:

<code>$ find sale/* -type f -name "*.jpg"
sale/phone_1.jpg
sale/phone_2.jpg
sale/phone_3.jpg
sale/phone_4.jpg
sale/phone_5.jpg</code>

There are a large number of options that can be used, and the real power of this command comes from a thorough understanding of them.  One of the most useful, in my opinion, is the <code>-exec</code> option.  This option lets you do something specific with each file that is found.  To change the permissions on all files with a case sensitive  ".jpg" extension and make the files readable by the "other" group, you could use the following:

<code>find sale/* -type f -name "*.jpg" -exec chmod o+r {} ;</code>

The <code>-exec</code> option lets you specify another command that is run on each file found (represented by the {} argument).  Note, you also need to end the command issued by <code>-exec</code> with an escaped semicolon.  Using the <code>find</code> command in this way can be enormously helpful for doing things like clearing out old log files.  I typically use <code>find</code> in a cron job that searches directories for log files older than a certain amount of time (using the <code>-mtime</code> option) and then deletes them from the directory:

<code>find logs/ -type f -name "*log*" -mtime +30 -exec rm {} ;</code>

If you're like me you will probably have an arsenal of commands that you use on a regular basis, to quickly and easily do the things that you do almost every day.  Having the <code>find</code> command in your arsenal can make life a lot easier.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>186</wp:post_id>
  <wp:post_date>2008-12-14 16:45:14</wp:post_date>
  <wp:post_date_gmt>2008-12-14 20:45:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>favorite-commands-find</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/9ByMzs]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[186]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[186]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How Will Technology Change by 2020?</title>
  <link>http://voiceingov.org/2008/12/15/how-will-technology-change-by-2020/</link>
  <pubDate>Mon, 15 Dec 2008 13:34:07 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=213</guid>
  <description/>
  <content:encoded><![CDATA[It's a good question -- one that the people at the Pew Internet and American Life Project posed to a number of technology leaders.  You can read <a href="http://www.pewinternet.org/PPF/r/270/report_display.asp" target="_blank">their thoughts on where technology is going here</a>.

Many of the respondents are optimistic about the future of speech recognition, predicting its wide adoption and broad use in our daily lives by 2020.  Others are not so optimistic:

<blockquote>
"Voice will continue to be the most over-sold, over-hyped, but unused interface," noted Walt Dickie, executive vice president and CTO for C&amp;R Research.

"Voice recognition has been a holy grail of computing since 'Star Trek' in the 1960s," wrote Charles Ess, a researcher on online culture and ethics based at Drury University in Springfield, Missouri, a leader of the Association of Internet Researchers. "Like the artificial intelligence that was supposed to make it happen...it has faltered for a host of reasons, beginning with technical ones. Perhaps there will be some sort of technological breakthrough in the next few years that will make voice-recognition workable and affordable - but I'm not optimistic."</blockquote>

Perhaps the issue is less about speech recognition technology advancing to the point where we can carry on conversations with helpful machines just as we do with other humans (a la Star Trek) and more about adjusting our expectations for the role that speech recognition can play in how we interact with devices.

I've always thought that speech could most effectively play a complimentary role to other types of user interfaces (keyboard, mouse, stylus, touch screen).

I predict that by 2020 we will have better aligned out expectations of how speech recognition technology can be used, and that we will have more fully embraced the notion of <a href="http://www.w3.org/2002/mmi/" target="_blank">multi-modality</a>. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>213</wp:post_id>
  <wp:post_date>2008-12-15 09:34:07</wp:post_date>
  <wp:post_date_gmt>2008-12-15 13:34:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>how-will-technology-change-by-2020</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="post_tag" nicename="multimodality"><![CDATA[multimodality]]></category>
  <category domain="post_tag" nicename="pew-internet"><![CDATA[pew internet]]></category>
  <category domain="post_tag" nicename="speech-recognition"><![CDATA[speech recognition]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/zsmWH9]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[213]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[213]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>44</wp:comment_id>
    <wp:comment_author><![CDATA[Charles Ess]]></wp:comment_author>
    <wp:comment_author_email>cmess@drury.edu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>76.211.91.17</wp:comment_author_IP>
    <wp:comment_date>2008-12-15 18:02:55</wp:comment_date>
    <wp:comment_date_gmt>2008-12-15 22:02:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think you're right, FWIW - one of the comments I would have added as a follow-up, had they been possible, is very much along these lines.  That is, one of the things that made the Palm such a workable device was not the perfection of handwriting recognition software - but rather the recognition that humans are still much more flexible than machines, and we can, relatively quickly, learn Graffiti, rather than put the entire cognitive overhead of the interface on the software.  If this is what you mean by "adjusting our expectations for the role that speech recognition can play" - namely, that a speech-recognition equivalent to Graffiti might require us to learn a few tricks that are worth it in terms of overall enhancement of our interaction / efficiency - then yes, FWIW, I think you're exactly right.
cheers,
- c.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-15 22:02:55</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>45</wp:comment_id>
    <wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2008-12-15 19:36:08</wp:comment_date>
    <wp:comment_date_gmt>2008-12-15 23:36:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<em>
If this is what you mean by "adjusting our expectations for the role that speech recognition can play" - namely, that a speech-recognition equivalent to Graffiti might require us to learn a few tricks that are worth it in terms of overall enhancement of our interaction / efficiency...
</em>

That's exactly what I meant.

Don't get me wrong - I'm as excited by speech recognition as the next guy (if the next guy happens to be a bats**t crazy speech scientist ;-)).  I've just never bought the notion that the measure of "success" for speech recognition meant that we had to be able to have human-like "conversations" with every single device we want to interact with.

I think your statement that "...humans are still much more flexible than machines..." is right on the money.  Human use of language will always be more sophisticated and flexible than a machine's use of language.

Why spend all the time and money required to make a machine <em>seem</em> more human when it is far more efficient to train humans to modify their speech to more effectively interact with machines?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-15 23:36:08</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>46</wp:comment_id>
    <wp:comment_author><![CDATA[Dominique Boucher]]></wp:comment_author>
    <wp:comment_author_email>dominique.boucher@nuecho.com</wp:comment_author_email>
    <wp:comment_author_url>http://blog.nuecho.co</wp:comment_author_url>
    <wp:comment_author_IP>69.70.39.50</wp:comment_author_IP>
    <wp:comment_date>2008-12-16 14:13:29</wp:comment_date>
    <wp:comment_date_gmt>2008-12-16 18:13:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree with you. Speech recognition is not always the best user interface.

But even when it is, it requires a systematic and rigorous approach to get great performances. The speech industry has overhyped the technology, while in the same time offering close to nothing in terms of sophisticated tools to help achieve theses performances.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-16 18:13:29</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>What's up with the VoiceXML Forum?</title>
  <link>http://voiceingov.org/2008/12/15/whats-up-with-the-voicexml-forum/</link>
  <pubDate>Mon, 15 Dec 2008 05:52:38 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=218</guid>
  <description/>
  <content:encoded><![CDATA[Their <a href="http://www.voicexml.org/" target="_blank">website</a> has not been updated in a long time, nor has a related site - <a href="http://www.voicexml.org/Review/index.html" target="_blank">VoiceXML Review</a> (which actually used to have some pretty cool articles).

Their message board used to have some very good discussions, and developers would visit often to connect with others working thorough challenges in developing voice applications.   Unfortunately, it's been inactive for some time.

It would be good to see some activity from this organization, particularly on the multi-modal front.  The VoiceXML Forum had been spearheading the development of the <a href="http://www.voicexml.org/specs/multimodal/index.html" target="_blank">XHTML+Voice</a> standard, which appears to have <a href="http://www.voicexml.org/spec.html" target="_blank">been dormant</a> for some time.

Did I miss a memo or something?  What's the deal?  Somebody help me out.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>218</wp:post_id>
  <wp:post_date>2008-12-15 01:52:38</wp:post_date>
  <wp:post_date_gmt>2008-12-15 05:52:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>whats-up-with-the-voicexml-forum</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/03WyVT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[218]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[218]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The Upside of the Downturn</title>
  <link>http://voiceingov.org/2008/12/17/the-upside-of-the-downturn/</link>
  <pubDate>Wed, 17 Dec 2008 13:23:08 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=235</guid>
  <description/>
  <content:encoded><![CDATA[If there is an upside to the economic downturn, <a href="http://www.pcworld.com/businesscenter/article/155439/can_open_source_help_the_economy.html" target="_blank">some people think</a> it will be the broader adoption of open source software:

<blockquote>
In the last major economic downturn, Linux established itself as a widely-accepted enterprise operating system, benefiting a lively ecosystem of vendors such as Red Hat and Novell. The return of tough economic times puts the open source alternative again front and center, this time with focus on databases and higher-level software applications.</blockquote>

This is an area where governments should also look for cost savings an innovation opportunities but, sadly, it seems that few are.  Several years ago, I was involved in an effort to create a <a href="http://www.gocc.gov/" target="_blank">software repository for governments</a>, a place where governments could share software components with each other  -- sort of a Sourceforge for the public sector.  This wasn't an original idea -- certainly there are <a href="http://www.governmentforge.org/" target="_blank">other sites</a> that are similar in focus -- and initially there was great enthusiasm behind the idea, with a number of state governments (including the one I worked for) voicing early support.

Unfortunately because of a complete lack of vision in the IT leadership of my state, the decision was made not to sign on to the <strong>Government Open Code Collaborative</strong> project as a full member (an outcome that greatly contributed to my decision to leave state government).  Even more unfortunate, the entire project seemed to wither and die after the departure of the State of Massachusetts CIO, <a href="http://government.zdnet.com/?p=1963" target="_blank">Peter Quinn</a>.

I still think the idea of a software repository for the public sector is a good idea.  Unlike private sector entities, states and local governments -- with rare exception -- are not in direct competition.  (It doesn't seem likely that the Commonwealth of Pennsylvania will make a play to license the drivers of New York, or that the State of Indiana will try to undercut the State of Maryland's authority to manage the Chesapeake Bay Watershed.)  Governments can share software components in a way that private sector entities can not.

 So why aren't there any thriving public sector software repositories out there?  I wish I knew.

Maybe the current economic downturn will focus the attention of governments on the potential of this idea.  Here's hoping...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>235</wp:post_id>
  <wp:post_date>2008-12-17 09:23:08</wp:post_date>
  <wp:post_date_gmt>2008-12-17 13:23:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>the-upside-of-the-downturn</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[The Upside of the Downturn: maybe the current economic downturn will turn more governments on to open source software.]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/3DLeDG]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[235]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[235]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>It's Still All About the Phone</title>
  <link>http://voiceingov.org/2008/12/18/its-still-all-about-the-phone/</link>
  <pubDate>Thu, 18 Dec 2008 14:49:27 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=249</guid>
  <description/>
  <content:encoded><![CDATA[I've been <a href="http://www.voiceingov.org/blog/?cat=30">saying this for a while</a>.  Its all about the phone. Or, rather, it's <a href="http://news.cnet.com/8301-1035_3-10125982-94.html?part=rss&amp;subj=news&amp;tag=2547-1_3-0-20" target="_blank">all about the cell phone</a>.

<blockquote>
More than one in six American households, or 17.5 percent, depended solely on cell phones for their telephone communications during the first half of 2008, up from 13.6 percent a full year earlier, according to survey results released by the Centers for Disease Control and Prevention. And 13.3 percent of American households reportedly received all or almost all of their calls on cell phones despite having a landline telephone in their home.
</blockquote>

Governments and other organizations that are looking to build or acquire systems to notify people using telephones should take note of this.  Unlike traditional phones, cell phones offer a range of options for contacting people, aside from the standard voice conversation (SMS, e-mail, etc.).  In addition, cell phones are <a href="http://en.wikipedia.org/wiki/Enhanced_911" target="_blank">geographically aware</a>.

Next generation telephone notification systems will leverage the enhanced capabilities of cell phones to quickly deliver important information to citizens and taxpayers.  Its time to start building them...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>249</wp:post_id>
  <wp:post_date>2008-12-18 10:49:27</wp:post_date>
  <wp:post_date_gmt>2008-12-18 14:49:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>its-still-all-about-the-phone</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/u2E7en]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[249]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[249]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Wanted: One IM/VoIP Client That Does it All</title>
  <link>http://voiceingov.org/2008/12/21/wanted-one-im-client-that-does-it-all/</link>
  <pubDate>Sun, 21 Dec 2008 15:25:04 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=269</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Vacancy Description:</strong>

There is an immediate opening in my life for a smart, fast, next-generation IM client that can integrate with multiple social networks, standard XMPP servers, email and POP accounts and VoIP services.

<strong>Candidates already evaluated:</strong>

<strong><a href="http://www.digsby.com/" target="_blank">Digsby</a></strong>: Digsby is an IM client that connects to AIM, MSN, Yahoo, ICQ, Google Talk, Jabber, and Facebook Chat.
<blockquote><em>Pros:</em>
<ul>
	<li>Can be used to manage e-mail on different networks (Hotmail, Gmail, Yahoo Mail, AOL/AIM Mail, IMAP, and POP accounts).</li>
	<li>Integrates with social networks like Facebook (receive friend requests, etc.) and Twitter (change status).</li>
</ul>
<em>Cons: </em>
<ul>
	<li>Windows only (for now).</li>
	<li>Can't use for VoIP phone / video calls.</li>
</ul>
</blockquote>
<strong><a href="http://www.wengophone.com/index.php" target="_blank">WengoPhone</a></strong>: A SIP client that also integrates with IM networks such as Google and AIM.
<blockquote><em>Pros:</em>
<ul>
	<li>Multi-platform (runs on Windows, Linux or Mac).</li>
	<li>Supports SIP.</li>
	<li>Support for AIM and Jabber IM accounts.</li>
</ul>
<em>Cons: </em>
<ul>
	<li>Can't integrate with social networks like Facebook.</li>
	<li>Can't be used to manage e-mail accounts</li>
</ul>
</blockquote>
<strong><a href="http://www.meebo.com/" target="_blank">Meebo</a></strong>: A web-based service that integrates with a host of different IM and social networks, including Facebook and MySpace.
<blockquote><em>Pros:</em>
<ul>
	<li>Web-based -- no install required, and can be accessed from anywhere.</li>
	<li>Can connect to AIM, Yahoo, Google, MySpace, Facebook, Jabber and ICQ accounts</li>
</ul>
<em>Cons:</em>
<ul>
	<li>Can't use for VoIP phone / video calls.</li>
	<li>Ad supported, so I get asked if I want to watch Miley Cyrus videos on occasion (who doesn't though...)</li>
</ul>
</blockquote>
This position will remain open until a suitable candidate has been found.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>269</wp:post_id>
  <wp:post_date>2008-12-21 11:25:04</wp:post_date>
  <wp:post_date_gmt>2008-12-21 15:25:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>wanted-one-im-client-that-does-it-all</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="digsby"><![CDATA[Digsby]]></category>
  <category domain="post_tag" nicename="im"><![CDATA[IM]]></category>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="post_tag" nicename="meebo"><![CDATA[Meebo]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <category domain="post_tag" nicename="wengophone"><![CDATA[WengoPhone]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/qR2AsV]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[269]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[269]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>47</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2008-12-21 11:28:47</wp:comment_date>
    <wp:comment_date_gmt>2008-12-21 15:28:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I should also add that I am evaluating a nifty little client called <a href="http://www.voxox.com/" rel="nofollow">VoxOx</a>.

This one claims to do it all, but it's still in Beta.  Right now, it only runs on Windows and the integration to social networks is limited to Facebook.

I'm hopeful that this candidate will work out.  We'll see...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-21 15:28:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>48</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Mark-Headd/527353413</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2008-12-23 08:41:48</wp:comment_date>
    <wp:comment_date_gmt>2008-12-23 12:41:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[VoxOx is proving to be a little unstable (crashed on me this morning) and it's interface is kind of clunky.

Logging into Pidgin now...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-23 12:41:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Facebook Integration Enabled</title>
  <link>http://voiceingov.org/2008/12/23/facebook-integration-enabled/</link>
  <pubDate>Tue, 23 Dec 2008 13:04:35 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=305</guid>
  <description/>
  <content:encoded><![CDATA[I've been experimenting with <a href="http://developers.facebook.com/news.php?blog=1&amp;story=108" target="_blank">Facebook Connect</a> for a week or so now, and I've finally got it enabled for comments on this site.  I'm using a slightly modified version of the WP-FBConnect plugin that <a href="http://wiki.developers.facebook.com/index.php/WP-FBConnect" target="_blank">can be found here</a>.  I'll probably continue to tinker with the code as I use it more, and get a better feeling for what I like and don't like.
<img src="http://voiceingov.files.wordpress.com/2008/12/facebook.jpg" alt="facebook" title="facebook" style="float:left;margin-right:15px;margin-top:10px;margin-bottom:2px;" />
Enabling this plugin displays a new log in option for leaving comments -- users now have the option of logging into this site via Facebook Connect.  This will create a new account on the site that they can use to leave comments, manage their profile, etc.  Additionally, when a user leaves a comment, they have the option of having it published on their Facebook profile.  Pretty neat!

Now I'll just have to write some interesting posts so that people feel compelled to leave comments. ;-)

<strong>Note</strong> - I have noticed a little bit of strangeness when logging in via Facebook Connect using Firefox (the behavior has appeared when running Firefox 3.0.5 on both Linux and Windows).   After logging in, the page seems to revert to a pre-logged in state (the Facebook Connect button is displayed <em>after</em> a user has logged in).  A page refresh, or navigating to a new page seems to clear this issue, but it could be confusing for those using Firefox.  I'll have to dig into this some more to figure out what is causing it and get it resolved.

If you encounter any issues logging into this site with Facebook connect, leave the details for me in the comments section.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>305</wp:post_id>
  <wp:post_date>2008-12-23 09:04:35</wp:post_date>
  <wp:post_date_gmt>2008-12-23 13:04:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>facebook-integration-enabled</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/uzug3U]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[305]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[305]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Screen Pops with Asterisk and XMPP</title>
  <link>http://voiceingov.org/2008/12/23/screen-pops-with-asterisk-and-xmpp/</link>
  <pubDate>Tue, 23 Dec 2008 23:10:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=326</guid>
  <description/>
  <content:encoded><![CDATA[A few weeks ago, I wrote a post on <a href="http://www.voiceingov.org/blog/?p=156">using CCXML and PHP to do screen pops</a> with the <a href="http://www.voxeo.com/prophecy/" target="_blank">Voxeo Prophecy</a> platform.  The task was made incredibly easy with a nifty PHP class library <a href="http://code.google.com/p/xmpphp/" target="_blank">designed specifically to interact with XMPP servers</a>.

After getting screen pops working in Prophecy, I decided to try my hand at getting them to work in Asterisk (this is, after all, how the majority of phone calls to me are handled).  It turns out, the PHP script I developed to do screen pops in Prophecy can be reused to do the very same thing in Asterisk.  If you'd like to give this a try on your own, here is what you will need:

<ol>
<li>A working Asterisk instance.  (This example assumes you know how to modify Asterisk config files.)</li>
<li>A copy of the very cool <a href="http://code.google.com/p/xmpphp/" target="_blank">XMPPHP library</a> from Google Code. (This example assumes that the PHP code used to interact with XMPP servers is running on a separate server than the one housing Asterisk.  More on this below.)</li>
<li>An <a href="http://www.igniterealtime.org/projects/openfire/index.jsp" target="_blank">XMPP server</a> and a client, or simply use your Google account.</li>
</ol>

There are three components to this example.  First, you'll need a PHP script to interact with an XMPP server.  You can use the same script employed in my previous screen pop example:

<code>
connect();
$conn-&gt;processUntil('session_start');
$conn-&gt;message('someguy@gmail.com', 'You are receiving a call from: $ani');
$conn-&gt;disconnect();
?&gt;
</code>

Next, you'll need a simple AGI script for Asterisk to interact with.  This script will send an HTTP request to the PHP script above:

<code>
#!/bin/bash
# Contents of screen_pop.agi
# It don't get any easier than this...
curl http://ip_address_to_your_web_server/screen_pop.php?ani="$1"
</code>

On your Asterisk server, place this script in <code>/var/lib/asterisk/agi-bin/ </code>and ensure that it is executable.  You'll need to specify the IP address to the server running this script.  Note -- there isn't any reason that these two scripts can't run on the same machine (you can run PHP scripts on an Asterisk server), or even be consolidated into one single script (just make sure to include the XMPPHP library).  In fact, you <em>could</em> even run the XMPP server used to send screen pops on the same machine running Asterisk.

The mechanics of this specific example were influenced by the set up for my previous screen pop example, and I am (at heart) a lazy basterd.  But I digress...

The last piece to be put in place is to modify <code>extensions.conf</code> to ensure that our AGI script is invoked.  You'll want to add something like the following to the appropriate dial plan context (your specific Asterisk set up will influence this heavily):

<code>exten =&gt; 123,1,AGI(screen_pop.agi|${CALLERID(num)}) </code>

This will pass the caller ID to our AGI script, which will then invoke the PHP script and send the details of the call to the XMPP account of our choice.  I've noticed in practice that adding this to my dial plan causes the IM to be sent to my Google Talk account a good 2-3 seconds before the phone rings.  Plenty of time to give someone a heads up about who is on the other end of an incoming call.

Obviously there are lots of options for looking up information on the caller, once you have their caller ID, that you can use to augment the information in your screen pop.

Just goes to show you, there isn't much you can't do with open source / open standards.

Viva screen pop!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>326</wp:post_id>
  <wp:post_date>2008-12-23 19:10:45</wp:post_date>
  <wp:post_date_gmt>2008-12-23 23:10:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screen-pops-with-asterisk-and-xmpp</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
  <category domain="post_tag" nicename="openfire"><![CDATA[OpenFire]]></category>
  <category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
  <category domain="post_tag" nicename="screen-pop"><![CDATA[Screen Pop]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <category domain="post_tag" nicename="xmpp"><![CDATA[XMPP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[An example of how to generate screen pops with Asterisk, PHP and XMPP.  Open Source + Open Standards = Awesome! ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/917ynQ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[326]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[326]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0839f24c4b45a5fdce6026d26799e6a8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f6044240a79d637e21623decd7e71732</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>49</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Mark-Headd/527353413</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2008-12-24 13:27:14</wp:comment_date>
    <wp:comment_date_gmt>2008-12-24 17:27:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I will say that one major difference between doing screen pops in CCXML (via Prophecy) and doing them in Asterisk is that in CCXML I can issue the HTTP request that will launch my screen pop asynchronously from the logic that handles the incoming call.

The logic that handles the incoming call is not blocked while waiting for the outcome of the screen pop (in fact, it doesn't care one bit about the outcome of the screen pop).

In Asterisk, dial plan commands are executed in order (according to a priority).  This could be a problem if the AGI script that is invoked to launch the screen pop gets hung.  I don't want the logic that handles the inbound call to be stopped just because something goes wrong with the screen pop -- the screen pop is nice to have, but the inbound call is probably more important.

One thing I could do is run the AGI script in the background:

curl http://ip_address_to_your_web_server/screen_pop.php?ani="$1" <strong>&amp;</strong>

This should keep it from hanging the logic handling the rest of the inbound call.  I'm not really sure this will achieve the same level of "asynchronousity" that I have in CCXML but it's probably nor a bad thing to do anyway.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-24 17:27:14</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>50</wp:comment_id>
    <wp:comment_author><![CDATA[John Todd]]></wp:comment_author>
    <wp:comment_author_email>jtodd@digium.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.digium.com/</wp:comment_author_url>
    <wp:comment_author_IP>76.124.123.117</wp:comment_author_IP>
    <wp:comment_date>2008-12-27 14:12:39</wp:comment_date>
    <wp:comment_date_gmt>2008-12-27 18:12:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[In the latest versions of Asterisk (notably in 1.6 but I think this app  in 1.4) there is a command that will natively transmit XMPP messages from within the dialplan.  I've never seen it block, though I suppose it is possible.  Typically I get my messages sent in un-noticably short delays to my XMPP server.

I created a "dummy" user called "phonebot" on my jabber server, and then set it up in jabber.conf.  Now, I can send messages from that account to any user I want, based on call events coming into the system. Here's a three line example that notifies my primary XMPP account with the caller ID name and number and timestamp of when calls come in.  It's quite simple, and really useful for knowing what's going on in the system.

exten =&gt; 6083,1,JabberSend(phonebot,jtodd@jabber.loligo.com,"6083: Incoming call from ${CALLERID(all)} at ${STRFTIME(${EPOCH},GMT+8,%B %d %X Pacific)}")
exten =&gt; 6083,n,Dial(SIP/2001&amp;SIP/2003,25)
exten =&gt; 6083,n,Hangup

Last note: there is a branch in TRUNK right now that allows inbound messages to be sent to Asterisk systems, so the communication can be bi-directional.  One of our clever community members (Philippe Sultan) is working on more sophisticated XMPP interactions with Asterisk.  See http://svn.digium.com/svn/asterisk/team/phsultan/jabberreceive or http://bugs.digium.com/view.php?id=12569 for details and you can test it out.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-27 18:12:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>51</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2008-12-27 16:05:06</wp:comment_date>
    <wp:comment_date_gmt>2008-12-27 20:05:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks, John!  That's a great tip.   I'm currently running 1.4.21.1 -- I'm going to play around with this a bit and see if I can get it working.  (If I can't, I might upgrade to 1.6.)

I can still see some instances where using a custom AGI script to act as the "go between" for Asterisk and my XMPP server might still make sense.

For example, if I wanted to do a lookup in a data source using the caller's ANI -- i.e., to query a database or do a lookup in a CRM system -- and then add the details to my screen pop, I still might need to go outside the dialplan to do that.

Not sure if there is a way to do something like that from within the dialplan itself.  If anyone knows of a way to do this, please feel free to leave the details in a comment.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-27 20:05:06</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>52</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;.::: VOX POPULI :::&#8230;. &raquo; Blog Archive &raquo; Customizing Caller ID with CiviCRM and trixbox]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=544</wp:comment_author_url>
    <wp:comment_author_IP>76.12.174.225</wp:comment_author_IP>
    <wp:comment_date>2009-01-15 18:55:19</wp:comment_date>
    <wp:comment_date_gmt>2009-01-15 22:55:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] The site I set up is running a Red Hat-based LAMP stack with Drupal, CiviCRM and the CiviContribute module. I have the same set up mirrored in a local development environment that lets me test tweaks and upgrades to the site before they get pushed out into production. I also have an instance of trixbox CE running locally, and I decided to try and see if I could set up a trixbox PBX that uses CiviCRM as the data source for looking up caller information on inbound calls. This way, if a non-profit is using both CiviCRM and trixbox they could set their PBX to look up information about clients, donors, volunteers, etc. that call their offices and display this information in either a SIP client or in a screen pop. [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-15 22:55:19</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Steven Colbert on AT&amp;T</title>
  <link>http://voiceingov.org/2008/12/23/steven-colbert-on-att/</link>
  <pubDate>Tue, 23 Dec 2008 21:51:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=327</guid>
  <description/>
  <content:encoded><![CDATA[<p>In anti-trust we trust!</p>

[youtube http://www.youtube.com/watch?v=I6nuwQmhrZ8&hl=en&fs=1]
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>327</wp:post_id>
  <wp:post_date>2008-12-23 17:51:36</wp:post_date>
  <wp:post_date_gmt>2008-12-23 21:51:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>steven-colbert-on-att</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="att"><![CDATA[AT&amp;T]]></category>
  <category domain="post_tag" nicename="colbert"><![CDATA[Colbert]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/BgDtj4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[327]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[327]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How NOT to Manage an API</title>
  <link>http://voiceingov.org/2008/12/25/how-not-to-manage-an-api/</link>
  <pubDate>Thu, 25 Dec 2008 16:39:17 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=354</guid>
  <description/>
  <content:encoded><![CDATA[Recently, I decided to build a small application that interacts with the Twitter API, the <a href="http://cli.gs/api" target="_blank">cli.gs</a> API and Google Calendar to allow me to get advanced notice of any and all Boston Celtics games.  The app is actually live and can be <a href="http://twitter.com/celticsgames" target="_blank">followed on Twitter</a>.
<img src="http://voiceingov.files.wordpress.com/2008/12/celtics.gif" alt="Boston Celtics" title="Boston Celtics" style="float:left;margin-top:15px;margin-right:15px;margin-bottom:15px;padding-top:10px;padding-bottom:10px;padding-right:10px;" />
It's a pretty neat little application that runs on a daily <code>cron</code> job and queries a small database to see if there is a Celtics game on the following day.  If there is a game the next day, it generates a link to add the game to Google Calendar, shortens the link using the cli.gs API and sends out a Tweet with the game details and Calendar link.  Pretty sweet, right?

Unfortunately, almost immediately after going live the Twitter API started to return some nasty HTTP responses and I was unable to update the status of the <a href="http://twitter.com/celticsgames" target="_blank">celticsgames</a> account.  Specifically, the Twitter API started to return the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank">HTTP 417 response code</a>.  After doing a little Googling, I found that I was <a href="http://groups.google.com/group/twitter-development-talk/browse_thread/thread/7c67ff1a2407dee7?pli=1" target="_blank">not the only person</a> using the Twitter API to suddenly (and without any warning) run into a problem that broke their application.

The issue stems from the inclusion of the HTTP Expect header in the request that is sent to the Twitter API.  I'm using PHP and cURL to interact with the Twitter API.  Apparently, this header is sent by default with a value of '100-continue' by cURL (unless you override it and set a different value).  Seems the Twitter API grew very confused by this setting in the past few days.  The HTTP spec states that:

<blockquote>
A server that does not understand or is unable to comply with any of the expectation values in the Expect field of a request MUST respond with appropriate error status. The server MUST respond with a 417 (Expectation Failed) status if any of the expectations cannot be met or, if there are other problems with the request, some other 4xx status. </blockquote>

I did some checking and I can't find any mention on the Twitter API Wiki about a recent change that would have affected how the Twitter API responded to HTTP requests with the Expect header set in any particular way (it is possible, though, that I could have missed it).  I also referred to the specific list of <a href="http://apiwiki.twitter.com/REST-API-Documentation?SearchFor=expect+header&amp;sp=1#HTTPStatusCodes" target="_blank">HTTP status codes</a> returned by the API -- no mention of a 417 response at all.

In my opinion, this is a pretty crappy way to manage an API.  If your goal is to encourage third-party developers to build applications that work with your API, don't make breaking changes without going to great lengths to ensure the developer community understands how the change will impact them.  And for goodness sake, update your documentation.

Fortunately, there is a Celtics game on later today (during which they will absolutely pound the LA Lakers) -- that should take this bad taste out of my mouth.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>354</wp:post_id>
  <wp:post_date>2008-12-25 12:39:17</wp:post_date>
  <wp:post_date_gmt>2008-12-25 16:39:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-not-to-manage-an-api</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/u7A9JZ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[354]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[354]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>twitter_cards_summary_img_size</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{i:0;i:200;i:1;i:228;i:2;i:1;i:3;s:24:"width="200" height="228"";s:4:"bits";i:3;s:8:"channels";i:3;s:4:"mime";s:9:"image/gif";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>53</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2008-12-25 12:42:12</wp:comment_date>
    <wp:comment_date_gmt>2008-12-25 16:42:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[By the way, if you are using PHP cURL to interact with the Twitter API you can make the following change to address this issue.

When you set your options, simply add the following:

<em>curl_setopt($curl_handle, CURLOPT_HTTPHEADER, array('Expect:'));</em>

This will overwrite the default value of the Expect header with a blank one.  It seemed to fix my app.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-25 16:42:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>54</wp:comment_id>
    <wp:comment_author><![CDATA[Kevin F]]></wp:comment_author>
    <wp:comment_author_email>kevin.syrl@bluetie.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>66.67.142.33</wp:comment_author_IP>
    <wp:comment_date>2008-12-25 12:47:14</wp:comment_date>
    <wp:comment_date_gmt>2008-12-25 16:47:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good post Mark.  I agree.  Nothing more frustrating than not knowing how something is not working.  We are always updating our API and it doesn't go to production without documentation.

Happy Holidays!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-25 16:47:14</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>55</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2008-12-26 09:22:37</wp:comment_date>
    <wp:comment_date_gmt>2008-12-26 13:22:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Kev - I'll have to build one of these for Red Sox games soon...  (Although you know I'm a Phillies man.)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-26 13:22:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>First Draft of VoiceXML 3.0 Released </title>
  <link>http://voiceingov.org/2008/12/27/first-draft-of-voicexml-30-released/</link>
  <pubDate>Sat, 27 Dec 2008 18:09:01 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=375</guid>
  <description/>
  <content:encoded><![CDATA[The W3C has released the <a href="http://www.w3.org/TR/2008/WD-voicexml30-20081219/" target="_blank">First Public Working Draft of Voice Extensible Markup Language (VoiceXML) 3.0</a>.  This is the next version of the VoiceXML language that reportedly will include a host of new features, including speaker authentication.

Although this is an early draft, according to the document:

<blockquote>
By the middle of 2009 the group expects to have all existing functionality defined in detail, the new functionality stubbed out, and the VoiceXML 2.1 profile largely defined. By late-2009 the group expects to have all functionality defined and both profiles defined in detail.
</blockquote>

I've got to find some time to go through this document -- in addition to being a very interesting read, it might be kind of neat to provide input that might get incorporated into the standard by the W3C.

Guess I know what I'll be doing for New Year's Eve. ;-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>375</wp:post_id>
  <wp:post_date>2008-12-27 14:09:01</wp:post_date>
  <wp:post_date_gmt>2008-12-27 18:09:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>first-draft-of-voicexml-30-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <category domain="post_tag" nicename="voicexml"><![CDATA[VoiceXML]]></category>
  <category domain="post_tag" nicename="w3c"><![CDATA[W3C]]></category>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/JmAQQ5]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/JmAQQ5]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[375]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[375]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Most Interesting Public Sector IT Story of 2008</title>
  <link>http://voiceingov.org/2008/12/28/most-interesting-public-sector-it-story-of-2008/</link>
  <pubDate>Mon, 29 Dec 2008 01:18:24 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=384</guid>
  <description/>
  <content:encoded><![CDATA[Hands down this goes to <a href="http://www.infoworld.com/archives/t.jsp?N=s&amp;V=107545" target="_blank">the curious case of Terry Childs</a>; the City of San Francisco Network Administrator who allegedly "went rouge" and locked city officials out of the citywide network.

Childs, who seems to have become <a href="http://valleywag.gawker.com/5048957/why-san-francisco-deserved-to-lose-control-of-its-network" target="_blank">something of a cult hero</a> among IT professionals, was arrested earlier this year for his actions and <a href="http://news.cnet.com/8301-1009_3-10129313-83.html?tag=newsEditorsPicksArea.0" target="_blank">now faces trial</a> for them.

I suspect that we'll soon see "Free Terry Childs" shirts popping up.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>384</wp:post_id>
  <wp:post_date>2008-12-28 21:18:24</wp:post_date>
  <wp:post_date_gmt>2008-12-29 01:18:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>most-interesting-public-sector-it-story-of-2008</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[no]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[384]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[384]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>56</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2008-12-28 21:19:42</wp:comment_date>
    <wp:comment_date_gmt>2008-12-29 01:19:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sheesh.  That <a href="http://www.zazzle.com/free_terry_childs_sanfran_cisco_shirt-235105847663337156" rel="nofollow">didn't take long.</a>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-12-29 01:19:42</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Top VoIP Stories of 2008?  You Tell Me.</title>
  <link>http://voiceingov.org/2008/12/29/top-voip-stories-of-2008-you-tell-me/</link>
  <pubDate>Mon, 29 Dec 2008 23:56:08 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=395</guid>
  <description/>
  <content:encoded><![CDATA[It's the time of year when lists are made.

The end of the calendar year invokes some primal drive in all of us to list the best and the worst from the previous 12 months.  As it is with all other things, so it is with the world of telephony and VoIP.  Here is a list of the <a href="http://www.voip-news.com/feature/top-voip-innovations-2008-122308/" target="_blank">top 25 VoIP innovations for 2008</a> from VoIP News.  Here is <a href="http://voip.about.com/b/2008/12/28/best-voip-innovation-of-2008.htm" target="_blank">another list</a>.  And <a href="http://www.fiercevoip.com/special-reports/fiercevoips-fierce-15" target="_blank">another</a>.

I've got nowhere near enough energy to list my own personal top 25 VoIP stories or innovations for 2008.  Hell, I don't even have enough energy right now for 5.

Personally, I think the development of an <a href="http://share.skype.com/sites/en/2008/09/skype_for_asterisk_beta.html" target="_blank">official effort by Digium and Skype</a> to link up the Skype VoIP client and Asterisk is pretty exciting.

What do you think is the most innovative thing to happen in the world of VoIP in 2008?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>395</wp:post_id>
  <wp:post_date>2008-12-29 19:56:08</wp:post_date>
  <wp:post_date_gmt>2008-12-29 23:56:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>top-voip-stories-of-2008-you-tell-me</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/PnAeME]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[395]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[395]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Do Governments Need Standards for Microblogging?</title>
  <link>http://voiceingov.org/2009/01/03/do-governments-need-standards-for-microblogging/</link>
  <pubDate>Sat, 03 Jan 2009 17:33:41 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=405</guid>
  <description/>
  <content:encoded><![CDATA[Which governments are using the microblogging Juggernaut Twitter?  Actually, it can be hard to tell.

There are directories of governments using Twitter <a href="http://newthinking.bearingpoint.com/2008/11/20/govtwit-directory/#state" target="_blank">here</a>, and <a href="http://fly4change.wordpress.com/2008/06/26/the-governments-a-twitter-comprehensive-list-of-government-twitter-feeds/" target="_blank">here</a>.  They appear to be woefully inadequate -- my home state of Delaware, which posts its Tweets <a href="http://twitter.com/delaware_gov" target="_blank">here</a>, isn't listed in either.  I'm sure there are some other lists out there as well.

Part of the problem is that there is no standard naming convention for public sector Twitter accounts, as there are for things like <a href="https://www.dotgov.gov/help_qualify.aspx" target="_blank">state and local web site domain names</a>.  This can make finding your state or local government's Twitter feed (or your state legislature, elected officials, state lottery agency, local government etc.) somewhat difficult to find.

As more governments use Twitter - something <a href="http://www.voiceingov.org/blog/?p=154">I've argued in the past</a> would be a good thing -- this problem will become more acute.  What should state and local governments do?  Here are my suggestions:

<ul>
	<li style="margin-bottom:5px;"><strong>Follow standard naming conventions</strong>.  A good number of state-level Twitter accounts seem to incorporate "gov" into the account name, along with either the full name or two-letter abbreviation of the state.  State governments are probably the closest to standardizing on one naming convention for Twitter accounts, and there are <a href="http://www.nascio.org/" target="_blank">organizations in place</a> that can spearhead standards development.  There is much less uniformity in local government Twitter account naming and this is an area where states should show leadership and encourage local governments to follow standard naming conventions.</li>
	<li style="margin-bottom:5px;"><strong>Consolidate Twitter accounts at the same level of government</strong>.  Is it really necessary for state lotteries or transportation authorities to have their own Twitter feeds?  Why not borrow a concept utilized so successfully by state governments 6 or 7 years ago, when disparate agency web sites were consolidated into unified state "portals," and consolidate Twitter feeds into on single account.  It would make information both easier to find, and to consume. </li>
	<li style="margin-bottom:5px;"><strong>Proactively acquire meaningful Twitter account names</strong>.  There are restrictions on who can own <code>.gov </code> domain names.  No such restrictions exist for Twitter accounts, and as of yet there is no real recourse for "<a href="http://www.pcworld.com/article/153272/twitter_squatting.html" target="_blank">Twitter Squating</a>."  Using standard naming conventions would make the acquisition and maintenance of Twitter account names easier and more efficient. </li>
	<li style="margin-bottom:5px;"><strong>Spread the love</strong>.  Twitter rocks, but its <a href="http://en.wikipedia.org/wiki/Micro-blogging" target="_blank">not the only microblogging service</a> around, and there are no guarantees that it will be around forever.  Governments need to be smart in their use of Twitter and understand that microblogging (as a channel that is used to communicate with citizens and taxpayers, much like e-mail) is larger than Twitter alone. </li>
</ul>

To this last point, I'm not aware of any public sector entities using Identi.ca or other services, but it's bound to happen eventually -- especially since the <a href="http://www.readwriteweb.com/archives/identica_implements_the_twitte.php" target="_blank">Identi.ca API so closely mirrors the Twitter API</a>.  The development of other microblogging services is another factor that calls attention to the lack of naming standards for accounts used by public sector entities.

Unless governments get out in front of this issue now, it could diminish the benefits of using microblogging as a channel for communicating with citizens.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>405</wp:post_id>
  <wp:post_date>2009-01-03 13:33:41</wp:post_date>
  <wp:post_date_gmt>2009-01-03 17:33:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-governments-need-standards-for-microblogging</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/DhrQ1D]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[405]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[405]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>57</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;.::: VOX POPULI :::&#8230;. &raquo; Blog Archive &raquo; Twitter and the Public Sector]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=499</wp:comment_author_url>
    <wp:comment_author_IP>76.12.174.225</wp:comment_author_IP>
    <wp:comment_date>2009-01-12 15:23:44</wp:comment_date>
    <wp:comment_date_gmt>2009-01-12 19:23:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] few weeks ago, I wrote about the need for standards to guide governments in their use of microblogging platforms like [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-12 19:23:44</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>58</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;.::: VOX POPULI :::&#8230;. &raquo; Blog Archive &raquo; Spread the Love]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=532</wp:comment_author_url>
    <wp:comment_author_IP>76.12.174.225</wp:comment_author_IP>
    <wp:comment_date>2009-01-14 19:34:27</wp:comment_date>
    <wp:comment_date_gmt>2009-01-14 23:34:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] right. I&#8217;ve made this same argument about governments using Twitter. There are other microblogging sites out there, and governments need to make sure that their use of [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-14 23:34:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>(Not So) New Voice Application Development Tools</title>
  <link>http://voiceingov.org/2009/01/05/not-so-new-voice-application-development-tools/</link>
  <pubDate>Tue, 06 Jan 2009 00:26:48 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=438</guid>
  <description/>
  <content:encoded><![CDATA[Today I came across a couple of new services that aim to make the development of voice applications easier.  The question I have after reading about each is: why do we need these?

The first, <a href="http://voicephp.com/" target="_blank">VoicePHP</a>, is from <a href="http://tringme.com/" target="_blank">TringMe</a> -  a company that provides voice services and an API that developers can use to integrate telephony functions into web applications (e.g., click-to-call).  The other, <a href="http://www.twilio.com/" target="_blank">Twilio</a>, is a service that let's application developers use an XML-based markup language to develop telephone applications.

To be fair, I have not fully evaluated either service, but I will be developing test applications over the coming days and commenting further on each as deemed necessary (still waiting on my trial account to fully dig into VoicePHP).

<h3>VoicePHP</h3>

In a nutshell, VoicePHP <a href="http://voicephp.com/whyvoicephp.html" target="_blank">extends the PHP scripting language</a> for voice applications:

<blockquote>
VoicePHP will automagically give voice to all existing PHP APIs and language constructs.  For example:

<code>echo "Hello World";</code>

will speak "Hello World" instead of printing it

</blockquote>

In addition, VoicePHP appears to add several new PHP language constructs that are specific to voice applications.  I believe that these are intended to enable functionality for telephone-specific functions not present in the core PHP language (e.g., conducting a transfer).  The deployment model for applications built with VoicePHP is not entirely clear -- traditional web apps built with PHP render markup that is consumed by a web browser.  Where are VoicePHP applications executed?  In a plain old Apache web server like other PHP applications?  If so, how are <acronym title="Text-To-Speech">TTS</acronym> and <acronym title="Automatic Speech Recognition">ASR</acronym> handled?  How is integration with the telephony environment handled?

The idea of abstracting away the details of VoiceXML markup and using a mainstream programming language like PHP to build voice applications <a href="http://www.phpmagazine.net/docs/voicexml/" target="_blank">is not a new one</a>.  I've <a href="http://www.voiceingov.org/blog/?p=150">personally made use</a> of the fantastic <a href="http://www.hawhaw.de/" target="_blank">HAWHAW library</a> from Norbert Huffschmid to build voice and mobile applications, and anyone seriously considering building a voice application with PHP should give it a look.  So the question becomes, what does VoicePHP offer that existing approaches to using PHP to create voice applications do not?

I will admit that the basic premise of VoicePHP is attractive -- I'm eager to try it.  However, until my trial account is activated I'll just have to wait and offer what thoughts I have.

<h3>Twilio</h3>

<a href="http://www.twilio.com/" target="_blank">Twilio</a> is a service that allows developers to build voice applications using an XML-based language.  Twilio applications are executed in a hosted environment where implementation details like telephone number provisioning and interacting with the PSTN are handled through a simple web interface.  The Twilio environment interacts with an application platform via HTTP.

Developers can use a variety of different languages and platforms to interact with the hosted platform (i.e., generating the TwiML markup that performs telephony functions and user dialogs) -- PHP, Ruby, Python, etc.  The choice of a whether to use a back end database, integrate with other systems, interact with web services, etc. is left to the developer and all of these details occur outside the Twillo execution environment.  In a nutshell, Twillo aims to provide a simple way to develop and deploy a voice interface to web applications.

If that description sounds eerily close to the Raison d'être for VoiceXML then you're in the same place that I am.

It's not immediately clear to me what hole in the voice application development tool set Twilio is intended to fill.  This is exactly the purpose for the development of XML-based dialog languages like VoiceXML.  Companies like Voxeo, BeVocal, TellMe, VoiceGenie and others have provided hosting services similar to what Twillo provides <a href="http://www.voiceingov.org/blog/?p=146">for a while now</a> -- and they're pretty good at it too.

If VoiceXML is viewed as being too complex or to unweildy for a voice application, I would strongly recommend looking at a language like <a href="http://docs.voxeo.com/callxml/3.0/" target="_blank">CallXML</a>, which has a pretty healthy user base and a growing company like <a href="http://www.voxeo.com/" target="_blank">Voxeo</a> behind it.  CallXML is also close enough to <a href="http://www.gnutelephony.org/index.php/BayonneXML" target="_blank">other dialog languages</a> that it might be possible to port them to other platforms.  Twilio is the one and only company that supports TwiML.

Don't get me wrong, Twilio sounds pretty cool and I'm working on my first Twilio app right now.  I'm just not sure how (or if) it's going to change my life as a voice application developer.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>438</wp:post_id>
  <wp:post_date>2009-01-05 20:26:48</wp:post_date>
  <wp:post_date_gmt>2009-01-06 00:26:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>not-so-new-voice-application-development-tools</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/ypttgT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[438]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[438]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>More Public Sector Asterisk</title>
  <link>http://voiceingov.org/2009/01/07/more-public-sector-asterisk/</link>
  <pubDate>Wed, 07 Jan 2009 17:06:10 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=468</guid>
  <description/>
  <content:encoded><![CDATA[A while ago, I wrote about <a href="http://www.voiceingov.org/blog/?p=114">state and local governments using the Asterisk open source PBX</a>.

I just came across <a href="http://www.bryantsblog.com/?p=9">this piece on Deb Bryant's blog</a> about the State of Oregon using Asterisk for several projects.  A case study describing the project is also provided.

I've got to do some more research in this area and see if there is an easy way to get a count of state and local governments using Asterisk.  I have a feeling that the number is larger than most people would think, especially in light of the budget constraints facing governments in recent years.

Anyone have any thoughts?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>468</wp:post_id>
  <wp:post_date>2009-01-07 13:06:10</wp:post_date>
  <wp:post_date_gmt>2009-01-07 17:06:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-public-sector-asterisk</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/h94p8y]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[468]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[468]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>59</wp:comment_id>
    <wp:comment_author><![CDATA[debbryant]]></wp:comment_author>
    <wp:comment_author_email>bryant.deb@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.bryantsblog.com</wp:comment_author_url>
    <wp:comment_author_IP>69.69.94.137</wp:comment_author_IP>
    <wp:comment_date>2009-02-02 18:22:14</wp:comment_date>
    <wp:comment_date_gmt>2009-02-02 22:22:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Mark,

There is quite a bit of Asterisk use in state and local government.  In the Portland area, Metro has been running an Asterisk server for some time.  I can put you in touch with the manager there if you're interested.

Counting will take some research, but I'd be very interested in the results.  You might check out the National Association of Telecommunications Directors (I think the D is directors), an great association of state telecommunications managers, to start if you're thinking nationwide.  Their web site is http://www.nastd.org/home.aspx


Cheers,
Deb Bryant
Public Sector Communities Manager
OSU Open Source Lab (OSL)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-02 22:22:14</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>60</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-02-02 18:51:27</wp:comment_date>
    <wp:comment_date_gmt>2009-02-02 22:51:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks, Deb!

Actually I think it would be interesting to talk to someone from a public sector organization using Asterisk.

Can you share his/her contact info.?

You can e-mail me at mheadd [at] voiceingov [dot] org

Thanks!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-02 22:51:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Easier Doesn't Always Mean Better</title>
  <link>http://voiceingov.org/2009/01/09/easier-doesnt-always-mean-better/</link>
  <pubDate>Fri, 09 Jan 2009 20:00:02 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=486</guid>
  <description/>
  <content:encoded><![CDATA[I've been doing lots of research lately into tools, languages and platforms aimed at making the process of building voice applications easier.

These new tools offer extensions to existing programming languages like <a href="http://voicephp.com/" target="_blank">PHP</a> and <a href="http://www.softivr.com/" target="_blank">JavaScript</a>, or entirely new <a href="http://www.twilio.com/docs/api_reference/TwiML/" target="_blank">XML-based languages</a> for building voice applications.   Each of these new approaches has some appeal and each achieves (to some degree) the goal of making voice applications "easier" to build.

Still, these new tools raise some issues that may be reason for concern as well.

Before the advent of VoiceXML, languages and tools used to build IVR systems were vendor-specific.  No standards existed that would allow IVR systems built for one platform to be easily and efficiently ported to another.

Certainly there are instances where designing an IVR for a specific platform may rank as a higher priority than making the application portable (i.e., if a platform supports a specific feature that is critical to the application).  But having a standard language for building IVRs is good for developers too - if you can learn to build IVRs for one platform, your skills will be portable to other platforms (and to other jobs).

Building good IVR systems <a href="http://www.voiceingov.org/blog/?p=85">is hard</a>.  Really hard.  Examples of <a href="http://www.voiceingov.org/blog/?p=66">poorly developed systems</a> abound.  This is one of the reasons that satisfaction with IVR systems is generally low, and why projects like <a href="http://www.gethuman.com/" target="_blank">GetHuman</a> and <a href="http://fonolo.com/" target="_blank">Fonolo</a> have developed.

But the direct relationship between difficulty and quality isn't reserved to IVR applications.  Building good visual web applications is really hard as well:

How many web applications have you seen where the developer(s) did not think about important issues like accessibility, scalability, security, etc.?  How many development projects have you inherited or been involved with that contained poorly written, poorly documented or just straight up broken code?  How many stories have you seen that described a web site or application that suffered from a critical security hole that compromised personal information?

I don't think the answer to raising the satisfaction levels with IVR systems is to lower the barrier of entry (in terms of developer skill and experience) for creating them.

Is it harder for more junior developers to create sophisticated, secure, well built voice applications?  Yes.  And maybe it should be.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>486</wp:post_id>
  <wp:post_date>2009-01-09 16:00:02</wp:post_date>
  <wp:post_date_gmt>2009-01-09 20:00:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>easier-doesnt-always-mean-better</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/6V15WQ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[486]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[486]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_53a5e198c313e63bfc8c2b8a485521b8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1375054f504c9b4ffa76793167cbcc39</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5a9532638cae396e3ef46dab2251d670</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_62cfbdd3983368e3b2c1f5b7fc381bb4</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-slideshare"><iframe src="https://www.slideshare.net/slideshow/embed_code/772414" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/twilio/twilio-web-service-api-for-building-voice-applications-presentation" title="Twilio Web Service API for building Voice Applications" target="_blank">Twilio Web Service API for building Voice Applications</a> </strong> from <strong><a href="http://www.slideshare.net/twilio" target="_blank">Twilio</a></strong> </div></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_62cfbdd3983368e3b2c1f5b7fc381bb4</wp:meta_key>
    <wp:meta_value><![CDATA[1417926203]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0d77c0d7eb888674092bcb1698a8a3aa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7854d3d317a88dad52c77227b8939976</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-slideshare"><iframe src="https://www.slideshare.net/slideshow/embed_code/key/FEWtp2tJT2Krjn" width="178" height="265" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/twilio/twilio-web-service-api-for-building-voice-applications-presentation" title="Twilio Web Service API for building Voice Applications" target="_blank">Twilio Web Service API for building Voice Applications</a> </strong> from <strong><a href="http://www.slideshare.net/twilio" target="_blank">Twilio</a></strong> </div></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_7854d3d317a88dad52c77227b8939976</wp:meta_key>
    <wp:meta_value><![CDATA[1461840860]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>61</wp:comment_id>
    <wp:comment_author><![CDATA[Evan Cooke]]></wp:comment_author>
    <wp:comment_author_email>phy@twilio.com</wp:comment_author_email>
    <wp:comment_author_url>http://blog.twilio.com/</wp:comment_author_url>
    <wp:comment_author_IP>71.146.145.203</wp:comment_author_IP>
    <wp:comment_date>2009-01-10 02:51:14</wp:comment_date>
    <wp:comment_date_gmt>2009-01-10 06:51:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Mark,

Very interesting analysis.  You've done some excellent research into voice platforms.

Putting on my Twilio hat for a moment.
You've hit on what we think Twilio is all about: web developers.  There is this huge body of talent out there that already knows how to build and scale web applications, why make them learn a new API to build voice apps?

We strove to make Twilio as web-developer-friendly as possible while allowing developers to use their language of choose PHP/Python/Java/C#/VB etc.  While XML is part to our API, there are is also a large RESTful part as well:
http://www.twilio.com/docs/api_reference/REST/

While comparisons to VoiceXML and CallXML in inevitable (we created a little comparison here http://www.twilio.com/voicexml-comparison) our goal is to open voice applications up to a whole new audience.

You are absolutely right there are lots of web developers that did not think about important issues like accessibility, scalability, security but there are lots that do.  Here is a short presentation we put together describing the market.
http://www.slideshare.net/twilio/twilio-web-service-api-for-building-voice-applications-presentation

As you play around with Twilio, look at common tasks like accessing a recorded messages over the web or playing MP3s.  We've really tried to lower the bar and make hard stuff easy!  If there are things we've missed that you would expect to be there let us know.


-Evan]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-10 06:51:14</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>62</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-01-10 10:35:53</wp:comment_date>
    <wp:comment_date_gmt>2009-01-10 14:35:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Evan:

Thanks for your thoughtful reply.  I do think that services like Twillo are a good thing for voice application developers, and skilled developers of any stripe can use Twillo to make sophisticated, well-built, robust voice applications.

I guess the concern I was trying to express was that satisfaction levels with IVR systems has traditionally been very low.  It isn't hard to find examples of poorly designed IVRs.  Part of the answer for addressing this is making the principles of good voice application design more accessible to developers.

My own personal feeling is that the test of a good voice application development tool is not whether it can make developing voice applications easier, but whether it can make developing <strong>good</strong> voice applications easier.

Ultimately, though, I think that new services like Twillo will go a long way toward motivating other platform vendors (VoiceXML platforms in particular) to ensure that their platforms are easy to use and can support robust, well-built voice applications.

Thanks for the input!

BTW, I've added the Twillo blog to my blogroll.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-10 14:35:53</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>63</wp:comment_id>
    <wp:comment_author><![CDATA[Chris Rowe]]></wp:comment_author>
    <wp:comment_author_email>crowe77@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.79.182.131</wp:comment_author_IP>
    <wp:comment_date>2009-01-10 16:25:29</wp:comment_date>
    <wp:comment_date_gmt>2009-01-10 20:25:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Bringing voice apps to web developers is what CallXML did... eight years ago.  I've used both Twilio and CallXML.   Both are simpler than the other in various areas.  Both can be learned in an hour or two.  CallXML has functionality that goes way beyond Twilio's basic capabilities however:  speech recognition, conferencing, multi-leg call control, etc.  I'm sure Twillo will try to add these things over time, but as Mark said - alot of telephony is hard.   Twillo has taken on only the easy parts so far.  Best of luck.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-10 20:25:29</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>64</wp:comment_id>
    <wp:comment_author><![CDATA[Shai Berger]]></wp:comment_author>
    <wp:comment_author_email>shai@fonolo.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.shaiberger.com</wp:comment_author_url>
    <wp:comment_author_IP>74.13.217.130</wp:comment_author_IP>
    <wp:comment_date>2009-01-11 15:48:49</wp:comment_date>
    <wp:comment_date_gmt>2009-01-11 19:48:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mark,

Thanks for the mention.

It's true that a lot of people are driven to Fonolo out of frustration with IVRs. But I t see our role as much than an antidote to bad IVR design. Like it or not, the IVR interface is here to stay. First because it serves a gateway to live human interaction (usually a call center) and second because it is truly a least-common-denominator interface. Furthermore, the growing array of tools for building IVRs will drive up their prevalence.  What Fonolo does is leverage all the work companies (and IVR developers) have put into this particular interface and make it *better* by automatically adding a visual interface and some "smarts" like Deep Dialing and bookmarking.

Shai

Fonolo CEO and co-founder.

www.fonolo.com -- Try it out today for free!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-11 19:48:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>65</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-01-11 17:36:33</wp:comment_date>
    <wp:comment_date_gmt>2009-01-11 21:36:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Shai - I agree that what Fonolo has done is pretty darn cool.  Certainly didn't mean to pigeon hole you as the antidote to bad IVR design.

As an IVR developer, though, it is somewhat frustrating to see heaps of scorn placed on IVR systems that are designed poorly when it seems as if there are a lot more web sites that are poorly designed.

I've <a href="http://www.voiceingov.org/blog/?p=85" rel="nofollow">groused about this in the past</a>, and I'm obviously showing my bias here, but its pretty frustrating to see IVRs get what seems like the brunt of the criticism.  (Sorry for the rant...)

BTW, your on the blog roll now as well.  Cheers!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-11 21:36:33</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>New VoiceObjects Developer Edition Available</title>
  <link>http://voiceingov.org/2009/01/12/new-voiceobjects-developer-edition-available/</link>
  <pubDate>Mon, 12 Jan 2009 15:46:11 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=492</guid>
  <description/>
  <content:encoded><![CDATA[Just got an email informing me of a new devloper release of <a href="http://www.voiceobjects.com/en/products/index.html" target="_blank">VoiceObjects</a> (version 7.4).Â  This bit caught my attention:

<blockquote><strong>Support for 2-way SMS dialogs</strong>
VoiceObjects 7.4 has expanded the text channel so that in addition to USSD dialogs, text messaging from mobile devices using the Short Message Service (SMS) is now supported...</blockquote>

Wow!  If you're a developer and that doesn't get your juices flowing then you may want to get yourself checked out.

I'm going to download the new version today and start playing around with 2-way SMS messaging.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>492</wp:post_id>
  <wp:post_date>2009-01-12 11:46:11</wp:post_date>
  <wp:post_date_gmt>2009-01-12 15:46:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>new-voiceobjects-developer-edition-available</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[no]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[492]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[492]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Twitter and the Public Sector</title>
  <link>http://voiceingov.org/2009/01/12/twitter-and-the-public-sector/</link>
  <pubDate>Mon, 12 Jan 2009 18:21:07 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=499</guid>
  <description/>
  <content:encoded><![CDATA[A few weeks ago, I wrote about the <a href="http://www.voiceingov.org/blog/?p=405">need for standards to guide governments</a> in their use of microblogging platforms like <a href="http://twitter.com/" target="_blank">Twitter</a>.

Government Technology magazine has a <a href="http://www.govtech.com/gt/579338" target="_blank">new article</a> about the different uses being found for Twitter in the public sector, highlighting some popular applications -- including the use of Twitter for emergency notifications (something I've <a href="http://www.voiceingov.org/blog/?p=154">written about before</a>).  They even provide <a href="http://www.govtech.com/gt/articles/583303" target="_blank">a Twitter "primer"</a> for CIOs.

As the use of microblogging platforms by the public sector increase, I think the need for some basic standards will grow more acute.

It would be nice to see an organization like NASCIO or a similar organization step in and provide some guidance to governments that would help make public-sector Twitter accounts easier to find and more consistent.

<strong>UPDATE:</strong>

A friend just made me wise to <a href="http://www.fema.gov/media/2009/010909.shtm" target="_blank">an interesting event</a> taking place in just a few minutes:

<blockquote>
FEMA Administrator David Paulison will be available from 3 -3:30 pm Monday, Jan 12, 2009, to give a message and reply to questions using the agency's Twitter account, <a href="http://twitter.com/femainfocus" target="_blank">femainfocus</a>. The agency's top official will discuss where FEMA was, where it is now, and where he sees it going.
</blockquote>

This looks like a pretty novel way of using Twitter to communicate with the public, and I'm interested to see how it goes.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>499</wp:post_id>
  <wp:post_date>2009-01-12 14:21:07</wp:post_date>
  <wp:post_date_gmt>2009-01-12 18:21:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>twitter-and-the-public-sector</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/vMH09T]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[499]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[499]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>66</wp:comment_id>
    <wp:comment_author><![CDATA[Mike Mahaffie]]></wp:comment_author>
    <wp:comment_author_email>mike.mahaffie@state.de.us</wp:comment_author_email>
    <wp:comment_author_url>http://mahaffie.blogspot.com/</wp:comment_author_url>
    <wp:comment_author_IP>167.21.1.225</wp:comment_author_IP>
    <wp:comment_date>2009-01-12 14:46:48</wp:comment_date>
    <wp:comment_date_gmt>2009-01-12 18:46:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mark,

You might be interested in checking out a FEMA "Twitter Media Conference" at 3 today (1/12/09). This purports to be an availability of FEMA Administrator David Paulison for Q&amp;A over the <a href="http://twitter.com/femainfocus" rel="nofollow">femainfocus</a> twitter account.

Brilliant? Or a train wreck? We shall see.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-12 18:46:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>67</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-01-12 15:15:54</wp:comment_date>
    <wp:comment_date_gmt>2009-01-12 19:15:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mike - thanks for the heads up!  I'm going to try and join in.

I'm glad to see that they are asking everyone to use <a href="http://hashtags.org/tag/hastags" rel="nofollow">hashtags</a> in their Tweets.  Should be pretty easy to aggregate them afterwards using the <a href="http://apiwiki.twitter.com/Search+API+Documentation#Search" rel="nofollow">Twitter API</a>.

What an interesting use of Twitter...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-12 19:15:54</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Federal Government Goes Social</title>
  <link>http://voiceingov.org/2009/01/13/federal-government-goes-social/</link>
  <pubDate>Tue, 13 Jan 2009 18:20:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=511</guid>
  <description/>
  <content:encoded><![CDATA[A couple of pretty significant social networking developments this week relating to the federal government.

First, YouTube joined with members of Congress this week to launch <a href="http://www.youtube.com/senatehub" target="_blank">SenateHub</a> and <a href="http://www.youtube.com/user/househub" target="_blank">HouseHub</a> which aggregate YouTube channels for members of Congress.  Unfortunately, neither of my Senators (one of whom is about to become VP) has a YouTube channel.  Booo!

Also, the outgoing Adminstrator of FEMA, David Paulson, held a <a href="http://www.fema.gov/media/2009/010909.shtm" target="_blank">Twitter "media conference"</a> on Monday in which members of the public were allowed to submit questions and get answers via Twitter.  This is a neat idea, and a very novel use of Twitter.  I wish others would follow Administrator Paulson's lead.

All this, and its only Tuesday...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>511</wp:post_id>
  <wp:post_date>2009-01-13 14:20:18</wp:post_date>
  <wp:post_date_gmt>2009-01-13 18:20:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>federal-government-goes-social</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/9ySja9]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[511]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[511]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>68</wp:comment_id>
    <wp:comment_author><![CDATA[ATrain]]></wp:comment_author>
    <wp:comment_author_email>anthonyfarina@msn.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>52.129.8.48</wp:comment_author_IP>
    <wp:comment_date>2009-01-15 12:19:31</wp:comment_date>
    <wp:comment_date_gmt>2009-01-15 16:19:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ringo - How can you boo your former boss for not having a YouTube channel? After all, you taught him all the high-tech techniques...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-15 16:19:31</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>69</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Mark-Headd/527353413</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-01-15 13:10:36</wp:comment_date>
    <wp:comment_date_gmt>2009-01-15 17:10:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If I had a dollar for every elected official that ignored my counsel on on technology issues, I'd be a cash money millionaire.

In truth, though, he is <a href="http://carper.senate.gov/about/corner.cfm" rel="nofollow">blogging</a>. Just need to get him on YouTube.  One step at a time I guess...

Could be worse, he's not THIS bad --  http://www.youtube.com/watch?v=f99PcP0aFNE]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-15 17:10:36</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Comcast Breaks the Mold With Twitter</title>
  <link>http://voiceingov.org/2009/01/14/comcast-breaks-the-mold-with-twitter/</link>
  <pubDate>Wed, 14 Jan 2009 17:03:13 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=517</guid>
  <description/>
  <content:encoded><![CDATA[I just had a surreal customer service experience this morning that I feel I need to share.

Less than 2 hours ago, I tried opening a new browser tab and got an error.  I noticed that my Internet connection was down by glancing at the cable modem connected to my wireless router.

I needed to take break anyway, so before heading out for a fresh cup of coffee I decided to send out a quick Tweet using my cell phone.  Naturally I used my 140 characters to rail against the faceless monopoly that had left me stranded without a connection to <a href="http://www.youtube.com/watch?v=f99PcP0aFNE" target="_blank">the "Tubes"</a> -- its always easy to be dramatic and take cheap shots when no one is listening.

Except someone is listening...

Within an hour of my Tweet bashing Comcast, I had not one but <strong>two</strong> responses from Comcast Customer Support people on Twitter -- both asked very nicely how they could help.   This takes customer service to an entirely new level!

I'm absolutely blown that Comcast is monitoring Twitter and pro-actively responding to customer complaints in this way.   More companies should do this.  (Hell, more <a href="http://search.twitter.com/search?q=DMV" target="_blank">governments should do this</a>.)

From now on, if I have any problems with my Internet connection, my first order of business will be to use Twitter. Help from Comcast is only a Tweet away. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>517</wp:post_id>
  <wp:post_date>2009-01-14 13:03:13</wp:post_date>
  <wp:post_date_gmt>2009-01-14 17:03:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>comcast-breaks-the-mold-with-twitter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/4d19ht]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[517]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[517]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>70</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;.::: VOX POPULI :::&#8230;. &raquo; Blog Archive &raquo; Using Twitter to Respond to Natural Disasters]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=590</wp:comment_author_url>
    <wp:comment_author_IP>76.12.174.225</wp:comment_author_IP>
    <wp:comment_date>2009-01-20 17:57:12</wp:comment_date>
    <wp:comment_date_gmt>2009-01-20 21:57:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] during the recent ice storm to provide information to customers impacted by the storm. This is yet another example of a creative use of social networking tools by a utility [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-20 21:57:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>71</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;.::: VOX POPULI :::&#8230;. &raquo; Blog Archive &raquo; Twitter 2.0 for the Public Sector]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=651</wp:comment_author_url>
    <wp:comment_author_IP>76.12.174.225</wp:comment_author_IP>
    <wp:comment_date>2009-01-29 10:02:28</wp:comment_date>
    <wp:comment_date_gmt>2009-01-29 14:02:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] in a bidirectional manner, interacting with individual customers to resolve problems. I&#8217;ve blogged before about Comcast Customer Service on Twitter - the NY Times now has an interesting piece about Bank of America&#8217;s use of Twitter. These [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-29 14:02:28</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Spread the Love</title>
  <link>http://voiceingov.org/2009/01/14/spread-the-love/</link>
  <pubDate>Wed, 14 Jan 2009 23:30:03 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=532</guid>
  <description/>
  <content:encoded><![CDATA[Is YouYube getting  preferential treatment from governments?

Frederic Lardinois, of ReadWriteWeb, argues that <a href="http://www.readwriteweb.com/archives/the_youtube_government.php" target="_blank">when it comes to posting videos online</a> governments should spread the love:

<blockquote>
Lately, there has been a trend for government agencies and elected officials to put their videos up on YouTube. While we commend them for doing so, we can't help but wonder if this is, in the end, a positive trend. After all, while YouTube is definitely the most popular video sharing site, it is definitely not the only one.
</blockquote>

He's right.  I've made this <a href="http://www.voiceingov.org/blog/?p=405" target="_blank">same argument about governments using Twitter</a>.  There are other microblogging sites out there, and governments need to make sure that their use of new channels to communicate with citizens (whether through video or microblogging) is not targeted to one specific company.

Some might argue that using multiple video sharing or microblogging sites is just adding work.  Don't underpayed and overburdened public employees have enough to do?

If this is the argument, then I'd respond by saying that the use of these services should be automated -- almost all of them (certainly any of them worth using) have an <acronym title="Application Programming Interface">API</acronym> that makes it easy to develop scripts or applications that can significantly cut down the time and effort required to post content.  <a href="http://www.youtube.com/dev" target="_blank">YouTube</a> has one.  So does <a href="http://apiwiki.twitter.com/" target="_blank">Twitter</a>.

Social networking platforms are becoming the norm for government communication and outreach.  Its time for governments to get smart about their use of these services.

Automate your processes.  Use the APIs.  Spread the love.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>532</wp:post_id>
  <wp:post_date>2009-01-14 19:30:03</wp:post_date>
  <wp:post_date_gmt>2009-01-14 23:30:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spread-the-love</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="api"><![CDATA[API]]></category>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <category domain="post_tag" nicename="government-outreach"><![CDATA[government outreach]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <category domain="post_tag" nicename="youtube"><![CDATA[YouTube]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[532]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[532]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Customizing Caller ID with CiviCRM and trixbox</title>
  <link>http://voiceingov.org/2009/01/15/customizing-caller-id-with-civicrm-and-trixbox/</link>
  <pubDate>Thu, 15 Jan 2009 22:49:50 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=544</guid>
  <description/>
  <content:encoded><![CDATA[Recently, I had an opportunity to set up a <a href="http://civicrm.org/" target="_blank">CiviCRM</a> site for a client to use to track contributors.

I think CiviCRM is a great piece of software that can be enormously useful to non-profit organizations, and I'm actually surprised that more don't opt to use it.  It's powerful, robust, extensible and open source.

The site I set up is running a Red Hat-based <a href="http://www.redhat.com/magazine/003jan05/features/lamp/" target="_blank">LAMP stack</a> with <a href="http://drupal.org/" target="_blank">Drupal</a>, CiviCRM and the <a href="http://civicrm.org/civicontribute" target="_blank">CiviContribute</a> module.  I have the same set up mirrored in a local development environment that lets me test tweaks and upgrades to the site before they get pushed out into production.  I also have an instance of <a href="http://www.trixbox.org/" target="_blank">trixbox CE</a> running locally, and I decided to try and see if I could set up a trixbox PBX that uses CiviCRM as the data source for looking up caller information on inbound calls.  This way, if a non-profit is using both CiviCRM and trixbox they could set their PBX to look up information about clients, donors, volunteers, etc. that call their offices and display this information in either a SIP client or in a <a href="http://www.voiceingov.org/blog/?p=326">screen pop</a>.

The process of setting up trixbox to use CiviCRM as the data source for caller ID lookups couldn't be easier (note, I used these steps on trixbox version 2.6.1.10):
<ol>
	<li style="margin-bottom:4px;">Log into your trixbox and enter admin mode.</li>
	<li style="margin-bottom:4px;">From the toolbar, select <strong>PBX</strong> &gt;&gt; <strong>PBX Settings</strong>.</li>
	<li style="margin-bottom:4px;">From the FreePBX left-hand side menu (under "Inbound Call Control"), select <strong>CallerID Lookup Sources</strong></li>
	<li style="margin-bottom:4px;">In the section entitled "Add Source", enter the <em>Source Description</em> (CiviCRM), and <em>Source Type</em> (MySQL).  Using <em>Cache Results</em> will cache the CID lookup in AstDB.  Depending on your own set up, you may or may not feel the need to enable this setting.</li>
	<li style="margin-bottom:4px;">In the section entitled "MySQL" (appears after you designate the <em>Source Type</em>), enter the <em>Host</em>, <em>Database</em>, <em>Username</em> and <em>Password</em> to access your CiviCRM database.</li>
	<li style="margin-bottom:4px;">The section entitled <em>Query</em> is where you will enter the SQL query that will return the information you want to display about on incoming calls.  I used the following SQL (you can modify this as you like to alter your display information - note, the special token '[NUMBER]' is replaced with the caller ID of the incoming call):</li>

<blockquote><code>
SELECT CONCAT('CiviCRM: ',display_name) FROM civicrm_contact WHERE id = (SELECT id FROM civicrm_phone WHERE REPLACE(phone, '-', '') = SUBSTRING('[NUMBER]',-10))
</code></blockquote>

	<li style="margin-bottom:4px;">Click <strong>Submit Changes</strong>.</li>
	<li style="margin-bottom:4px;">Navigate to <strong>Inbound Routes</strong> (also under the "Inbound Call Control" section of the FreePBX menu).</li>
	<li style="margin-bottom:4px;">Select the route that you would like to use CiviCRM as the data source for.</li>
	<li style="margin-bottom:4px;">In the section entitled "CID Lookup Source", select <strong>CiviCRM</strong> from the drop down menu.</li>
	<li style="margin-bottom:4px;">Click <strong>Submit</strong>. </li>
	<li>Scroll to the top of the page and click on the orange bar that says <em>Apply Configuration Changes</em> and reload the settings.</li>

 </ol>

Thats it!

Now on an inbound call, the name of the CiviCRM contributor in the format <strong>CiviCRM: John Doe</strong> is displayed in my SIP client whenever a successful lookup occurs.  There are all sorts of options that can now be used to display the caller information to non-profit staff, send a <a href="http://www.voiceingov.org/blog/?p=326">screen pop</a>, route the call to a specific destination, etc.

CiviCRM and trixbox are a potent combination.  I hope this brief explanation of how to use the two together gets more non-profits excited about using them.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>544</wp:post_id>
  <wp:post_date>2009-01-15 18:49:50</wp:post_date>
  <wp:post_date_gmt>2009-01-15 22:49:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>customizing-caller-id-with-civicrm-and-trixbox</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="post_tag" nicename="civicrm"><![CDATA[CiviCRM]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
  <category domain="category" nicename="trixbox"><![CDATA[trixbox]]></category>
  <category domain="post_tag" nicename="voip"><![CDATA[VoIP]]></category>
  <category domain="post_tag" nicename="xmpp"><![CDATA[XMPP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[544]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[544]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Wireless Carriers to Sing Inaugural Blues?</title>
  <link>http://voiceingov.org/2009/01/19/wireless-carriers-to-sing-inaugural-blues/</link>
  <pubDate>Mon, 19 Jan 2009 13:06:31 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=579</guid>
  <description/>
  <content:encoded><![CDATA[ Interesting piece in the New York Times this morning about the <a href="http://www.nytimes.com/2009/01/19/technology/19cell.html" target="_blank">steps being taken by wireless carriers</a> to prepare for the inauguration.  The industry is expecting throngs of young, text messaging, picture sending, status updating supporters of Barack Obama to show up and use wireless services at unprecedented levels:
<img src="http://voiceingov.files.wordpress.com/2009/01/cell_tower.jpg" alt="Cell Tower in DC" title="Cell Tower in DC" style="float:right;margin-top:10px;margin-bottom:10px;margin-left:5px;padding-left:5px;" />
<blockquote>
The largest cellphone carriers, fearful that a communicative citizenry will overwhelm their networks, have taken the unusual step of asking people to limit their phone calls and to delay sending photos. The carriers are also spending millions of dollars to temporarily and substantially upgrade their networks in Washington.
</blockquote>

It will be interesting to see how their last minute efforts to shore up their networks in the Washington DC area hold up to the anticipated volume.

Also expected to be hammered during the inaugural: Twitter, Facebook and Flickr.  Should be an interesting day!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>579</wp:post_id>
  <wp:post_date>2009-01-19 09:06:31</wp:post_date>
  <wp:post_date_gmt>2009-01-19 13:06:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>wireless-carriers-to-sing-inaugural-blues</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/n3VLvW]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[579]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[579]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>twitter_cards_summary_img_size</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{i:0;i:240;i:1;i:180;i:2;i:2;i:3;s:24:"width="240" height="180"";s:4:"bits";i:8;s:8:"channels";i:3;s:4:"mime";s:10:"image/jpeg";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using Twitter to Respond to Natural Disasters</title>
  <link>http://voiceingov.org/2009/01/20/using-twitter-to-respond-to-natural-disasters/</link>
  <pubDate>Tue, 20 Jan 2009 21:56:59 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=590</guid>
  <description/>
  <content:encoded><![CDATA[Dan York of Voxeo has posted a <a href="http://blogs.voxeo.com/ett/2009/01/19/emerging-tech-talk-017-martin-murray-on-using-twitter-youtube-and-other-social-media-during-a-natural-disaster/" target="_blank">great interview</a> with Martin Murray of <a href="http://www.psnh.com" target="_blank">Public Service of New Hampshire</a> (PSNH) detailing the utility's response to an ice storm last month that knocked out power to a significant number of customers.

PSNH is New Hampshire's largest electric utility, serving more than 490,000 homes and businesses throughout the state.  The utility made extensive use of Twitter, YouTube and other social networking tools during the recent ice storm to provide information to customers impacted by the storm.  This is yet <a href="http://www.voiceingov.org/blog/?p=517">another example</a> of a creative use of social networking tools by a utility company.

Governments take heed!  In some parts of the country (including my home state of Delaware) <a href="http://www.demecinc.net/" target="_blank">local governments are also the local utility company</a>.  But more than that, the creative use of social networking tools by PSNH should stand as an example of the different ways governments can improve their communications with citizens using these tools.

What a great service it would be to find out how long the wait is at the local DMV, or to find out how long the wait in the automobile inspection lanes are via Twitter.  Or how about getting Tweets when trash or recycling picks up change because of a holiday?

There is enormous potential for improving the interactions between citizens and their governments using these tools.  Time for more governments to get with it]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>590</wp:post_id>
  <wp:post_date>2009-01-20 17:56:59</wp:post_date>
  <wp:post_date_gmt>2009-01-20 21:56:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>using-twitter-to-respond-to-natural-disasters</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <category domain="post_tag" nicename="disaster-response"><![CDATA[disaster response]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/JjS1sV]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[590]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[590]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Extension Methods vs. Prototype</title>
  <link>http://voiceingov.org/2009/01/21/extension-methods-vs-prototype/</link>
  <pubDate>Wed, 21 Jan 2009 21:50:09 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=611</guid>
  <description/>
  <content:encoded><![CDATA[I had my first exposure recently to <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx" target="_blank">extension methods</a> in C# (which I am still relatively new to):

<blockquote>
Extension methods enable you to "add" methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type. Extension methods are a special kind of static method, but they are called as if they were instance methods on the extended type. For client code written in C#...there is no apparent difference between calling an extension method and the methods that are actually defined in a type.
</blockquote>

This makes it easy to add functionality to existing types -- this comes in pretty handy if you find yourself doing the same thing a number of times in your code.  A good example of extension methods in action can be <a href="http://weblogs.asp.net/dwahlin/archive/2008/01/25/c-3-0-features-extension-methods.aspx" target="_blank">found here</a>.

I use a similar approach to format telephone numbers for readback in <acronym title="Text-to-Speech">TTS</acronym> when I need to render VoiceXML using C#/ASP.NET.  So, if I have a string representing a telephone number, it may be formatted as 555-111-3333, or (555) 111-3333, or 555.111.3333, etc.  When I render a phone number in VoiceXML (using the SSML <code>&lt;say-as&gt;</code> tag) I like to use a string of numbers only, no special delimiters or other characters, to ensure it is read out properly by the TTS engine.  Extension methods can help with this.

<strong>C# example:</strong>
<code>
public&nbsp;static&nbsp;class&nbsp;StringExtensionsClass
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;string&nbsp;GetOnlyNumbers(this&nbsp;string&nbsp;s)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MatchCollection&nbsp;col&nbsp;=&nbsp;Regex.Matches(s,&nbsp;&quot;[0-9]&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuilder&nbsp;sb&nbsp;=&nbsp;new&nbsp;StringBuilder();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(Match&nbsp;m&nbsp;in&nbsp;col)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(m.Value);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;sb.ToString();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}</code>


In ASP.NET, you would invoke this extension method as if it were a built in method of String:


<blockquote><code>
string telephoneString = &quot;(555) 111-3333&quot;;
...
Response.Write(&quot;&lt;say -as interpret-as=&quot;telephone&quot;&gt;&quot; + telephoneString.GetOnlyNumbers() + &quot;&lt;/say-as&gt;&quot;);
</code></blockquote>



Extension methods remind me a lot of the <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Class-Based_vs._Prototype-Based_Languages" target="_blank">prototype-based approach</a> of extending classes in JavaScript.

<strong>JavaScript example:</strong>
<code>
String.prototype.getNumbersOnly&nbsp;=&nbsp;function()
{
var&nbsp;mySplitString&nbsp;=&nbsp;this.split(&quot;&quot;);
var&nbsp;myMatch&nbsp;=&nbsp;new&nbsp;RegExp(&quot;[0-9]&quot;);
var&nbsp;myNumberString&nbsp;=&nbsp;&quot;&quot;;
&nbsp;&nbsp;for(var&nbsp;i=0;&nbsp;i&lt;mysplitstring.length;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if(myMatch.test(mySplitString[i]))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myNumberString&nbsp;+=&nbsp;mySplitString[i];
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;}
	return&nbsp;myNumberString;
};
</code>

In your VoiceXML code, you would invoke this custom method of the JavaScript String Object like this:


<blockquote><code>
&lt;var name=&quot;telephoneString&quot; expr=&quot;'(555) 111-3333'&quot;/&gt;
...
&lt;say -as interpret-as=&quot;telephone&quot;&gt;&lt;value expr=&quot;telephoneString.getNumbersOnly()&quot;/&gt;&lt;/say-as&gt;
</code></blockquote>


So, whether you need to modify your phone number string in your server-side code, or in your client-side code this approach can make the job easy and consistent.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>611</wp:post_id>
  <wp:post_date>2009-01-21 17:50:09</wp:post_date>
  <wp:post_date_gmt>2009-01-21 21:50:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>extension-methods-vs-prototype</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[611]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[611]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Learning to Cook... From a Cell Phone</title>
  <link>http://voiceingov.org/2009/01/22/learning-to-cook-from-a-cell-phone/</link>
  <pubDate>Thu, 22 Jan 2009 13:24:17 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=644</guid>
  <description/>
  <content:encoded><![CDATA[It's not easy to find someone more obsessed with phones than me.

Still, even I was somewhat surprised to learn how <a href="http://www.nytimes.com/2009/01/21/dining/21tele.html" target="_blank">important cell phones have become</a> in the kitchen:

<blockquote>
It has become the kitchen tool of choice for chefs and home cooks. They use it to keep grocery lists, find recipes, photograph their handiwork, look up the names of French cheeses, set timers for steak and soft-boiled eggs, and convert European or English measurements to American ones.

"It taught me to cook, really," said Kelli Howell, a college sophomore in Chicago, of her Nokia phone.
</blockquote>

Maybe that's why everything I cook is so bad.  I haven't been using my phone. ;-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>644</wp:post_id>
  <wp:post_date>2009-01-22 09:24:17</wp:post_date>
  <wp:post_date_gmt>2009-01-22 13:24:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>learning-to-cook-from-a-cell-phone</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[644]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[644]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Twitter 2.0 for the Public Sector</title>
  <link>http://voiceingov.org/2009/01/29/twitter-20-for-the-public-sector/</link>
  <pubDate>Thu, 29 Jan 2009 14:02:25 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=651</guid>
  <description/>
  <content:encoded><![CDATA[I've commented <a href="http://www.voiceingov.org/blog/?cat=20" target="_blank">numerous times in the past</a> about public sector organizations using Twitter.

By and large, the use of Twitter by the public sector is unidirectional - from Government to citizen.  This isn't a bad thing - microblogging services like Twitter can be used to notify citizens of all kinds of useful things; traffic delays, school closures, emergency notifications, amber alerts, etc.

However, a growing number of private sector organizations are beginning to use Twitter in a bidirectional manner, interacting with individual customers to resolve problems.  I've <a href="http://www.voiceingov.org/blog/?p=517">blogged before about Comcast Customer Service on Twitter</a> - the NY Times now has an interesting piece <a href="http://bits.blogs.nytimes.com/2009/01/23/problems-with-your-checking-account-try-twitter/" target="_blank">about Bank of America's use of Twitter</a>.  These companies join <a href="http://twitter.com/starbucks" target="_blank">Starbucks</a>, <a href="http://twitter.com/SouthwestAir" target="_blank">Southwest Airlines</a> and others using Twitter to interact with individual customers.

So it seems logical to start asking questions about when governments will start to use Twitter as a way of interacting with individual citizens.  I'm not aware of any governments doing this yet, even though a <a href="http://newthinking.bearingpoint.com/2008/11/20/govtwit-directory/#state" target="_blank">growing number are using Twitter</a> to push information out to citizens.  But in light of the financial challenges facing state and local governments, this might be an effective way to provide enhanced customer service without laying out huge bucks for new IT systems or hiring and training staff.

Thinking about how this could work for governments, it seems like <a href="http://twitter.pbwiki.com/Hashtags" target="_blank">hashtags</a> would be an ideal mechanism for achieving this.  In my home state of Delaware, the primary entry point for a large volume of citizen interactions with state government is through the <a href="http://www.delawarehelpline.org" target="_blank">Delaware Helpline</a>.  The Helpline maintains a staff of people to support phone lines that take calls from citizens with questions or problems.

Enabling citizen interaction with the Delaware Helpline via Twitter would be as easy as directing people to add the hashtag <strong>#DEHelp</strong> (or something similar) to their Tweets:


<blockquote>
Where can I get tax forms to pay my 2008 personal income taxes? #DEHelp

What are the hours for DMV to get a car inspected? #DEHelp

Looking for some #DEHelp. Where do I bring my Christmas tree to recycle it?</blockquote>



Using the <a href="http://apiwiki.twitter.com/Search+API+Documentation" target="_blank">Twitter API</a> (or popular tools like <a href="http://www.tweetdeck.com/beta/" target="_blank">TweetDeck</a>, <a href="http://www.twhirl.org/" target="_blank">Twhirl</a>, etc.) would make aggregating and tracking #DEHelp Tweets easy.

The old adage about the adoption of new technology holds that there is a significant lag between private sector adoption of new technology and public sector adoption of the same technology.  The growing number of public sector organizations using microblogging tools like Twitter appears to challenge this long held belief.

Perhaps public sector use of Twitter and other microblogging sites to interact with citizens is also not far behind...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>651</wp:post_id>
  <wp:post_date>2009-01-29 10:02:25</wp:post_date>
  <wp:post_date_gmt>2009-01-29 14:02:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>twitter-20-for-the-public-sector</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[651]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[651]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Audio Control in VoiceXML: Redux</title>
  <link>http://voiceingov.org/2009/02/04/audio-control-in-voicexml-redux/</link>
  <pubDate>Wed, 04 Feb 2009 22:52:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=666</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>
One of the questions I hear most from VoiceXML developers relates to audio control features in VoiceXML. VoiceXML does not natively support the ability to "rewind" or "fast forward" through audio files, but some vendors provide this functionality as extensions on their platforms.  </blockquote>

Does this mean you can't implement audio control in a VoiceXML application?  No, it doesn't.

Over 2 years ago, I wrote a post <a href="http://www.voiceingov.org/blog/?p=109">describing how to achieve audio control in VoiceXML</a> in a way that was portable and platform agnostic.  I continue to think that this is the right approach for achieving audio control in voice applications.

VoiceXML is a markup language that can be used in conjunction with any number of server side languages: PHP, Perl, Java, C#, Ruby, etc.  If it can be used to build a traditional web app, it can be used to build a VoiceXML app as well.

I think it's great that <a href="http://code.voicephp.com/getting-past-the-voicexml-limitations-voicephp-audio-player/" target="_blank">other platforms</a> are providing innovative ways to provide language-specific methods for achieving audio control in voice applications.

But the true power of VoiceXML is that it is standards based, runs on a large number of platforms, and won't shoehorn you into a programming language that may not be right for you.

VoiceXML = Flexibility, Portability, Opportunity!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>666</wp:post_id>
  <wp:post_date>2009-02-04 18:52:45</wp:post_date>
  <wp:post_date_gmt>2009-02-04 22:52:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>audio-control-in-voicexml-redux</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[666]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[666]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_90ef8e33805abfbcb433da99c78b0ce4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c698eb6bbe7b0f02908c520805562772</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_19016e592ac5fe02784ab54c095c8247</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>72</wp:comment_id>
    <wp:comment_author><![CDATA[Yusuf Motiwala]]></wp:comment_author>
    <wp:comment_author_email>apps+41178401793.553302568.0bcea3b2680d60034cc93cee0358ff93@proxymail.facebook.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Yusuf-Motiwala/553302568</wp:comment_author_url>
    <wp:comment_author_IP>122.172.27.211</wp:comment_author_IP>
    <wp:comment_date>2009-02-09 10:33:11</wp:comment_date>
    <wp:comment_date_gmt>2009-02-09 14:33:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice hack - really a out of the bound thinking!!! However, I am not clear on how will you get the current reference position from which the forward or rewind operation to be carried out. For that matter, I will be interested to know the details on how pause &amp; resume works.

Obviously, I differ with your last statement about VoiceXML being flexible. But irrespective of that, it is inspiring enough for me to write a blog on similar topic. Hopefully very soon!

Best,
Yusuf
http://tringme.com]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-09 14:33:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>73</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-02-09 12:22:50</wp:comment_date>
    <wp:comment_date_gmt>2009-02-09 16:22:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yusaf -

The reference position is obtained by using the marktime shadow variable.  In a nutshell, when the field playing the audio file is filled (i.e., when a grammar match occurs) the marktime shadow variable provides the number of milliseconds that have elapsed since the bargein that filled the field.  Its part of the <a href="http://www.w3.org/TR/2007/REC-voicexml21-20070619/#sec-mark" rel="nofollow">VoiceXML 2.1 spec</a> that provides an easy way for a developer to determine how long a caller listened to an audio file before they barged in and uttered a command.

Pause and resume are not implemented in my simple example, but they could very easily be added by including one more simple VoiceXML field and tweaking the existing field's grammar slightly.  I'd be happy to provide a code example if you would be interested.

I guess the point I wanted to make about flexibility is that the mechanics of audio file control are all available in VoiceXML.  Moreover, because VoiceXML is just markup, I can use any number of different languages and platforms to generate it, not just PHP.

Don't get me wrong - I love PHP, but I know that others do not.  The power of VoiceXML is that it does not lock a developer into a single language or platform.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-09 16:22:50</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Why Does Twitter Rock So Hard?</title>
  <link>http://voiceingov.org/2009/02/11/why-does-twitter-rock-so-hard/</link>
  <pubDate>Wed, 11 Feb 2009 14:54:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=678</guid>
  <description/>
  <content:encoded><![CDATA[Here's why.  From the <a href="http://blog.wired.com/business/2009/02/twitters-hackab.html" target="_blank">Wired Blog</a>:

<blockquote>
Using Twitter's application programming interface (API), a programmer with even a modest amount of experience can create a web app that gathers public data from Twitter, or uses it to send links, commands or bursts of information.

"[Twitter's] open API is a huge reason it has grown into such a platform...
</blockquote>

State and local governments strapped for cash (that's all of them I think) take heed.

Open up your data -- or, in the words of <a href="http://vivekkundra.blogspot.com/2008/12/building-digital-public-square.html" target="_blank">DC CTO Vivek Kundra</a>, "Democratize" your data -- and let the development community build apps for you.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>678</wp:post_id>
  <wp:post_date>2009-02-11 10:54:18</wp:post_date>
  <wp:post_date_gmt>2009-02-11 14:54:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-does-twitter-rock-so-hard</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[678]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[678]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Facebook Drama in Maryland</title>
  <link>http://voiceingov.org/2009/02/11/facebook-drama-in-maryland/</link>
  <pubDate>Wed, 11 Feb 2009 16:49:57 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=683</guid>
  <description/>
  <content:encoded><![CDATA[Seems the Maryland Legislature will <a href="http://www.washingtonpost.com/wp-dyn/content/article/2009/02/10/AR2009021003301.html" target="_blank">once again have access</a> to Facebook:

<blockquote>
Five days after sparking protests from lawmakers over his decision to block access to the popular networking site from legislative computers, the head of the assembly's information technology office said yesterday that he will reopen access to Facebook in the next day or two.
</blockquote>

It seems concerns over viruses and malware prompted the ban in the first place.  The Director of the Maryland Legislature's Information Services, Mike Gaudiello, now says that his office has "put in place tools to scan legislative computers for the viruses and harmful software that prompted the block...".

That raised my eyebrows a bit - while Facebook can be (and has been) used to propagate viruses, the biggest threat to government computers is undoubtedly still regular old e-mail.  If you've got safeguards in place to protect state computers from e-mail propagated viruses,  I'm guessing that you're probably covered as far as Facebook is concerned.

As social networking tools become more integral to the communications between elected officials and their constituents, a host of thorny issues are likely to arise.  I'm curious to see how governments will address these issues:

<ul>
	<li style="margin-bottom:5px;">Are the direct messages that people can send via Facebook and Twitter subject to public record requirements?
</li>
	<li style="margin-bottom:5px;">Are direct messages that people can send via Facebook and Twitter FOIA-able? </li>

	<li style="margin-bottom:5px;">Do status updates in Facebook or Tweets meet the requirements for public meeting notices?</li>
</ul>

It will be interesting to watch as this continues to develop.

BTW, Hats off to <a href="http://twitter.com/mmahaffie" target="_blank">@mmahaffie</a> for the link to the article.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>683</wp:post_id>
  <wp:post_date>2009-02-11 12:49:57</wp:post_date>
  <wp:post_date_gmt>2009-02-11 16:49:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>facebook-drama-in-maryland</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[683]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[683]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>74</wp:comment_id>
    <wp:comment_author><![CDATA[Mike Mahaffie]]></wp:comment_author>
    <wp:comment_author_email>MMAHAFFIE@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://mahaffie.bloogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>167.21.3.5</wp:comment_author_IP>
    <wp:comment_date>2009-02-11 14:14:07</wp:comment_date>
    <wp:comment_date_gmt>2009-02-11 18:14:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks, Mark!

Interesting questions. I wonder if we have institutional knowledge, or records, from when e-mail first became widely used by public officials? Maybe we can get some guidance from that experience.

It seems like we've always had it, but it has only been a few decades. I think?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-11 18:14:07</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>75</wp:comment_id>
    <wp:comment_author><![CDATA[Nitendra Rajput]]></wp:comment_author>
    <wp:comment_author_email>rnitendra@in.ibm.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.research.ibm.com/people/r/rajput</wp:comment_author_url>
    <wp:comment_author_IP>125.18.104.1</wp:comment_author_IP>
    <wp:comment_date>2009-02-17 00:12:12</wp:comment_date>
    <wp:comment_date_gmt>2009-02-17 04:12:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,

This is actually a comment on your article posted in 2006, titled "Detecting Caller Frustration", available at http://www.voiceingov.org/blog/?p=93. I apologise firstly to post it here... Could not find a way to post a comment to that article.

I'm using mark to identify the location where the user barged-in. However my prompt is not a TTS, but a long audio file. When I use mark in the  tag, the marktime is always returned as 0. However marktime works fine when I use TTS instead of a pre-recorded audio.

I hope this is not intended in VoiceXML 2.1 ? Or could be a platform specific problem. I'm using Genesys Voice Platform 7.5.

Any light on this problem will be appreciated beyond words,
Nitendra]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-17 04:12:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>76</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-02-17 09:34:52</wp:comment_date>
    <wp:comment_date_gmt>2009-02-17 13:34:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nitendra -

You can identify the point where a caller barges on a recorded audio prompt by using the marktime property of the application.lastresult$ object.

You can see an example of how this works <a href="http://www.voiceingov.org/blog/?p=109" rel="nofollow">in this post</a>, along with some sample code.  Note - I use the Voxeo Prophecy platform for this example.

If you still have trouble after reviewing the sample code I provide, let me know.

Hope this helps.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-17 13:34:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Command Line Twitter</title>
  <link>http://voiceingov.org/2009/02/17/command-line-twitter/</link>
  <pubDate>Tue, 17 Feb 2009 13:53:39 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=691</guid>
  <description/>
  <content:encoded><![CDATA[Just when I thought it couldn't get any easier to send out a Tweet, I lucked out and found <a href="http://www.commandlinefu.com" target="_blank">Command-line Fu</a>.

While browsing some very cool command line tricks, I happened upon a command to send out a Tweet using <code>curl</code> from the command line.  I've seen this kind of example before - there may even be something similar in the Twitter API Wiki - but for some reason it resonated with me this morning.  After playing around with it a bit, I've tweaked it to my liking:

<code>curl -s -u user:password -d status="$1" http://twitter.com/statuses/update.xml &gt; /dev/null</code>

You can drop this into a file using your favorite editor.  Save it and make sure the file is executable (<code>chmod u+x fileName</code>).  You can execute this file at the command line like this:

<code>$ ./fileName "This is the text of my Tweet."</code>

I've opted to redirect the output returned by executing the <code>curl</code> command (Twitter will respond to the request with an XML document) to the <a href="http://en.wikipedia.org/wiki/Data_sink" target="_blank">bit bucket</a>.  I've also opted to turn off the normal progress indicator used by <code>curl</code> by invoking the <code>-s</code> flag.  Feel free to tweak this to your heart's desire.

I'll definitely be sending out more Tweets from the command line, and I'll definitely be going back over to <a href="http://www.commandlinefu.com" target="_blank">Command-line Fu</a> for some more command line tricks.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>691</wp:post_id>
  <wp:post_date>2009-02-17 09:53:39</wp:post_date>
  <wp:post_date_gmt>2009-02-17 13:53:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>command-line-twitter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[691]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[691]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The Penguin Loves Obama</title>
  <link>http://voiceingov.org/2009/02/19/the-penguin-loves-obama/</link>
  <pubDate>Thu, 19 Feb 2009 20:54:56 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=700</guid>
  <description/>
  <content:encoded><![CDATA[Will he love the penguin back?

That's the hope of a number of prominent open source advocates who have written <a href="http://consideropensource.blogspot.com/" target="_blank">an open letter</a> to President Obama encouraging greater use of open source software in the federal government:
<img src="http://voiceingov.files.wordpress.com/2009/02/penguin.jpg" alt="penguin" title="Linux baby..." style="float:right;padding-left:20px;padding-right:15px;margin-top:15px;margin-bottom:15px;margin-left:10px;" />
<blockquote>
Mr. President, we believe the open-source industry is changing the world of software development in many of the ways you have promised to change American politics. The values of open source mirror those you promoted in your campaign: hope, change, and openness. We, the undersigned, sincerely hope that you will make the use of open-source software a key component of every new technology initiative the United States government enters into during your presidency.
</blockquote>

Here's hoping that President Obama sees the connection between his campaign's call for change and embracing better ideas for our future, and the principles of open source software development.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>700</wp:post_id>
  <wp:post_date>2009-02-19 16:54:56</wp:post_date>
  <wp:post_date_gmt>2009-02-19 20:54:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-penguin-loves-obama</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[700]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[700]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Behold the Power of the Command Line</title>
  <link>http://voiceingov.org/2009/02/23/behold-the-power-of-the-command-line/</link>
  <pubDate>Mon, 23 Feb 2009 17:25:42 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=718</guid>
  <description/>
  <content:encoded><![CDATA[After finding the unbelievingly cool and useful <a href="http://www.commandlinefu.com" target="_blank">Command-line fu</a> website, I have been consumed with finding and using powerful command line tools.  Here are some of the tools I've been playing with recently:

<strong>xmlstarlet</strong> - <a href="http://xmlstar.sourceforge.net/" target="_blank">xmlstarlet</a> is a powerful tool set for using and manipulating XML from the command line.  Anyone that interacts regularly with REST-based APIs should give this a look.

<strong>curl</strong> - I did a <a href="http://www.voiceingov.org/blog/?p=691">separate post on curl</a> and explained how to use it to interact with the Twitter API.  Things get cool fast when you start to combine these tools  by piping output from one command to another.  For example, using curl and xmlstarlet, you can get your Tweets from the command line (you can change the count parameter in the call to the Twitter API to get a different number of Tweets back):

<blockquote><code>curl -s -u user:password 'http://twitter.com/statuses/friends_timeline.xml?count=5' | xmlstarlet sel -t -m '//status' -v 'user/screen_name' -o ': ' -v 'text' -n</code></blockquote>

<strong>festival</strong> - why read text when you can <a href="http://www.cstr.ed.ac.uk/projects/festival/" target="_blank">have your computer speak to you</a>?  I'm now getting my daily horoscope via curl, xmlstarlet, festival and cron:

<blockquote>
<code>curl -s 'http://www.trynt.com/astrology-horoscope-api/v2/?m=2&amp;d=23' | xmlstarlet sel -t -m '//horoscope' -v 'horoscope' | festival --tts</code>
</blockquote>

When you've got tools like this, the command line is where its at!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>718</wp:post_id>
  <wp:post_date>2009-02-23 13:25:42</wp:post_date>
  <wp:post_date_gmt>2009-02-23 17:25:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>behold-the-power-of-the-command-line</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[718]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[718]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Ubuntu Asterisk Oddness</title>
  <link>http://voiceingov.org/2009/02/27/ubuntu-asterisk-oddness/</link>
  <pubDate>Fri, 27 Feb 2009 23:13:58 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=730</guid>
  <description/>
  <content:encoded><![CDATA[I have a virtual machine running Ubuntu 8.10 Server and I've been meaning to give <a href="http://www.voiceglue.org/" target="_blank">VoiceGlue</a> a try to see if I could set up my own completely open source VoiceXML platform,

I found that I was able to run <code>sudo apt-get install asterisk</code> at the command line, and I started to get excited.  This was going to be the easiest Asterisk install yet.  I was very soon disabused of this foolish notion.

The Asterisk install seemed to go smoothly, as did the basic set up and config.  Just to make sure I was doing things by the numbers I set up a couple of extensions and a quick test to have Festival read something back to me.  So far, so good.  Next it was on to the VoiceGlue install.

Following the instructions in the <a href="http://voiceglue.org/wiki/doku.php" target="_blank">VoiceGlue Wiki</a>, the install went smoothly.  All three VoiceGlue-related services started just fine (the <code>voiceglue</code> service itself barked at me because I had not yet set up call routing in /etc/voiceglue.conf - once I did this, it started up just fine.)

That's when things got weird.  The VoiceGlue Wiki says:

<blockquote>
Phoneglue also needs to be contacted via FastAGI for all calls that it will handle, and it needs to use a particular context, extension, and priority to send calls to itself.
</blockquote>

OK, no worries there.  I set up a new context in /etc/asterisk/extensions.conf and then reloaded the dialplan from the Asterisk console.  So far so good.  Then, the oddness set in.

I kept seeing an error in the Asterisk logs saying:

<blockquote><code>res_agi.c:229 launch_netscript: Connect to 'agi://localhost' failed: Connection refused</code></blockquote>

After banging my head against the wall trying to figure it out I decided to check and see if anything was listening on port 4573 (the default port for FastAGI). No dice.

I tried running the test AGI script comes with Asterisk (agi-test.agi).  Again, no dice.  In fact, it doesn't look like there are any directories containing AGI scripts anywhere.

Ubuntu Asterisk seems to be looking in /usr/share/asterisk/agi-bin/ - it doesn't exist.  Neither does the usual directory for AGI scripts (/var/lib/asterisk/agi-bin/).  Nor does another common directory - /var/spool/asterisk/outgoing.

Why is all of this missing from the Ubuntu version of Asterisk?  Anyone have any thoughts?  Did I miss something obvious during the install?

I'm still eager to try VoiceGlue, so it looks like I'll be building Asterisk from scratch.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>730</wp:post_id>
  <wp:post_date>2009-02-27 19:13:58</wp:post_date>
  <wp:post_date_gmt>2009-02-27 23:13:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ubuntu-asterisk-oddness</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[730]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[730]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>77</wp:comment_id>
    <wp:comment_author><![CDATA[Doug Campbell]]></wp:comment_author>
    <wp:comment_author_email>voiceglue@voiceglue.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceglue.org</wp:comment_author_url>
    <wp:comment_author_IP>24.63.224.60</wp:comment_author_IP>
    <wp:comment_date>2009-02-27 20:58:37</wp:comment_date>
    <wp:comment_date_gmt>2009-02-28 00:58:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Regarding your troubles getting voiceglue working, I suspect
the problem is not with Asterisk.  Voiceglue does not depend
on any of the client-side AGI configuration from Asterisk.

Instead, it appears that the phoneglue service is not running.
Perhaps it can't log in to the Asterisk Manager or something.

You can find out for sure by looking in the dynlog logs as
documented in the wiki's User Guide.

Hope this helps,
Doug Campbell]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-28 00:58:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>78</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-02-28 10:58:17</wp:comment_date>
    <wp:comment_date_gmt>2009-02-28 14:58:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Doug - you were right.  Not sure why the service wasn't running.

I restarted the virtual machine and ran a quick pgrep on each of the 3 services.  All are now running and I'm able to make test calls to VoiceGlue.

Thanks for your help!!  Looking forward to experimenting with VoiceGlue - hats off to you guys for your great work on the project.

I do still think its kind of weird about the missing directories in the Ubuntu Asterisk install - guess I'll dive deeper into that another day.

Thanks again!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-28 14:58:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>79</wp:comment_id>
    <wp:comment_author><![CDATA[Calvin]]></wp:comment_author>
    <wp:comment_author_email>caltyty@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>98.141.192.237</wp:comment_author_IP>
    <wp:comment_date>2009-03-09 12:47:43</wp:comment_date>
    <wp:comment_date_gmt>2009-03-09 16:47:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am not as successful as you were.  I get a database error after I install Asterisk on my Ubuntu 10.  I have to use a different user and pass but then went with the default and it still did not work.  I then have my sql database open without pass to the root just for troubleshooting and still no go.  Can you point me to a good installation manual that you used to install yours?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-03-09 16:47:43</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>80</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-03-09 13:28:00</wp:comment_date>
    <wp:comment_date_gmt>2009-03-09 17:28:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Calvin:

What exactly are you trying to install?

If you're just installing the base Asterisk program on Ubuntu 8.10, then you can do this with a simple <code>sudo apt-get install asterisk</code> - This will install Asterisk 1.4 on your system.

Since I'm doing pure SIP on my Ubuntu/Asterisk server, I'm not installing or configuring the Zapata telephony drivers or libpri.  Once you've installed the main Asterisk program, you can edit the config files you need to set up trunks, extensions and your dial plan rules.  Then you should be able to just do <code>sudo /etc/init.d/asterisk start</code> to start it up.

It sounds like you might be trying to install one of the Asterisk GUIs.  If so, have a look at https://wiki.ubuntu.com/AsteriskOnUbuntu - this might help you.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-03-09 17:28:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>VoiceGlue Up And Running</title>
  <link>http://voiceingov.org/2009/02/28/voiceglue-up-and-running/</link>
  <pubDate>Sat, 28 Feb 2009 15:24:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=737</guid>
  <description/>
  <content:encoded><![CDATA[I now have <a href="http://www.voiceglue.org/" target="_blank">VoiceGlue</a> up and running on Ubuntu 8.10.  (Actually, the Ubuntu server is running as a virtual machine under Sun's VirtualBox 2.1.)

For those that don't know, <a href="http://www.voiceglue.org/" target="_blank">VoiceGlue</a> is an open source project that links <a href="http://www.asterisk.org/" target="_blank">Asterisk</a> (the open source PBX) with <a href="http://www.speech.cs.cmu.edu/openvxi/index.html" target="_blank">OpenVXI</a> (an open source VoiceXML platform currently under the stewardship of Vocalocity).  VoiceGlue makes it possible for Asterisk users to deploy a completely open source VoiceXML platform for building IVRs and other useful applications.

The VoiceGlue install on Ubuntu 8.10 went smoothly -- I did <a href="http://www.voiceingov.org/blog/?p=730">run into an issue</a> with one of the services not starting, but that was easily identified and fixed thanks to a speedy response from the VoiceGlue folks.  (This issue was really my own fault -- use the <code>pgrep</code> command to make sure you have specific services running.  And when in doubt, check the logs people!)

Based on my experience with the install and my initial testing I am extremely impressed with VoiceGlue.  Its <a href="http://voiceglue.org/wiki/doku.php" target="_blank">well documented</a> and there is an <a href="http://www.voiceglue.org/pipermail/voiceglue/" target="_blank">active community of users</a> offering tips and troubleshooting advice.

Hats off to the people behind VoiceGlue -- Doug Campbell and Steve Smith.  Well done!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>737</wp:post_id>
  <wp:post_date>2009-02-28 11:24:45</wp:post_date>
  <wp:post_date_gmt>2009-02-28 15:24:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voiceglue-up-and-running</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/XPygap]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[737]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[737]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>81</wp:comment_id>
    <wp:comment_author><![CDATA[Doug K.]]></wp:comment_author>
    <wp:comment_author_email>doug.kersten@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>208.99.178.48</wp:comment_author_IP>
    <wp:comment_date>2009-03-03 18:46:15</wp:comment_date>
    <wp:comment_date_gmt>2009-03-03 22:46:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I like VoiceGlue a lot!  I was one of the very first people to try it and I can't tell you how much the people over there impress me, especially Doug Campbell.

Doug K.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-03-03 22:46:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Ides of March</title>
  <link>http://voiceingov.org/2009/03/03/ides-of-march/</link>
  <pubDate>Tue, 03 Mar 2009 15:28:35 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=744</guid>
  <description/>
  <content:encoded><![CDATA[This month promises to be an important one for the advancement of open standards for voice applications.

The World Wide Web Consortium is <a href="http://www.w3.org/Voice/#plan" target="_blank">scheduled to publish</a> the CCXML 1.0 standard as a "Candidate Recommendation" this month, an important step in the advancement of this standard and the first change in its status in some time (the standard has been stalled in "Last Call Working Draft" status since January of 1997).

I and other voice application developers are anxiously awaiting the arrival of this milestone.  The time has come to move this important standard forward.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>744</wp:post_id>
  <wp:post_date>2009-03-03 11:28:35</wp:post_date>
  <wp:post_date_gmt>2009-03-03 15:28:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ides-of-march</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/9L7EG6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[744]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[744]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Bad Week for Public Sector CIOs</title>
  <link>http://voiceingov.org/2009/03/17/bad-week-for-public-sector-cios/</link>
  <pubDate>Tue, 17 Mar 2009 17:00:12 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=752</guid>
  <description/>
  <content:encoded><![CDATA[In Delaware, the past week saw a State Auditor report released that showed <a href="http://www.delawareonline.com/article/20090311/NEWS/90311062" target="_blank">inappropriate use of state credit cards</a> by the former State CIO and several of his top staff members.

Now, in Washington, newly appointed federal CIO Vivek Kundra has <a href="http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=335877" target="_blank">taken a leave of absence</a> after FBI agents raided his former office (a week after he left) and arrested an office employee in a bribery scandal.

An altogether bad week for public sector CIOs.  If the way that governments use technology is to be reformed, public sector CIOs will simply have to do better than this.

What a shame.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>752</wp:post_id>
  <wp:post_date>2009-03-17 13:00:12</wp:post_date>
  <wp:post_date_gmt>2009-03-17 17:00:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>bad-week-for-public-sector-cios</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/Y7E2J9]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[752]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[752]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4138d9101d46434237c4b813d2fb2975</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ffc5dcf61d6fa4803d64982f44ec0476</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6f791152f7880d4bb90d1c357534e34d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>82</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-03-17 16:18:08</wp:comment_date>
    <wp:comment_date_gmt>2009-03-17 20:18:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Perhaps I spoke to soon - looks like Vivek Kundra may be back:

http://techpresident.com/blog-entry/breaking-news-cio-vivek-kundra-back-job

Fortunately, Jarrett is not coming back in Delaware. ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-03-17 20:18:08</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>New Project: Hear Me Say This</title>
  <link>http://voiceingov.org/2009/03/31/new-project-hear-me-say-this/</link>
  <pubDate>Tue, 31 Mar 2009 15:29:05 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=759</guid>
  <description/>
  <content:encoded><![CDATA[I haven't been blogging much of late because of a new project I have been working on -- <em><a href="http://hearmesaythis.org/" target="_blank">Hear Me Say This</a></em>.

<em><a href="http://hearmesaythis.org/" target="_blank">Hear Me Say This</a></em> is a web application that uses the Sunlight Labs API, the Twitter API and the plain old telephone to empower citizens to send a message to the people that represent them in Congress.

The application uses the <a href="http://www.voxeo.com/free/" target="_blank">Voxeo Prophecy platform</a> to support the VoiceXML and CCXML components it uses, and is hosted on a lean and mean Ubuntu web server. The back end is written in PHP 5 and uses a MySQL database.  Its open source, and uses the latest open standards for developing telephone applications.

I've entered this application in the Sunlight Labs "<a href="http://www.sunlightlabs.com/appsforamerica/" target="_blank">Apps for America</a>" contest -- I've been pleasantly surprised by the number of telephone apps entered in this contest (the others all appear to be Asterisk-based, mine is the only CCXML/VoiceXML-based app).

Now that the project is done, and my entry has been submitted, I'm focused on adding features and spreading the word.  If you're interested in testing it out, <a href="mailto:mheadd@voiceingov.org">give me a shout</a>.

One of the other things I'd like to do in the weeks ahead is to convert the voice portion of this application to use Voxeo's new <a href="http://www.tropo.com/" target="_blank">Tropo</a> platform.  Since the back end of the app is written in PHP, and since Tropo supports writing voice apps in PHP I think it would be an interesting experiment to rewrite the existing CCXML/VoiceXML pieces as PHP/Tropo components.

I think this will provide a nice way of comparing and contrasting voice applications built using the more (ahem) traditional VoiceXML route vs. the new hotness that is Tropo.

Stay tuned!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>759</wp:post_id>
  <wp:post_date>2009-03-31 11:29:05</wp:post_date>
  <wp:post_date_gmt>2009-03-31 15:29:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>new-project-hear-me-say-this</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/YaJ7DR]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[759]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[759]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Voxeo Announces New Tropo Hotness: COBOL!</title>
  <link>http://voiceingov.org/2009/04/01/voxeo-announces-new-tropo-hotness-cobol/</link>
  <pubDate>Wed, 01 Apr 2009 12:50:56 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=768</guid>
  <description/>
  <content:encoded><![CDATA[Several weeks ago, Voxeo rocked the voice application development world by introducing <a href="http://www.tropo.com/" target="_blank">Tropo</a>, a new platform that allows developers to build voice applications in a <a href="http://docs.tropo.com/" target="_blank">variety of different languages</a>.

Tropo lets developers build voice applications in JavaScript, Ruby, Python, PHP and more.  I mentioned Tropo briefly in <a href="http://www.voiceingov.org/blog/?p=759">my last post</a>, where I describe a voice application I built using VoiceXML/PHP -- I'll be porting this app to Tropo shortly so that it will be close to 100% PHP and running on the Tropo platform.

Voxeo announced today that they are adding support for yet another development language to Tropo -- <strong>COBOL</strong>.  This is big - it brings the total number of languages supported to a half dozen.  I can't wait to see what Voxeo has in store for Tropo next!

Let me tell you something - you go into a bar and drop some hints that you are coding your Tropo app in COBOL and you will not be leaving alone.

I guarantee it!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>768</wp:post_id>
  <wp:post_date>2009-04-01 08:50:56</wp:post_date>
  <wp:post_date_gmt>2009-04-01 12:50:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voxeo-announces-new-tropo-hotness-cobol</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/t88MmH]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[768]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[768]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>83</wp:comment_id>
    <wp:comment_author><![CDATA[PHP Tutorials]]></wp:comment_author>
    <wp:comment_author_email>crivion@crivionweb.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.crivionweb.com/phpblog</wp:comment_author_url>
    <wp:comment_author_IP>90.197.192.13</wp:comment_author_IP>
    <wp:comment_date>2009-04-25 13:53:51</wp:comment_date>
    <wp:comment_date_gmt>2009-04-25 17:53:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You have a great blog here and it is Nice to read some well written posts that have some relevancy...keep up the good work ;)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-04-25 17:53:51</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Book Review: AGI 1.4 and 1.6 Programming</title>
  <link>http://voiceingov.org/2009/04/06/book-review-agi-14-and-16-programming/</link>
  <pubDate>Mon, 06 Apr 2009 13:59:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=773</guid>
  <description/>
  <content:encoded><![CDATA[Have you been working with Asterisk for a bit and want to use it to build some more sophisticated applications?  Are you looking to build and <acronym title="Interactive Voice Response">IVR</acronym> solution, but are a bit wary of what you will be able to accomplish with the Asterisk dialplan alone?  Are you comfortable on the Linux command line and with using PHP-based scripts in a Linux environment?

If you answered yes to any of these questions, then you will want to check out the book "<a href="http://www.packtpub.com/asterisk-gateway-interface-programming/book" target="_blank">Asterisk Gateway Interface 1.4 and 1.6 Programming</a>" by Nir Simionovich.  There is a lot to like in this book for Asterisk programmers.

One of my favorite quotes from this book is:

<blockquote>
Many IVR developers do not regard themselves as programmers. That is a shame as programming an efficient IVR environment using any type of telephony engine requires skill, and when done right can be regarded as a work of art.
</blockquote>

Truer words were never spoken. I personally have never suffered from the affliction of thinking that voice applications developers are not "programmers" - voice application developers are programming Rocks Stars, pure and simple.  So if you are a Rock Star (or aspire to be one), you should check this book out.

I like that this book spends some time talking about developing IVRs using the Asterisk dialplan, even though the limitations of building IVRs using the dialplan itself is probably what leads most developers to explore alternatives like <a href="http://phpagi.sourceforge.net/" target="_blank">PHPAGI</a> or <a href="http://adhearsion.com/" target="_blank">Adhearsion</a>.

There is a great section in this book outlining the "ten rules of AGI development" - things every developer should know before starting AGI programming of any flavor.  This book starts with the basics and moves quickly (but comfortably) on to advanced topics.

If you are an Asterisk guru, or a hobbiest that is just getting started, this book is worth having in your collection.  My copy is on my bookshelf, within arms reach, right next to my dogeared copy of O'Reilly's "<a href="http://oreilly.com/catalog/9780596009625/" target="_blank">Asterisk: The Future of Telephony</a>."

Now, if only they'd put IVR development into the next edition of <a href="http://hub.guitarhero.com/" target="_blank">Guitar Hero</a>...
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>773</wp:post_id>
  <wp:post_date>2009-04-06 09:59:18</wp:post_date>
  <wp:post_date_gmt>2009-04-06 13:59:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>book-review-agi-14-and-16-programming</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/VVyrd6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[773]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[773]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>84</wp:comment_id>
    <wp:comment_author><![CDATA[PHP Tutorials]]></wp:comment_author>
    <wp:comment_author_email>crivion@crivionweb.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.crivionweb.com/phpblog</wp:comment_author_url>
    <wp:comment_author_IP>90.197.192.13</wp:comment_author_IP>
    <wp:comment_date>2009-04-25 13:48:13</wp:comment_date>
    <wp:comment_date_gmt>2009-04-25 17:48:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[A fantastic read....very literate and informative.  Many thanks....where is your RSS button ?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-04-25 17:48:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Shoring up Asterisk Security</title>
  <link>http://voiceingov.org/2009/04/07/shoring-up-asterisk-security/</link>
  <pubDate>Tue, 07 Apr 2009 18:51:10 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=782</guid>
  <description/>
  <content:encoded><![CDATA[Found out today that an external host had been scanning my Asterisk server looking for valid SIP extensions.  Turned out the IP belonged to some German hacking site that was probably using some brute force tools to scan my server (and lots of others) for valid SIP extensions.  The ultimate goal was more than likely to try and exploit any live extensions for some free phone calls.

Fortunately, in anticipation of moving my in-house Asterisk server <a href="http://voxilla.com/2009/02/13/asterisk-amazon-ec2-1178" target="_blank">out to the cloud</a> I had recently done some work to become better educated on Asterisk security and to shore up the security of the CentOS machine my Asterisk instance is running on.  As a result, my intrusion detection system slammed the door to the external scans pretty quick, and I've since added the IP address to my iptables rule set to to drop any requests from the IP used for the scan.

It was a little unnerving to find out that my box was getting scanned, but I'm glad I took the time recently to get things working more securely.  This incident reminds me that one can never be too careful about security, and that there is <strong>always</strong> more to learn about running Asterisk more securely.  To underscore this last point, here are some great links I've come across lately for Asterisk and Linux security:
<ul>

	<li><a href="http://www.junctionnetworks.com/blog/mike/2009/03/25/weak-passwords-on-extensions-equals-hacked-box" target="_blank">Weak Passwords on Extensions Equals Hacked Box</a></li>

	<li><a href="http://www.voipusersconference.org/forum/topics/john-todds-security-list" target="_blank">John Todd's Security List</a></li>

	<li><a href="http://nerdvittles.com/?p=580" target="_blank">Avoiding the $100,000 Phone Bill: A Primer on Asterisk Security</a></li></ul>




Some general Linux security reading:

<ul>
	<li><a href="http://www.iptablesrocks.org/" target="_blank">An iptables Guide and Tutorial</a></li>
	<li><a href="http://www.linux.com/feature/61061" target="_blank">Advanced SSH security tips and tricks</a></li>
</ul>


Happy reading!
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>782</wp:post_id>
  <wp:post_date>2009-04-07 14:51:10</wp:post_date>
  <wp:post_date_gmt>2009-04-07 18:51:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>shoring-up-asterisk-security</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/JEa3Z6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[782]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[782]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>85</wp:comment_id>
    <wp:comment_author><![CDATA[John Todd]]></wp:comment_author>
    <wp:comment_author_email>jtodd@digium.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.digium.com/</wp:comment_author_url>
    <wp:comment_author_IP>76.124.123.117</wp:comment_author_IP>
    <wp:comment_date>2009-04-09 21:01:03</wp:comment_date>
    <wp:comment_date_gmt>2009-04-10 01:01:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This was a topic of discussion as recently as last night as well, with a group of people at the Toronto Asterisk Users Group (TAUG)    Most of the points were basic policy discussions ("How can you force people to choose better passwords?") but I think there will be some internal methods shortly that allow Asterisk to be more easily integrated into a wider security system that actually actively blocks attacks instead of merely ignoring the attacker.  If you're not already on them, keep an eye on asterisk-dev and asterisk-users for more information, or discuss there as well.  Ideas welcome!

JT]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-04-10 01:01:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>86</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-04-10 08:19:32</wp:comment_date>
    <wp:comment_date_gmt>2009-04-10 12:19:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good to know. Thanks, John!

I'll keep my eye on asterisk-dev and asterisk-users.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-04-10 12:19:32</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>The Answer to Government XP Woes</title>
  <link>http://voiceingov.org/2009/04/17/the-answer-to-government-xp-woes/</link>
  <pubDate>Fri, 17 Apr 2009 16:57:18 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=793</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://www.govtech.com/gt/articles/640438" target="_blank">Government Technology Magazine</a> is reporting on the reaction of state and local government IT officials to the recent decision of Microsoft to <a href="http://www.govtech.com/gt/articles/640438" target="_blank">discontinue support</a> for Windows XP and Office 2003:

<blockquote>
Microsoft dropped free support this week for Windows XP and Office 2003, leaving state and local governments wondering when they'll be forced to move computers to a newer operating system.

Lisa Moorehead, the director of management information systems in the Massachusetts Department of Public Utilities, said her department doesn't have the budget to pay for repeated incident-report calls.

"That is going to pose huge problems to us and force us to potentially go to an operating system we don't want to go to," said Moorhead, who isn't thrilled with one of her other options: the newer Windows Vista operating system.
</blockquote>

So, what other options to state and local IT officials have? Let me spell it out for you:

<a href="http://www.ubuntu.com/" target="_blank">U B U N T U !</a>

'Nuff said.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>793</wp:post_id>
  <wp:post_date>2009-04-17 12:57:18</wp:post_date>
  <wp:post_date_gmt>2009-04-17 16:57:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>the-answer-to-government-xp-woes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/6drATm]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[793]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[793]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1f85eb3d6e9e49bc4eebaf9a8413f6e9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bb80b2f8d95750a788840983e618cd4f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>87</wp:comment_id>
    <wp:comment_author><![CDATA[Fred]]></wp:comment_author>
    <wp:comment_author_email>fred@advomatic.com</wp:comment_author_email>
    <wp:comment_author_url>http://advomatic.com</wp:comment_author_url>
    <wp:comment_author_IP>208.120.204.231</wp:comment_author_IP>
    <wp:comment_date>2009-05-06 10:34:46</wp:comment_date>
    <wp:comment_date_gmt>2009-05-06 14:34:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Massachusetts had been trending Open Source for a while.
http://it.toolbox.com/blogs/paytonbyrd/massachusetts-backs-down-accepts-microsofts-open-office-xml-format-17370
With so many department heads, and so many people who could fear change and the work of training staff... no wonder it's happening in fits and starts.
I'm happy to see progress.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-05-06 14:34:46</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>88</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.141.6.94</wp:comment_author_IP>
    <wp:comment_date>2009-05-06 10:55:27</wp:comment_date>
    <wp:comment_date_gmt>2009-05-06 14:55:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[As long as open source has no official lobbyists, close source will win (almost) every time.

The one possible upside, as it relates to open source, of the economic pressure governments are currently under is that they may not be able afford to ignore open source any more.

European governments are far ahead of U.S. state governments in adopting open source, particularly on the desktop.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-05-06 14:55:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Talk to the BOT</title>
  <link>http://voiceingov.org/2009/05/28/talk-to-the-bot/</link>
  <pubDate>Thu, 28 May 2009 23:02:57 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=860</guid>
  <description/>
  <content:encoded><![CDATA[With governments under enormous budgetary pressure, finding ways to provide service at lower cost is more important than ever.  The term "'automated self-service" usually conjures up thoughts of web applications or interactive voice response (IVR) systems, but there are other ways that governments (and other organizations) can enable citizens and customers to self serve.

One intriguing new way to enable self service is to deploy instant messaging (IM) applications, sometimes referred to as IM "BOTS".  Personally, I would love to be able to make a park reservation or find out the wait time at the DMV by simply opening up an IM client - perhaps one on my iPhone - and entering a few simple commands.

Writing an IM BOT might usually require some in-depth knowledge of XMPP or specific IM platform requirements, but a simple and effective way of writing an IM BOT that can work with a number of different IM services is to use the <a href="http://www.imified.com/" target="_blank">IMified Platform</a>.

IMified, which was recently <a href="http://blog.imified.com/index.php/2009/05/27/voxeo-acquires-imified/" target="_blank">bought by Voxeo</a>, provides a simple and effective API for developing interactive IM BOTS.  Essentially, IMified provides a IM front end to a web application that can be used to interact with back end databases, web services, etc.  Communication between your web application and the IMified platform is in HTTP, so any web programming language can be used to write an IM BOT.  (This architectural set up is very similar to the services provided by <a href="http://evolution.voxeo.com/" target="_blank">Voxeo's hosted offering</a> - they provide a front end to the <acronym title="Public Switched Telephone Network">PSTN</acronym> and allow you to write telephone applications in a variety of traditional web programming languages.)

When a user interacts with your IM BOT, the IMified platform will make an HTTP request (using the POST method) to your web application and allow you to write out information in the response.  A quick read of their <a href="http://www.imified.com/developers/api" target="_blank">API documentation</a> will get you started on your first BOT.  There is also a very nice debugger tool provided by IMified that allows developers to interact with their application and get access to the name/value pairs sent in each successive HTTP request - a very handy tool indeed!

Having said all of that, you might be trying to reconcile the notion of using HTTP with an interactive BOT.  Self service usually requiers some sort of state management, and HTTP is stateless.  IMified provides a nifty mechanism for managing state during your interaction with a user of your BOT.  Among the name/value pairs sent to your web application with each request from the IMified platform are the following:

<blockquote>
<strong>userkey</strong>: a unique token generated by IMified when presence is established with an IM user sending a message to your bot. This userkey uniquely identifies a user of your bot and can be used for instance, to associate the IM user with a user in your system.

<strong>value1 - valuex</strong> are the values entered by the IM user for each respective step in the interaction. So a user that has entered text multiple times might generate a request with - value0=hello, value1=My name is Joe, valueX=Nice BOT you have there, etc.
</blockquote>

So, as your user (identifiable via <em>userkey</em>) interacts with your BOT, the list of values is increased, with a new name/value pair being added for each turn.  This makes it easy to collect information, and even to verify new input based on previous responses.

After playing around with IMified, I decided that I wanted to write a sample app that used a small PHP class to make managing the information provided in each HTTP request more manageable.  The code for the IMified class is as follows:



A simple example BOT demonstrates the power of this class, and how easy it is to create your own IM BOT on the IMified platform:

<pre>
getStep();

  echo "Hello. Your IM network is: ". $testBotMessage-&gt;getNetwork().".<br />";
  echo "This is step ".$step.".<br />";
  if($step &gt; 1)
    echo "In the last step, you said ".$testBotMessage-&gt;getLastValue().".";

}

catch (Exception $ex) {
  echo "Sorry. The Bot is having some issues: ".$ex-&gt;getMessage();
}

?&gt;
</pre>

In the above example, we create a new instance of the IMified class and pass the <a href="http://us.php.net/manual/en/reserved.variables.post.php" target="_blank">$_POST superglobal array</a> into its constructor.  This will automatically assign all of the data in the HTTP request to the object's properties and, as in the case of the <em>step</em> value, cast to the proper type:

<pre>
...
$this-&gt;step = (int) $postValues['step'];
...
</pre>

What I really like about this class is that it takes any user interaction values submitted with the request and packages them up neatly into an array - this array is assigned to one of the class properties, and there are several accessor methods that let you work with responses submitted by the BOT user.  You can see this demo BOT in action by adding <strong>voiceingovtest@bot.im</strong> to your Jabber/XMPP client contacts and sending it a message (note - you can use the Google Talk client for this).

Governments interested in creating new service delivery channels that can lower costs and increase customer satisfaction should take a close look at IM BOTS in general, and the powerful combination of Voxeo/IMified in particular.

I hope to expand on the simple example shown here and further build out the IMified class to demonstrate the power of interactive IM BOTS to improve government service delivery.

Stay tuned!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>860</wp:post_id>
  <wp:post_date>2009-05-28 19:02:57</wp:post_date>
  <wp:post_date_gmt>2009-05-28 23:02:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>talk-to-the-bot</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Talk to the BOT. Interactive IM BOTS can improve government service delivery. #url#]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/Jn9svJ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[860]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[860]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>89</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Mark-Headd/527353413</wp:comment_author_url>
    <wp:comment_author_IP>75.150.49.141</wp:comment_author_IP>
    <wp:comment_date>2009-05-28 19:41:49</wp:comment_date>
    <wp:comment_date_gmt>2009-05-28 23:41:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Another idea -- how about a bill status IM application?  How convenient would it be to simply send a message to a BOT like:

<em>S1976</em>

And get a status summary back:

<em>Assigned to Committee on Technology</em>

That would be cool!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-05-28 23:41:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>90</wp:comment_id>
    <wp:comment_author><![CDATA[Mahesh Sabharwal]]></wp:comment_author>
    <wp:comment_author_email>sabharwal.mahesh@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.askme.im</wp:comment_author_url>
    <wp:comment_author_IP>220.224.225.199</wp:comment_author_IP>
    <wp:comment_date>2009-05-29 10:01:18</wp:comment_date>
    <wp:comment_date_gmt>2009-05-29 14:01:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Askme.im offers such many such bots as well as service to build custom bots.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-05-29 14:01:18</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>91</wp:comment_id>
    <wp:comment_author><![CDATA[Hand Held Electronic Poker]]></wp:comment_author>
    <wp:comment_author_email>prasad@handheldelectronicpoker.info</wp:comment_author_email>
    <wp:comment_author_url>http://handheldelectronicpoker.info</wp:comment_author_url>
    <wp:comment_author_IP>66.42.252.130</wp:comment_author_IP>
    <wp:comment_date>2009-05-29 14:25:49</wp:comment_date>
    <wp:comment_date_gmt>2009-05-29 18:25:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You're website has very good infos. I learned very a lot from reading these. Prasad]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-05-29 18:25:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>92</wp:comment_id>
    <wp:comment_author><![CDATA[Dave Hoff]]></wp:comment_author>
    <wp:comment_author_email>dave@imified.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.imified.com</wp:comment_author_url>
    <wp:comment_author_IP>68.205.63.10</wp:comment_author_IP>
    <wp:comment_date>2009-05-30 23:10:38</wp:comment_date>
    <wp:comment_date_gmt>2009-05-31 03:10:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks Mark, great post!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-05-31 03:10:38</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>VoiceGlue 0.10 Released</title>
  <link>http://voiceingov.org/2009/06/01/voiceglue-010-released/</link>
  <pubDate>Mon, 01 Jun 2009 12:34:33 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=889</guid>
  <description/>
  <content:encoded><![CDATA[For those that don’t know, <a href="http://www.voiceglue.org/" target="_blank">Voiceglue</a> is an open source project that links <a href="http://www.asterisk.org/" target="_blank">Asterisk</a> (the open source PBX) with <a href="http://www.speech.cs.cmu.edu/openvxi/index.html" target="_blank">OpenVXI</a> (an open source VoiceXML platform currently under the stewardship of Vocalocity). Voiceglue makes it possible for Asterisk users to deploy a completely open source VoiceXML platform for building IVRs and other useful applications.

The Voiceglue project recently announced the release of version 0.10 - there are several new features in this release:

<ul>
	<li>Improved audio caching</li>
	<li>Cookie passing on audio fetching</li>
	<li>Handles maxage and audiomaxage of 0 properly</li>
	<li>Uses HTTP Content-Type for audio content when available</li>
	<li>Defaults to not requiring access-control directive in returned data from data tag</li>
	<li>New transfer method, new config file param "blind_xfer_method"</li>
	<li>Auto-install support for Ubuntu 9.04 (Jaunty)</li>
</ul>

I'm especially interested in the last item - I've been meaning to set up a VM to play around with Ubuntu 9.04 for a few weeks now, and this is yet another good reason for doing so.

The new version of Voiceglue can be <a href="http://www.voiceglue.org/download/" target="_blank">downloaded here</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>889</wp:post_id>
  <wp:post_date>2009-06-01 08:34:33</wp:post_date>
  <wp:post_date_gmt>2009-06-01 12:34:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>voiceglue-010-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[VoiceGlue 0.10 Released. #Asterisk + OpenVXI = open source goodness! #opensource #voip #ubuntu]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/rD9U8A]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[889]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[889]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Automatic for the People</title>
  <link>http://voiceingov.org/2009/06/03/automatic-for-the-people/</link>
  <pubDate>Wed, 03 Jun 2009 17:18:40 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=920</guid>
  <description/>
  <content:encoded><![CDATA[Like <a href="http://technosailor.com/2009/06/02/a-tale-of-two-cities-how-dc-and-san-francisco-are-handling-citywide-311/" target="_blank">lots of others</a>, I think its worth noting San Francisco's innovative use of Twitter.  San Francisco residents can now use Twitter to <a href="http://www.sfgate.com/cgi-bin/blogs/cityinsider/detail?entry_id=41015" target="_blank">send a message to an operator</a> at the City's 311 call center and receive a Tweet back.

This is exactly the type of interactive use of Twitter by governments I had in mind when I wrote about <a href="http://www.voiceingov.org/blog/?p=651">Twitter 2.0 for the public sector</a> a few months ago.  Still, now that I see an actual use of Twitter by a government to interact with citizens, I'm wondering if this approach can be improved upon, to make it more efficient for governments and still user friendly for citizens.

While San Francisco's use of Twitter is indeed convenient for citizens, it has many of the same cost implications for government.  Tweets to 311 operators must still be processed "manually" - someone has to read the content of a Tweet (even if its prefiltered based on message content) and assign a follow up action, or respond directly if its been assigned to them.  And even though San Francisco is reportedly using the very interesting Twitter-CRM product <a href="http://blog.cotweet.com/2009/06/san-francisco-twitter-311/" target="_blank">CoTweet</a> to make this process more efficient, I wonder if there isn't a better way to do this.

I think this would be a perfect scenario to deploy an <a href="http://www.voiceingov.org/blog/?p=860">interactive IM/SMS BOT</a>. Citizens could interact with an application to report common 311 service requests - potholes, traffic-light outages, abandoned vehicles, etc. As long as certain keywords / hashtags are used in the message content (something that probably needs to be done if Twitter is used instead anyway) it should be pretty easy to process reliably in an automatic way. Moreover, using an IM/SMS BOT would allow the process to have multiple steps, where the application and the citizen could exchange information successively.

For example, a citizen using a BOT to report a traffic signal outage could receive a an automated response asking if there are any noticeable power outages in the vicinity, or telling them to send a follow up message when the repair crew arrives (to audit response times).  The possibilities are enormous.

Requests that could not be processed automatically could be routed to a live operator and handled the traditional way.  This would more efficiently allocate the finite resource of 311 operators -- human operators would only intervene in the processing of 311 service requests when they could not be processed automatically.

Here's hoping that someday very soon, we'll see a government go "automatic for the people" with 311 service requests.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>920</wp:post_id>
  <wp:post_date>2009-06-03 13:18:40</wp:post_date>
  <wp:post_date_gmt>2009-06-03 17:18:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>automatic-for-the-people</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/rL8hvW]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[920]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[920]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>93</wp:comment_id>
    <wp:comment_author><![CDATA[Automatic for the People &laquo; crm like soft]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://crmlike.com/?p=1134</wp:comment_author_url>
    <wp:comment_author_IP>208.109.122.219</wp:comment_author_IP>
    <wp:comment_date>2009-06-03 16:38:52</wp:comment_date>
    <wp:comment_date_gmt>2009-06-03 20:38:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] the original here:  Automatic for the People   03 Jun 09 | [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-06-03 20:38:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>94</wp:comment_id>
    <wp:comment_author><![CDATA[Mark H]]></wp:comment_author>
    <wp:comment_author_email>mhomewood@comcast.net</wp:comment_author_email>
    <wp:comment_author_url>http://woodysolutions.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.162.245.4</wp:comment_author_IP>
    <wp:comment_date>2009-06-09 06:57:09</wp:comment_date>
    <wp:comment_date_gmt>2009-06-09 10:57:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mark, although not necessarily with a bot, I could see some value in using Twitter with 911 operators. Although I'm not sure you'd want every one using Twitter to send calls for help, I could see the use in traffic, weather, and certain other reports that could aid first responders. Just thinking that any information for a lot of 911 calls is better than none.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-06-09 10:57:09</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>It's the Little Things</title>
  <link>http://voiceingov.org/2009/06/04/its-the-little-things/</link>
  <pubDate>Thu, 04 Jun 2009 13:01:27 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=935</guid>
  <description/>
  <content:encoded><![CDATA[OK, I'll admit it. I've <a href="http://www.voiceingov.org/blog/?p=438">said some things</a> about Twilio in the past.

To be honest, initially I viewed Twilio as a low-rent competitor to VoiceXML and the <a href="http://www.w3.org/Voice/">family of W3C languages</a> designed to support telephony applications.  However, although I still harbor some doubts about Twilio, my attitude is changing - largely based on some of the features that Twilio now offers.

<strong>Voice Transcription:</strong>

Now <a href="http://www.twilio.com/docs/api_reference/TwiML/record#transcribe" target="_blank">this is pretty boss</a>.  The Twilio XML Markup language (TwiML for short) not only allows developers to make a recording of what a caller says (pretty basic functionality that's been in VoiceXML since 1.0), it also lets you have this recording transcribed (up to 2 minutes of speech).  Now <em>this</em> is an exciting feature, and although this is a paid feature it is one that I will be trying out in the near future.

<strong>Geographic Information:</strong>

When a call comes into your app, Twilio <a href="http://www.twilio.com/docs/api_reference/TwiML/twilio_request" target="_blank">attempts to look up geographic data</a> based on the <acronym title="Automatic Number Identification">ANI</acronym> and <acronym title="Dialed Number Identification Service">DNIS</acronym> used. This allows developers to have access to to city, state and zip of the calling and called party.  Pretty sweet!

Yes its the little things like these that are making Twilio more attractive, and more likely to be used in an upcoming project. Lets hope some of the big VoiceXML hosting providers stand up and take notice, and start to offer similar features to developers.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>935</wp:post_id>
  <wp:post_date>2009-06-04 09:01:27</wp:post_date>
  <wp:post_date_gmt>2009-06-04 13:01:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>its-the-little-things</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="post_tag" nicename="transcirption"><![CDATA[transcirption]]></category>
  <category domain="post_tag" nicename="twilio"><![CDATA[Twilio]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/n7ySAY]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[935]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[935]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>95</wp:comment_id>
    <wp:comment_author><![CDATA[Khyle Keys]]></wp:comment_author>
    <wp:comment_author_email>apps+41178401793.773358011.3caf18e22a2905ba59a414207701aa63@proxymail.facebook.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Khyle-Keys/773358011</wp:comment_author_url>
    <wp:comment_author_IP>209.201.67.250</wp:comment_author_IP>
    <wp:comment_date>2009-06-04 10:52:05</wp:comment_date>
    <wp:comment_date_gmt>2009-06-04 14:52:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'll be interested to see how accurate the transcriptions are.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-06-04 14:52:05</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>96</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Mark-Headd/527353413</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2009-06-04 11:21:30</wp:comment_date>
    <wp:comment_date_gmt>2009-06-04 15:21:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'll post a follow up -- with both recorded audio and transcribed text -- after testing, if I can.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-06-04 15:21:30</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>97</wp:comment_id>
    <wp:comment_author><![CDATA[Jeff Lawson]]></wp:comment_author>
    <wp:comment_author_email>jeffiel@twilio.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.twilio.com</wp:comment_author_url>
    <wp:comment_author_IP>67.182.129.245</wp:comment_author_IP>
    <wp:comment_date>2009-06-05 13:58:31</wp:comment_date>
    <wp:comment_date_gmt>2009-06-05 17:58:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Mark,

Although we prefer the phrase "cost-effective" to "low-rent", we're excited that you like the direction we're headed :)

Please feel free to send us any other suggestions or feedback, we're always listening.

Cheers,

-jeff
Twilio.com]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-06-05 17:58:31</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>98</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Mark-Headd/527353413</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2009-06-05 14:26:57</wp:comment_date>
    <wp:comment_date_gmt>2009-06-05 18:26:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Jeff - no offense intended.  i think the operative word in that sentence is "viewed" (past tense).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-06-05 18:26:57</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>99</wp:comment_id>
    <wp:comment_author><![CDATA[James Wu]]></wp:comment_author>
    <wp:comment_author_email>info@telequant.com</wp:comment_author_email>
    <wp:comment_author_url>http://telequant.com/</wp:comment_author_url>
    <wp:comment_author_IP>67.234.222.100</wp:comment_author_IP>
    <wp:comment_date>2009-06-18 14:12:10</wp:comment_date>
    <wp:comment_date_gmt>2009-06-18 18:12:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have to say I'm really impressed with your posts and blog overall. I stumbled on your site accidentally but am now happy I did. I'll be stopping in to read more often now. Thanks again !
Thanks,
Lou]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-06-18 18:12:10</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Odd Tweet of the Day Award</title>
  <link>http://voiceingov.org/2009/06/05/odd-tweet-of-the-day-award/</link>
  <pubDate>Fri, 05 Jun 2009 13:40:34 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=949</guid>
  <description/>
  <content:encoded><![CDATA[Although it seems a bit early to be handing out an award that could cover the entire day (and it's only 9:30 AM EST), the <strong>Odd Tweet of the Day Award</strong> goes to:

<a href="http://twitter.com/femainfocus" target="_blank">@femainfocus</a>

I have know idea what this Tweet means, and suspect it was posted in error - perhaps someone at FEMA though they were typing into their IM client.

<img src="http://voiceingov.files.wordpress.com/2009/06/fema_tweet.jpg" alt="fema_tweet" title="What the what..?" />
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>949</wp:post_id>
  <wp:post_date>2009-06-05 09:40:34</wp:post_date>
  <wp:post_date_gmt>2009-06-05 13:40:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>odd-tweet-of-the-day-award</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Odd Tweet of the Day Award. #url#]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/rS0LPq]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[949]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[949]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_471084dd0eb6f6923ecbecd08e05d0df</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" width="550"><p><a href="https://twitter.com/mheadd">@mheadd</a> Apologies for that.  One of the staff was toggling between personal twitter account and FEMA account.</p>&mdash; FEMA (@fema) <a href="https://twitter.com/fema/status/2042713301">June 5, 2009</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_471084dd0eb6f6923ecbecd08e05d0df</wp:meta_key>
    <wp:meta_value><![CDATA[1411500976]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_38354114bf88b573199907b0408c0ef5</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" width="550"><p lang="en" dir="ltr"><a href="https://twitter.com/mheadd">@mheadd</a> Apologies for that.  One of the staff was toggling between personal twitter account and FEMA account.</p>&mdash; FEMA (@fema) <a href="https://twitter.com/fema/status/2042713301">June 5, 2009</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_38354114bf88b573199907b0408c0ef5</wp:meta_key>
    <wp:meta_value><![CDATA[1447125019]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_481fe6f6c73ed54acb428a43f1f4f3a7</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="220"><p lang="en" dir="ltr"><a href="https://twitter.com/mheadd">@mheadd</a> Apologies for that.  One of the staff was toggling between personal twitter account and FEMA account.</p>&mdash; FEMA (@fema) <a href="https://twitter.com/fema/status/2042713301">June 5, 2009</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_481fe6f6c73ed54acb428a43f1f4f3a7</wp:meta_key>
    <wp:meta_value><![CDATA[1462243480]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>100</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2009-06-05 10:00:56</wp:comment_date>
    <wp:comment_date_gmt>2009-06-05 14:00:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[As I suspected:

http://twitter.com/femainfocus/statuses/2042713301

Need to chalk this one up to the "Perils of Public Sector Tweeting".]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-06-05 14:00:56</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Joining a New Team</title>
  <link>http://voiceingov.org/2009/08/03/joining-a-new-team/</link>
  <pubDate>Mon, 03 Aug 2009 21:59:53 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1060</guid>
  <description/>
  <content:encoded><![CDATA[People that know me (and probably some that don't) know that I'm passionate about telephony systems and applications, particularly in how they are used by governments. As the most ubiquitous communications device in the world, the ordinary telephone is one of the most important channels that governments have access to for communicating with and providing services to citizens and taxpayers.

For the past few years, I've been working as a consultant to a company called <a href="http://www.tele-works.com" target="_blank">Tele-Works</a> whose core business is helping governments utilize telephony applications to efficiently provide services and information to their citizens.  Tele-Works is packed to the brim with smart, passionate people who have the same commitment I do to helping governments successfully utilize telephony applications to improve service delivery.  There is a palpable sense within the company for the desire to develop well built applications - applications that perform well, are easily maintained and provide real value for customers.  It's a great place to work, full of enthusiastic and skilled developers committed to building standards-based telephony applications that utilize the latest technologies.

So I'm happy to say that I will now be going legit - joining Tele-Works as a full time employee, effective today!

I'll still be blogging and <a href="http://twitter.com/mheadd" target="_blank">Tweeting</a> about things that interest me, and these musings will continue to reflect only my views and opinions.  But I'm going to doing these things with a renewed focus on what really excites me - telephone systems and applications, VoIP, emerging standards, new technologies for building <acronym title="Interactive Voice Response">IVR </acronym> applications: anything and everything phone-related!

I'm excited about joining a great company like <a href="http://www.tele-works.com" target="_blank">Tele-Works</a>, and to have a renewed focus on the things I really enjoy working with.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1060</wp:post_id>
  <wp:post_date>2009-08-03 17:59:53</wp:post_date>
  <wp:post_date_gmt>2009-08-03 21:59:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>joining-a-new-team</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Joining a New Team. #url# #IVR #VoIP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/azgbs]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1060]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1060]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Philly IT Chief Talks Vision / Savings</title>
  <link>http://voiceingov.org/2009/09/03/philly-it-chief-talks-vision-savings/</link>
  <pubDate>Thu, 03 Sep 2009 14:21:07 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1131</guid>
  <description/>
  <content:encoded><![CDATA[Government Technology has an <a href="http://www.govtech.com/gt/articles/717928?id=717928" target="_blank">interesting piece</a> with City of Philadelphia CIO Allen Frank.

Frank lays out his vision for the City of Philadelphia, and also speaks in detail about how it will be funded - his ambitious plan depends almost entirely on savings that will teased out of existing IT operations:

<blockquote>
The biggest piece of low-hanging fruit, in terms of cost savings is consolidation, of course. 'We are consolidating IT in a very careful way, but it will drive down costs immediately,' Frank explained. With almost 750 servers in nearly 20 data centers, Frank figures he can wring major efficiencies out of the status quo. Some of the so-called data centers reside in departments with as few as five servers, but have their own IT staff, including a server administrator. 'In a best-practice scenario, I should be able to manage 100 servers with just one guy,' he said.
</blockquote>

I was also impressed to hear Frank talk about the potential of virtualization technologies for public sector entities like Philadelphia (this is something I've <a href="http://www.voiceingov.org/blog/?p=137">talked about before</a> on this blog):

<blockquote>
In addition, Frank wants to ramp up the use of virtualization, which will let the city get more use out of the servers it keeps and run multiple applications from different departments. The days are over when each city department needs to have its own servers housed in its own building.</blockquote>

I couldn't agree more.  Here's hoping that more governments take the same approach to identifying savings in their existing IT infrastructures, and reinvest the savings in products and practices that will improve service delivery.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1131</wp:post_id>
  <wp:post_date>2009-09-03 10:21:07</wp:post_date>
  <wp:post_date_gmt>2009-09-03 14:21:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>philly-it-chief-talks-vision-savings</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Philly IT Chief Talks Vision / Savings #url#]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/hYHVT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1131]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1131]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Migrating to Drupal</title>
  <link>http://voiceingov.org/2009/09/29/migrating-to-drupal/</link>
  <pubDate>Tue, 29 Sep 2009 19:24:55 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1199</guid>
  <description/>
  <content:encoded><![CDATA[Over the next week or two, I'll be moving <a href="http://www.voiceingov.org">this blog</a> to a new host and migrating to <a href="http://drupal.org/" target="_blank">Drupal</a>.

My experience with Drupal is limited to some work I did for a friend (and the current <a href="http://ltgov.delaware.gov/" target="_blank">Lt. Governor of Delaware</a>) some months ago, and also <a href="http://www.voiceingov.org/blog/?p=544">some tinkering</a> on my own time.  I'd like to be more proficient in Drupal and start developing my own custom modules, so I'll be jumping in with both feet and porting this site over in the near future.

I still love <a href="http://wordpress.org/" target="_blank">WordPress</a> (it rocks!) but I feel like its time to move on up the CMS food chain a bit.  Stay tuned for tips and lessons learned from the migration.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1199</wp:post_id>
  <wp:post_date>2009-09-29 15:24:55</wp:post_date>
  <wp:post_date_gmt>2009-09-29 19:24:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>migrating-to-drupal</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Migrating to #Drupal. #url# #opensource]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1199]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1199]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>101</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Mark-Headd/527353413</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2009-10-22 14:48:12</wp:comment_date>
    <wp:comment_date_gmt>2009-10-22 18:48:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[As with most things I really want to work on, this is taking longer than planned.

Its till on my to do list, but so are a lot of other cool items.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-10-22 18:48:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Cloudvox: Building Phone Apps in the Cloud</title>
  <link>http://voiceingov.org/2009/10/21/cloudvox-building-phone-apps-in-the-cloud/</link>
  <pubDate>Wed, 21 Oct 2009 16:27:40 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1235</guid>
  <description/>
  <content:encoded><![CDATA[If you are a developer of telephone applications, there has never been a more varied and powerful array of tools at your disposal to do your work than right now.

If your not a phone app developer, but always wanted to be (believe me when I say that chicks dig fellas that can build phone apps), the traditional barriers between web applications and phone applications have never been as blurred as they are right now.  If you have the basic tools and skills needed to build solid web applications, you can quickly and easily add a phone interface to your code.

A new service for building phone applications that embodies this blurriness between the worlds of traditional web applications and phone applications was unveiled recently - <a href="http://www.cloudvox.com/" target="_blank">Cloudvox</a>.  Cloudvox makes building phone applications dead simple.  Here's how.

Cloudvox is built on the open source <a href="http://www.asterisk.org/" target="_blank">Asterisk</a> platform, so all of the existing tools available to Asterisk developers (<a href="http://phpagi.sourceforge.net/" target="_blank">PHPAGI</a>, <a href="http://adhearsion.com/" target="_blank">Adhearsion</a>, <a href="http://asterisk-java.org/" target="_blank">Asterisk-Java</a>) are available to Cloudvox developers.

What makes Cloudvox exciting is that it removes the need to build, host and manage an Asterisk server (or servers, depending on the scale of your app).  If you've ever thought about standing up an Asterisk server just so you could build a killer phone application, then Cloudvox is worth a look.  They provide an easy to use interface for managing applications (application code is still deployed on your server) and reviewing call statistics.  They take the work out of building an Asterisk-based phone app, and leave all of the fun stuff (writing the actual code) to you.  But wait, there's more.

The team at Cloudvox has also deployed an API that lets you build phone apps with nothing but <a href="http://help.cloudvox.com/faqs/getting-started/http-api" target="_blank">JSON and HTTP</a>.  Lots of platforms strive to be language agnostic and embrace developers of all stripes, but this takes it to a new level.  If your language of choice can speak HTTP and supports JSON, you get an invite to the party.

The Cloudvox management interface also lets you <a href="http://help.cloudvox.com/faqs/sip-phones/x-lite" target="_blank">register SIP phones</a> (physical ones and softphones too), so that you can direct callers from an application to an extension that will ring wherever your SIP phone is currently registered from.  You can also use the registered extension to make outbound phone calls.

There is a lot to like about Cloudvox.  If you're a phone application developer, or ever wanted to be one, it is worth your time to check this new service out.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1235</wp:post_id>
  <wp:post_date>2009-10-21 12:27:40</wp:post_date>
  <wp:post_date_gmt>2009-10-21 16:27:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cloudvox-building-phone-apps-in-the-cloud</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[no]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1235]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1235]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Drupal Notifications Framework</title>
  <link>http://voiceingov.org/2009/10/27/drupal-notifications-framework/</link>
  <pubDate>Tue, 27 Oct 2009 15:35:48 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1304</guid>
  <description/>
  <content:encoded><![CDATA[I'm experimenting with the very cool <a href="http://drupal.org/node/252592" target="_blank">Notifications Framework</a> for Drupal on a test site that I have set up.

This module (really a collection of different modules and add ons for Drupal) adds some extremely powerful functionality to a Drupal site to allow site administrators to select different node types for subscriptions, and to set up different subscription channels.  I've currently got <a href="http://drupal.org/project/prowl" target="_blank">Prowl</a> and e-mail working, and am configuring <a href="http://drupal.org/project/twitter" target="_blank">Twitter</a> and <a href="http://drupal.org/project/xmppframework" target="_blank">XMPP</a> for testing now -- I hope to get to <a href="http://drupal.org/project/smsframework" target="_blank">SMS</a> later this week.  It also makes it easy for site users to subscribe to different nodes, to be alerted when they are updated or if a comment is submitted.  Users can also select the channel they want to be notified on (a default setting or a custom selection for a particular node).

It doesn't look like a user can select multiple channels to be notified on (e.g., Prowl and XMPP for the same noticeable event).  There also isn't currently a phone-based channel (i.e., outbound phone call with <acronym title="Text-to-Speech">TTS</acronym>), at least not that I could easily find.  I may have to remedy that soon...

This is but one example of the incredible array of custom modules available from the <a href="http://drupal.org/project/Modules" target="_blank">Drupal community</a> that Drupal-powered sites can take advantage of.

Be nice to see some sort of multi-channel notification functionality on the new Drupal-powered <a href="http://www.whitehouse.gov/" target="_blank">whitehouse.gov</a> site.  Dont think they have that yet.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1304</wp:post_id>
  <wp:post_date>2009-10-27 11:35:48</wp:post_date>
  <wp:post_date_gmt>2009-10-27 15:35:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>drupal-notifications-framework</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[no]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1304]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1304]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Next Steps in the Evolution of Multimodal Applications</title>
  <link>http://voiceingov.org/2009/10/29/next-steps-in-the-evolution-of-multimodal-applications/</link>
  <pubDate>Thu, 29 Oct 2009 17:57:52 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1314</guid>
  <description/>
  <content:encoded><![CDATA[Over at <a href="http://europe.ecomm.ec/" target="_blank">eComm Europe</a> – being held in Amsterdam – RJ Auburn gave a rocking presentation that can be summed up by its very apt title – the "<a href="http://www.slideshare.net/voxeo/the-rise-of-realtime-text-and-the-demise-of-voice" target="_blank">Rise of Real Time Text and the Demise of Voice</a>."

There are many important take aways in this presentation for governments and any other organization that interfaces with customers (yes, taxpayers and citizens are customers).  Most importantly, the increased use and growing ubiquity of alternate communications channels – IM, SMS, social networks, etc.

Stated simply, the customers of tomorrow will communicate differently than the customers of today.  The customers of today are used to voice self service (although many grudgingly so).  The customers of tomorrow will use new communications channels (perhaps some that do not yet exist).  Your father's customer service paradigm will probably not apply to them.

Bottom line, if you haven't developed methods for communicating with the new wave of customers that use different modes of communication then your shiznit will be cooked.  Ya dig?

<img src="http://voiceingov.files.wordpress.com/2009/10/choices.jpg" alt="choices" title="So many choices..." style="float:left;padding:5px;margin:15px;" />

<a href="http://www.voxeo.com/" target="_blank">Voxeo</a> (the company for which RJ is CTO) has been on a buying spree of late, with the seeming goal of shoring up its offerings to cover a wide array of different communication modalities.  I've expounded in the past on one acquisition in particular as being especially relevant – particularly as it relates to the next generation of customers – the <a href="http://www.voiceingov.org/blog/?p=860">acquisition of IMified</a>.

<a href="http://www.imified.com/" target="_blank">IMified</a> provides a simple API that allows developers to create applications that work across a host of IM networks, SMS and even Twitter.  Voxeo has leveraged this acquisition to deploy new functionality on its core voice application platform to allow developers to deploy multimodal applications – apps that a user can interact with through several different modalities, whichever is most convenient for them.

Multimodal applications are not new – I've <a href="http://www.voiceingov.org/blog/?page_id=41">written about them</a> many times and <a href="http://github.com/mheadd/nys-bill-bot" target="_blank">built several</a>.  But Voxeo and IMified have taken the notion of multimodality to a new level by making it practical for almost any developer to build one.  Even more compelling, Voxeo's platform lets you <a href="http://blogs.voxeo.com/voxeodeveloperscorner/2009/08/27/how-to-im-and-textsms-your-voicexml-applications/" target="_blank">re-purpose applications</a> developed for one specific modality (i.e., phone) for others (SMS, or IM).

Multimodal functionality is pretty much a requirement these days for successful customer interactions, but RJ's presentation got me thinking about other possibilities.

<h3>Cascading Modality</h3>

The next step in the evolution of multimodal applications will be to support what I call “cascading modality.”  Cascading applications will allow users to move across modalities over the course of one interaction with a company or a government.

For example, say a company wants to start a customer off in a communications channel that has relatively low cost – IM – using an application to collect basic customer information at the start of an interaction.  At some point during this IM session, the customer could opt to move to a different modality.  Say they send the following to the IM bot:

<blockquote>#switch 6401254789</blockquote>

This could generate an outbound call to (640) 125-4789 so that the caller could interact with an IVR system to complete their interaction – say, if they began the IM session on their desktop computer at the office and completed it while walking to the parking garage to get in their car. The information entered during the initial IM session is persisted across the switch to the IVR call, and all of the information (from both modes) is captured in a fulfillment or CRM system.

This session could be followed up by using a third modality – perhaps a confirmation message or receipt that is sent via SMS or even e-mail.

<h3>Concurrent Modality</h3>

Now consider another scenario, perhaps one that involves an <a href="http://www.nytimes.com/2009/10/29/technology/personaltech/29basics.html" target="_blank">older user</a> who may be less comfortable with IM.  This person could send the following to an IM bot:

<blockquote>
<ul>
<li><strong>User</strong>: #assist </li>
<li><strong>IM Bot</strong>: I'd like to call you, and provide some additional assistance over the phone. Enter your 10-digit phone number.</li>
<li><strong>User</strong>: 6401254789</li>
<li><strong>IM Bot</strong>: Thank you. Hold one second while your call is placed.</li>
</ul>
</blockquote>


As in the previous scenario, this would  generate an outbound call to (640) 125-4789 but the focus of the IVR would not be to collect information – you still want the user to enter the information into the IM client they are using.  The focus here would be to use the IVR to provide supportive information, so  that the caller can more easily or efficiently enter required information.

One example of this "tag team" approach would be to simplify the input of information that needs to be in a particular format:

<blockquote>
<ul>
<li><strong>IVR App says</strong>: Enter your account number, which is a three part number separated by dashes.  Enter all leading zeros on the left hand side of your account number.</li>
<li><strong>IM Bot displays</strong>: Example: 00012345-87-1</li>
<li><strong>User enters</strong>: 00078945-44-9</li>
</ul>
</blockquote>


By using two modalities simultaneously to interact with the user, the information can be collected in less steps – a typical IVR system would probably collect this type of an account number in three separate steps, and could be prone to error ("to the left of the first dash, or the second..?").

In this scenario, if a user enters <code>0</code> on their phone or sends <code>#help</code> via IM, they could automatically be routed to an agent for assistance.

<h3>Building Next Generation Multimodal Apps</h3>

Companies like Voxeo have removed a lot of the complexity from building multimodal applications, but developers will need to take heed of several factors that will become important as these kinds of applications become more widespread.

<em>State persistence</em>. Cascading modality will only work if a user can switch seamlessly from one mode to another without repeating data entry.  VoiceXML applications and IM bots typically communicate with a backend via HTTP, which is stateless.  And while there any number of different ways to maintain state in an HTTP-based application, they do not always scale well.  Things can get complicated when clusters of servers or load balancers are required.  These considerations require specialized skills to address properly.

<em>Secure data transfer</em>. A profusion of multimodal applications can raise questions about data security, particularity if said data is transmitted across pubic IM and social networks.  Developers need to think clearly about what is suitable for transmission across these networks, and ways that data security can be enhanced where needed.

Yes, the dawn of a new customer service era is upon us my friends.  Who knows, if you tool on over to the <a href="http://evolution.voxeo.com/" target="_blank">Voxeo</a> or <a href="http://www.imified.com/" target="_blank">IMified</a> developer sites, you might just get an opportunity to help build it.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1314</wp:post_id>
  <wp:post_date>2009-10-29 13:57:52</wp:post_date>
  <wp:post_date_gmt>2009-10-29 17:57:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>next-steps-in-the-evolution-of-multimodal-applications</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1314]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1314]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7835de93ac673f604004d5e6022898e1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6b5028799d14e3c3d54358cdb55aff1f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_46d548a4f89adf4f7ead2a208453aaa0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_815f19814f5a7454fac7b4f201fa543b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e30ee06346c5da62a571cc7a06bd80ed</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ff5c11702cae749c0752ee86b276fcd0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Book Review: Asterisk 1.6</title>
  <link>http://voiceingov.org/2009/11/23/book-review-asterisk-16/</link>
  <pubDate>Mon, 23 Nov 2009 14:10:56 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1380</guid>
  <description/>
  <content:encoded><![CDATA[The folks at Packt Publishing recently sent me a copy of <strong><a href="http://www.packtpub.com/build-feature-rich-telephony-system-with-asterisk-1-6/mid/230909ak97vd?utm_source=It-Slav.net&amp;utm_medium=affiliate&amp;utm_content=other&amp;utm_campaign=mdb_000777" target="_blank">Asterisk 1.6</a></strong> by David Merel, Barrie Dempster and David Gomillion and I've been using it for the past week or so to set up a fresh instance of Asterisk 1.6 on Ubuntu 8.04.

(Note - like many Asterisk books, this one is <em>very</em> CentOS focused, but I found the installation and configuration steps described in it - as well as some of the larger Asterisk management concepts - easily applied to Debian-based distros like Ubuntu.)

This is a solid, well-written book for anyone that wants to start building and managing an Asterisk-based telephony system.  I found this book to be very well focused on concepts that would appeal to someone who wants to manage an Asterisk system professionally, and is probably less well suited for someone interested in tinkering with Asterisk as a hobby.

There is a good discussion of some of the key concepts that someone who aspires to be (or already is) an Asterisk professional should have a handle on.  It has a very good discussion on hardening an Asterisk server in the chapter on "Maintenance and Security", and the book begins (very appropriately) with an exercise in developing a deployment plan - again, probably not well suited for an Asterisk or VoIP tinkerer, but critical for someone who is going to deploy an Asterisk server in a production environment and assume responsibility for managing it.

I didn't see any discussion of some of the more cutting edge features of Asterisk 1.6 that might be of interest to someone wanting in exploring alternative communication protocols (Jabber/Jingle) or some of the less mainstream channel drivers (GTalk, Skype, etc.)  There is no mention at all (that I could see) of how to connect Asterisk to Google Talk via Jingle, or to the Skype network via <a href="http://blogs.digium.com/2009/02/23/skype-for-asterisk-update/" target="_blank">Skype for Asterisk</a>.  Nor is there any mention of some of the IM-focused dialplan applications like <a href="http://www.voip-info.org/wiki/view/Asterisk+cmd+JabberSend" target="_balnk">JabberSend()</a>.

This book appears to be designed for someone who wants to set up and manage a more traditional Asterisk-based system. And for that purpose it is very well suited.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1380</wp:post_id>
  <wp:post_date>2009-11-23 10:10:56</wp:post_date>
  <wp:post_date_gmt>2009-11-23 14:10:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>book-review-asterisk-16</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agi"><![CDATA[AGI]]></category>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="post_tag" nicename="dial-plan"><![CDATA[dial plan]]></category>
  <category domain="post_tag" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1380]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1380]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Getting Conferency With Asterisk</title>
  <link>http://voiceingov.org/2009/11/23/getting-conferency-with-asterisk/</link>
  <pubDate>Tue, 24 Nov 2009 00:10:30 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1385</guid>
  <description/>
  <content:encoded><![CDATA[A good indicator of just how powerful and useful Asterisk can be is demonstrated by the amount of effort that is required to build a feature rich conference call application.  What if I told you it can be done in <em>6 lines of code</em>?

(Yes, <em>extensions.conf</em> is software - when you work with it, you are writing software code.  See "When You Write extensions.conf, You Are Writing Software" by @jicksta <a href="http://jicksta.com/posts/what-were-not-admitting-about-asterisk">in this post</a> for more on this.)

Create a conference room by editing meetme.conf:

<blockquote><code>$ echo "conf =&gt; 1234,2345,5678" &gt;&gt; /etc/asterisk/meetme.conf</code></blockquote>

Or you can open the file with your favorite editor and add the new line at the bottom.  This will create a conference numbered 1234, with a user PIN of 2345 and an administrator PIN of 5678.  Next create a dialplan context and rule set for the conference room

<blockquote><code>[MyFirstConferenceRoom]
exten =&gt; 9000,1,Answer()
exten =&gt; 9000,n,Meetme(1234,ips)
exten =&gt; 9000,n,Hangup()</code></blockquote>

The parameters passed into the Meetme() application are the number of our conference room (just created in meetme.conf) and a set of options. The<strong> i </strong>option enables an announcement each time someone enters or leaves the room.  The<strong> p </strong>option allows a user to exit the conference by pressing the '#' key.  The <strong>s</strong> option allows a user (regular or admin) to hear a menu of options when the '*' key is pressed.

Now, include the conference room context in your primary dialplan context:

<blockquote><code>include =&gt;  MyFirstConferenceRoom</code></blockquote>

That's it - to test it out, make sure you reload your dialplan, and then dial 9000.

You've got to love how easy it is to get conferency with Asterisk!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1385</wp:post_id>
  <wp:post_date>2009-11-23 20:10:30</wp:post_date>
  <wp:post_date_gmt>2009-11-24 00:10:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>getting-conferency-with-asterisk</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Getting Conferency With Asterisk. #url# #Asterisk #VoIP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/M5qWp]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.voiceingov.org/blog/?p=1385]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1385]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1385]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>102</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2009-11-23 20:26:28</wp:comment_date>
    <wp:comment_date_gmt>2009-11-24 00:26:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I should note, I am using Asterisk 1.6 for this example.

The format of the parameters passed into the Meetme() application might be slightly different in earlier versions of Asterisk.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-11-24 00:26:28</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>User Agent Sniffing for Multi-Channel Apps</title>
  <link>http://voiceingov.org/2009/12/05/user-agent-sniffing-for-multi-channel-apps/</link>
  <pubDate>Sat, 05 Dec 2009 23:46:06 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1398</guid>
  <description/>
  <content:encoded><![CDATA[Several months ago, voice platform company Voxeo announced an exciting addition to its <a href="http://www.voxeo.com/prophecy/" target="_blank">industry leading VoiceXML platform</a> - the ability to repurpose existing VoiceXML applications and turn them into instant messaging (IM) applications and text messaging (SMS) applications.

And while I've had several opportunities to expound on the importance of this announcement, I have not yet had time to use a practical example to demonstrate just how powerful the new functionality Voxeo is now offering can be.

<h3>How big a deal is this really?</h3>

To be honest, when I first read about Voxeo's new offering, I didn't think it was a big deal.  I thought it was a <em>freaking huge</em> deal - I'm talking Godzilla, baby.  This is big!

Lots of people are wary of proprietary extensions to open standards like VoiceXML because they can make your code less portable (if you find you need to transition from one vendor to another).  But unlike other platform-specific extensions to VoiceXML, Voxeo's new feature doesn't make you write VoiceXML in a way that violates the standard, it changes the way that the platform consumes VoiceXML.

The example that I will demonstrate below is written in 100% standard-compliant VoiceXML.  It can be run on any VoiceXML platform that adheres to the VoiceXML spec, and probably a bunch that don't.

That's why this announcement from Voxeo is a game changer for developers - it provides sophisticated and powerful new functionality without the burden of having to alter your code in a way that makes it less portable.  In addition, it allows developer to create sophisticated applications that can be delivered to users via IM and SMS using all the familiar tools of VoiceXML.

All of the benefits of working with VoiceXML are available for developers that want to write SMS and IM apps -- grammars, the <acronym title="Form Interpretation Algorithm">FIA</acronym>, the standard <a href="http://www.w3.org/TR/2004/REC-voicexml20-20040316/#dml1.5" target="_blank">root-leaf structure</a> of VoiceXML applications -- its all there.

<h3>The nose knows</h3>

While it might be tempting to think that <strong>any</strong> existing VoiceXML application can be repurposed with no changes for IM and/or SMS, this is probably not true except for the most simplistic of apps.  Just as there are certain types of interactions that may make sense for use with visual web applications and not with voice apps, there are certain types of dialog flows that work well in voice apps but don't necessarily translate well to the world of IM and SMS.

Consider the following:
<ul>
	<li style="margin-bottom:4px;">Phone applications often employ a confirmation dialog, to prompt a caller to verify what they have just entered - particularly if the information is important or sensitive (e.g., a credit card number, or account number).  This probably not a good practice with SMS or IM apps because, unlike with a phone application, a user can see what information they are about to submit <em>before</em> the actually send it.  Also, since multiple text messages can mean increased changes for a user its a good idea to cut down on this where possible.</li>
	<li style="margin-bottom:4px;">DTMF-based phone applications often use prompts like "Press 1 to repeat, press 2 to go to the previous menu..."  The notion of "pressing" something is really tied to the telephone key pad and is probably not appropriate for SMS or IM applications.  Its much clearer to use prompts like "Enter 1 to go to the next option", or "Send #back to go to the previous step".</li>
	<li> Re-prompting a user on noinput is a pretty standard practice in phone applications, but is probably not a good idea in IM or SMS apps.  If a person is using their cell phone to interact with an SMS application, and then gets a call, they probably do not want to be repeatedly prompted for input by your app that they will not have an opportunity to enter until after their call has finished.
</li></ul>

So if all of this is true, then how does a developer determine how an application is being accessed? It seems pretty clear that there needs to be a way to determine if an application is being called from a phone, from an SMS cell phone or from an IM client.

Turns out, there is - good old fashioned browser sniffing.

<h3>A simple example</h3>

The <a href="http://blogs.voxeo.com/voxeodeveloperscorner/2009/08/27/how-to-im-and-textsms-your-voicexml-applications/" target="_blank">Voxeo blog</a> has a good overview of this new feature, and how you can set up and run a VoiceXML application that is also IM and SMS enabled.

One of things that is really nice about this new feature of the Voxeo Prophecy platform is that the text that is sent to a user via SMS or IM, and all of the inputs sent back from the user, follow the same logic rules as with a phone interaction.  This means that if there are VoiceXML elements with conditional attributes on them, they get evaluated when rendering text for SMS and IM, just like they do for the telephone.

Another really nice feature is that Voxeo lets you deploy a single number for SMS and traditional phone access to your application.  So if you dial a provisioned number on your telephone, the traditional VoiceXML browser engages and executes your code in the typical fashion.  If you send an SMS message to the number, the new Prophecy 10 browser engages your code and manages the SMS interaction.

Because of this, its fairly straightforward to detect which browser is accessing your code, and create a simple variable declaration that will govern how your output is rendered.

The following is a simple PHP class that can be used to sniff the browser type requesting a specific file.



<p>To use this class, we simply include it in our PHP page that will render VoiceXML, determine what kind of user agent is requesting the page by calling <code>getChannelType()</code> and set a VoiceXML variable accordingly.</p>



If an SMS or IM client is interacting with our application, the <strong>Prophecy 10</strong> browser will make the request.  If its a standard telephone, it will be the <strong>Prophecy 8</strong> browser, so we really just need to use the value of <code>$_SERVER['HTTP_USER_AGENT']</code> to guide our app.

You'll notice that if an SMS or IM client is accessing our app, we skip the confirmation field. We've also customized the reprompt logic on noinput to ensure that a user does not get successive SMS or IM messages telling them "Sorry, I did not get your response."

So with a few lines of server side code, we've custom tailored our VoiceXML dialog to ensure that it renders properly regardless of the type of user agent accessing it.

Voxeo Prophecy's new features are powerful, and VoiceXML developers should take notice.  With Prophecy, they can leverage their skills and become crackerjack SMS and IM app developers as well.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1398</wp:post_id>
  <wp:post_date>2009-12-05 19:46:06</wp:post_date>
  <wp:post_date_gmt>2009-12-05 23:46:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>user-agent-sniffing-for-multi-channel-apps</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="post_tag" nicename="im"><![CDATA[IM]]></category>
  <category domain="post_tag" nicename="sms"><![CDATA[SMS]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <category domain="post_tag" nicename="voicexml"><![CDATA[VoiceXML]]></category>
  <category domain="post_tag" nicename="voxeo"><![CDATA[Voxeo]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] User Agent Sniffing for Multi-Channel Apps. #url# #voxeo #ivr #sms]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1398]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1398]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Classic Dilbert</title>
  <link>http://voiceingov.org/2009/12/11/classic-dilbert/</link>
  <pubDate>Fri, 11 Dec 2009 17:28:20 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1421</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://dilbert.com/strips/comic/2009-12-11/" title="Dilbert.com"><img src="http://dilbert.com/dyn/str_strip/000000000/00000000/0000000/000000/70000/5000/900/75992/75992.strip.gif" border="0" alt="Dilbert.com" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1421</wp:post_id>
  <wp:post_date>2009-12-11 13:28:20</wp:post_date>
  <wp:post_date_gmt>2009-12-11 17:28:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>classic-dilbert</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1421]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1421]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Building Voice Applications with Tropo and CouchDB</title>
  <link>http://voiceingov.org/2010/01/04/building-voice-applications-with-tropo-and-couchdb/</link>
  <pubDate>Mon, 04 Jan 2010 23:49:20 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1471</guid>
  <description/>
  <content:encoded><![CDATA[The beginning of a new decade is usually the time when there is a lot of reflection on what has changed for the better (and the worse) over the past 10 years.
<img src="http://voiceingov.files.wordpress.com/2010/01/tropo_logo.png" alt="Tropo" title="Tropo" style="margin:10px;padding:15px;float:right;" />

The end of 2009 saw its fair share of pundits talking about how far we've come since the year 2000, but for me the most dramatic change has been to the way that voice applications are developed and deployed.  In the past 10 years (hell, in the past 10 months!) we've seen a dramatic shift toward cloud telephony with the launch of a number of new services that have fundamentally altered how voice applications can be built.

There has simply never been a more varied and powerful array of tools available for developers to build phone applications with than exists today.  Some of the newest and most innovative platforms around for building cloud-based phone applications are listed below:

<ul>
<li><a href="http://www.tropo.com/" target="_blank">Tropo</a></li>
<li><a href="http://cloudvox.com/" target="_blank">Couldvox</a></li>
<li><a href="http://www.callfire.com/dialer/cm/custom_telephony.html" target="_blank">CallFire</a></li>
<li><a href="http://tringme.com/" target="_blank">TringMe</a></li>
<li><a href="http://www.twilio.com/" target="_blank">Twilio</a></li>
<li><a href="http://www.ribbit.com/" target="_blank">Ribbit</a></li>
</ul>

Over the same period of time there's also been lots of changes to some of the foundational technologies supporting voice applications (and other kinds of web applications). The NoSQL movement is gaining steam, and there is an interesting collection of new <a href="http://nosql-database.org/" target="_blank">document-oriented databases</a> available for developers to use.  One of my favorite is Apache <a href="http://couchdb.apache.org/" target="_blank">CouchDB</a>.

<img src="http://voiceingov.files.wordpress.com/2010/01/couchdb-logo.png" alt="Apache CouchDB Logo" />

The thing I find really interesting about CouchDB is that it makes use of an HTTP-based API - pretty much any tool or technology that can communicate via HTTP can be used to interact with a CouchDB instance (hello command line...).  In addition, that data structure of the documents stored in a CouchDB instance is <a href="http://www.json.org/" target="_blank">JSON</a>.  In my mind, this makes CouchDB a very useful choice when building cloud applications, specifically cloud telephony applications.

Who wants to use one of those old relational databases to build a cutting edge cloud phone app?  That's so 2009.

This post and the next several that follow it will detail how to set up a CouchDB instance and to build a cloud telephony application with it using the Voxeo <a href="http://tropo.com/" target="_blank">Tropo platform</a>.

For those that don't know, Tropo is one of the new cloud telephony platforms that lets developers author voice apps quickly and easily using one of several different languages.  It's open source, well documented and supported by Voxeo's industry leading telephony infrastructure.

So, if you want to start the new decade of right by learning how to build powerful, scalable, full featured voice applications using Tropo and CouchDB, read on.

<strong>Getting Started with Tropo</strong>

Head on over to <a href="http://tropo.com/" target="_blank">Tropo.com</a> and set up a new account (if you don't have one already).  Take a little time to review the <a href="http://docs.tropo.com/" target="_blank">documentation for Tropo</a> - I'd recommend running through a few of the sample apps if you  have time.  They're fairly self explanatory and provide a solid overview of the different languages that can be used to write a Tropo app - I'll be using PHP for the example application in this series of blog posts, but you  can use any language that Tropo supports.

Deploying and testing an application on Tropo is a snap, and you can even deploy a PSTN number for your application (or you can use the Skype calling number automatically provisioned when you create a Tropo app).  More on this in the next post.

<strong>Installing CouchDB</strong>

The next step in building our cloud telephony application for the new decade is getting CouchDB up and running.  The steps listed below detail how to install CouchDB 0.9 on Ubuntu 8.04 (the long-term support version of Ubuntu).  A few points before we get started...

This specific combination of Ubuntu and CouchDB is my own preference.  I typically run Ubuntu 8.04 when I deploy a new virtual server, but you are free to run whatever version you like, or another Linux distro entirely - its up to you.  Depending on the version of Ubuntu you are running, you may be able to get CouchDB 0.9 installed by simply doing <code>sudo apt-get install couchdb</code>.

Keep in mind, though, that the HTTP API for CouchDB can change dramatically between versions - I've noticed some significant changes when going from 0.8 to 0.9 - the discussion here will focus on version 0.9 (as does a lot of <a href="http://books.couchdb.org/relax/" target="_blank">good documentation on CouchDB</a> available on the web).

If you don't want to install CouchDB yourself, you may be able to take advantage of one of the growing number of CouchDB hosting services like <a href="http://cloudant.com/" target="_blank">CloudAnt </a>or <a href="http://hosting.couch.io/" target="_blank">Couch.io</a>.  Again, its up to you.

To install CouchDB 0.9 on Ubuntu 8.04, using the following steps.

Step 1. Determine what version of Ubuntu is running on your machine:

<blockquote>$ cat /etc/lsb-release</blockquote>

Step 2. Install Erlang  - CouchDB 0.9 requires at least Erlang version 5.5.5.  If you are running Ubuntu 8.10 or above, you can probably get the required Erlang version by simply doing <code>sudo apt-get install erlang</code>.  (Note - The last step in this section may take a while, feel free to go grab a cup of Joe while the source compiles.)

<blockquote>
    $ sudo apt-get build-dep erlang
    $ sudo apt-get install java-gcj-compat java-gcj-compat-dev
    $ wget http://www.erlang.org/download/otp_src_R12B-5.tar.gz
    $ tar -zxvf otp_src_R12B-5.tar.gz
    $ cd otp_src_R12B-5/
    $ ./configure &amp;&amp; make &amp;&amp; sudo make install
</blockquote>

Step 3. Install CouchDB dependencies:

<blockquote> $ sudo apt-get install libmozjs-dev libicu-dev libcurl4-openssl-dev</blockquote>

Step 4. Download CouchDB 0.9 Source and install:

<blockquote>
    $ wget http://apache.mirrors.redwire.net/couchdb/0.9.0/apache-couchdb-0.9.0.tar.gz
    $ tar -zxvf apache-couchdb-0.9.0.tar.gz
    $ cd apache-couchdb-0.9.0/
    $ ./configure &amp;&amp; make &amp;&amp; sudo make install
</blockquote>

Step 5. Create a user for CouchDB (More on this in the CouchDB README.txt file):

<blockquote>
    $ sudo adduser &ndash; &ndash;system &ndash; &ndash;home /usr/local/var/lib/couchdb &ndash; &ndash;no-create-home &ndash; &ndash;shell /bin/bash &ndash; &ndash;group &ndash; &ndash;gecos "CouchDB Administrator" couchdb
    $ sudo chown -R couchdb /usr/local/etc/couchdb
    $ sudo chown -R couchdb /usr/local/var/lib/couchdb
    $ sudo chown -R couchdb /usr/local/var/log/couchdb
</blockquote>

Step 6. Start CouchDB

    <blockquote>
    $ sudo /usr/local/etc/init.d/couchdb start

    If you see an error that says:

    <em>"Apache CouchDB needs write permission on the PID file: /usr/local/var/run/couchdb.pid"</em>

    Do the following, then try starting CouchDB again:

    $ sudo touch /usr/local/var/run/couchdb.pid
    $ sudo chown couchdb:couchdb /usr/local/var/run/couchdb.pid

    When CouchDB starts successfully, you will see a message that says:

    <strong>* Starting database server couchdb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ OK ]</strong>
</blockquote>

Step 7. Test connectivity to CouchDB:

 <blockquote>
     $ curl http://127.0.0.1:5984

    You should see:

    <strong>{"couchdb":"Welcome","version":"0.9.0"}</strong>
</blockquote>


The configuration file for CouchDB is located at /usr/local/etc/couchdb/local.ini  -- in the next post, we'll modify some of the config settings for our CouchDB instance so that we can access it via HTTP from the Tropo environment.

We'll also set up our first CouchDB database, add some documents and start coding our new cloud telephony application using Tropo.

Stay tuned...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1471</wp:post_id>
  <wp:post_date>2010-01-04 19:49:20</wp:post_date>
  <wp:post_date_gmt>2010-01-04 23:49:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>building-voice-applications-with-tropo-and-couchdb</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="cloud-telephony"><![CDATA[Cloud Telephony]]></category>
  <category domain="category" nicename="couchdb"><![CDATA[CouchDB]]></category>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="post_tag" nicename="tropo"><![CDATA[Tropo]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <category domain="post_tag" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Building Voice Applications with Tropo and CouchDB. #url# #voxeo #tropo #couchdb #ivr]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.voiceingov.org/blog/?p=1471]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/sTZ0X]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1471]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1471]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>103</wp:comment_id>
    <wp:comment_author><![CDATA[Dominique Boucher]]></wp:comment_author>
    <wp:comment_author_email>apps+41178401793.690674016.d3e143ad27d309c75a647dabda117fec@proxymail.facebook.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Dominique-Boucher/690674016</wp:comment_author_url>
    <wp:comment_author_IP>70.55.141.114</wp:comment_author_IP>
    <wp:comment_date>2010-01-04 22:51:48</wp:comment_date>
    <wp:comment_date_gmt>2010-01-05 02:51:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great post!

I completely agree with you that we are no more confined to VoiceXML to write powerful voice applications. That's a very good thing, IMO. And the Tropo approach is very compelling: write the application in the language you are the most proficient with, which makes the learning curve almost flat. Well, except of course for all the grammar and voice user interface stuff. But you now have more time to concentrate on those aspects. And you can experiment more easily.

BTW, your instructions worked out of the box, except that in Step 5, the first command doesn't work when copied/pasted since it contains some non-ascii characters. ;-)

Can't wait to read the next post!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-05 02:51:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>104</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2010-01-05 09:54:15</wp:comment_date>
    <wp:comment_date_gmt>2010-01-05 13:54:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sorry about the issue with the adduser command in step 5 - had a hard time getting the double dash needed for some of these options to render properly.

Look for the next post in this series by mid week. Thanks for the great feedback!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-05 13:54:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>105</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;.::: VOX POPULI :::&#8230;. &raquo; Blog Archive &raquo; Relaxing on the Couch with Tropo and CouchDB]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=1510</wp:comment_author_url>
    <wp:comment_author_IP>76.12.174.225</wp:comment_author_IP>
    <wp:comment_date>2010-01-06 19:48:17</wp:comment_date>
    <wp:comment_date_gmt>2010-01-06 23:48:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] the last post, I detailed how to get a CouchDB instance up and running on Ubuntu, and how to get an account [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-06 23:48:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>106</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;.::: VOX POPULI :::&#8230;. &raquo; Blog Archive &raquo; NoSQL Telephony with Tropo and CouchDB]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.voiceingov.org/blog/?p=1525</wp:comment_author_url>
    <wp:comment_author_IP>76.12.174.225</wp:comment_author_IP>
    <wp:comment_date>2010-01-12 18:51:53</wp:comment_date>
    <wp:comment_date_gmt>2010-01-12 22:51:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] the first post of this series, I walked through a quick install of CouchDB and provided information on getting a [...] ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-12 22:51:53</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Relaxing on the Couch with Tropo and CouchDB</title>
  <link>http://voiceingov.org/2010/01/06/relaxing-on-the-couch-with-tropo-and-couchdb/</link>
  <pubDate>Wed, 06 Jan 2010 23:48:12 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1510</guid>
  <description/>
  <content:encoded><![CDATA[This is the continuation of a series that will describe how to build voice applications with the <a href="http://www.tropo.com" target="_blank">Tropo</a> cloud telephony platform and <a href="http://couchdb.apache.org/" target="_blank">CouchDB</a>.
<img src="http://voiceingov.files.wordpress.com/2010/01/couchdb-logo.png" alt="Apache CouchDB Logo" />
In the <a href="http://www.voiceingov.org/blog/?p=1471">last post</a>, I detailed how to get a CouchDB instance up and running on Ubuntu, and how to get an account started on Tropo so that you can start building cloud telephony applications.  In this post, we'll create our first CouchDB database and create a simple Tropo application that connects to our CouchDB instance.  First, however, we need to tweak the default settings for CouchDB so that we can access our CouchDB instance from the an external environment.

<strong>Configuring CouchDB</strong>

Recall from the last post that the configuration files for CouchDB are located in <code>/usr/local/etc/couchdb/</code>.  Open the local configuration file and take a look at the default settings:

<blockquote>
$ sudo vim /usr/local/etc/couchdb/local.ini
</blockquote>

In the <code> [httpd] </code> section, you’ll notice the setting for the default port that is used to connect to CouchDB - 5984.  You’ll also note the <code>bind_address</code> setting.  By default, CouchDB listens only on localhost – you can change this by altering the value of <code>bind_address</code> to a publicly resolvable IP address (you may need to uncomment this setting as well).

However, before proceeding please note that CouchDB does not yet have a built in security model, so anyone that can access the IP address in the configuration file can potentially access your CouchDB instance.  We’ll need to take some steps to restrict access to our CouchDB instance – there are several ways of doing this.

First, if you know the IP address (or range of addresses) that will be accessing your CouchDB instances, you can <a href="https://help.ubuntu.com/community/IptablesHowTo" target="_blank">simply use IPTables to restrict access</a> to that IP:

<blockquote>
$ iptables -A INPUT -p tcp -s 64.57.102.34 --dport 5984 -j ACCEPT
</blockquote>

The above command would restrict access to your CouchDB instance to a single IP address.

Another method for securing a publicly exposed CouchDB instance is to use Apache password authentication.  A good <a href="http://smartic.us/2008/11/08/couchdb-basic-authentication/" target="_blank">overview of this approach</a> can be found here.

After you’ve modified the bind_address setting, restart CouchDB and test connectivity to it:

<blockquote>
$ sudo /usr/local/etc/init.d/couchdb restart
$ curl http://your_new_couchdb_ip:5984
</blockquote>

<strong>Creating our CouchDB Database</strong>

Once you have your CouchDB instance up and running, you can create a database in one of two ways.  The first, and easiest, is simply to use the <code>curl</code> command.  You create a database in CouchDB by using the HTTP PUT method:

<blockquote>
$curl -X PUT http://your_new_couchdb_ip:5984/call_logs
</blockquote>

You can also create a database (and do lots of management functions in CouchDB) by using the GUI (called Futon). Its located at http://your_new_couchdb_ip:5984/_utils

<strong>Building a Simple Auto Attendant Application with Tropo</strong>

Now that we have an initial database in our CouchDB instance, lets build a simple Tropo application that will populate it with records (or <em>documents</em> in CouchDB parlance):



This simple application is a basic auto attendant.  It asks the caller for a 4-digit extension and then transfers them to a 10-digit PSTN number.  At the end of the call, we write a very simple call log document to our new call_logs database using the HTTP POST method.

(One small side note – you can use either the POST or PUT methods to insert a document into a CouchDB database.  However, using PUT assumes you want to assign a specific document ID to your document.  When you use HTTP POST, CouchDB will automatically assign a document ID.  For now, we’ll keep things simple and use POST.)

Much of the functionality in this simple app is just stubbed out for now - i.e., the <code>getPhoneNumberByExtension()</code> method - we’ll build more of this out in later posts.

Modify this file by adding your instance-specifc details to the constant declarations at the top.  Do also note that the last two constants can remain blank for now.

<blockquote>
<code>
define("COUCH_DB_DESIGN_DOCUMENT_NAME", "");
define("COUCH_DB_SHOW_FUNCTION_NAME", "");
</code>
</blockquote>

We’ll talk about how to use design documents in the next post.

When you load this file up on Tropo and make a test call, you will see your call log document is inserted into the call_logs database.  The structure of the document is pure JSON, which is supported <a href="http://us2.php.net/manual/en/book.json.php" target="_blank">quite nicely in PHP</a> (and most every other language that can run on Tropo as well).

In the next post, we’ll examine CouchDB design documents in more detail and modify our simple demo application to get a list of extensions from another CouchDB database and parse the JSON data structure in the <code>getPhoneNumberByExtension()</code> method.

Until then, keep on relaxing…. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1510</wp:post_id>
  <wp:post_date>2010-01-06 19:48:12</wp:post_date>
  <wp:post_date_gmt>2010-01-06 23:48:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>relaxing-on-the-couch-with-tropo-and-couchdb</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="cloud-telephony"><![CDATA[Cloud Telephony]]></category>
  <category domain="category" nicename="couchdb"><![CDATA[CouchDB]]></category>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="post_tag" nicename="tropo"><![CDATA[Tropo]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <category domain="post_tag" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Relaxing on the Couch with Tropo and CouchDB. #url# #voxeo #tropo #couchdb #ivr]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.voiceingov.org/blog/?p=1510]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/0EPS8]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1510]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1510]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>107</wp:comment_id>
    <wp:comment_author><![CDATA[Jan Lehnardt]]></wp:comment_author>
    <wp:comment_author_email>jan@apache.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.220.4.154</wp:comment_author_IP>
    <wp:comment_date>2010-01-07 07:42:21</wp:comment_date>
    <wp:comment_date_gmt>2010-01-07 11:42:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey,

great post! On the configuration though: You want to make customizations in local.ini only. default.ini is going to be overwritten with the factory defaults, when you upgrade CouchDB. The upgrade won't touch local.ini though and keep your customizations active.

Cheers
Jan
--]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-07 11:42:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>108</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>75.150.49.141</wp:comment_author_IP>
    <wp:comment_date>2010-01-07 09:20:25</wp:comment_date>
    <wp:comment_date_gmt>2010-01-07 13:20:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ah, thanks Jan!  Good point - I'll make that change in this post.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-07 13:20:25</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>109</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/people/Mark-Headd/527353413</wp:comment_author_url>
    <wp:comment_author_IP>75.150.49.141</wp:comment_author_IP>
    <wp:comment_date>2010-01-07 18:36:30</wp:comment_date>
    <wp:comment_date_gmt>2010-01-07 22:36:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hmmm. Looks like the value of the caller ID that I'm trying to write in the call log in the example above is a little squirrely.

Not sure what I'm doing wrong, so I've <a href="http://www.tropo.com/forums/?xt=1262904227270&amp;&amp;bb-cid=99&amp;bb-statusBitToShow=0&amp;bb-tid=1048001#bb" rel="nofollow">opened up a ticket</a> over on the Tropo forums.  They've got excellent customer support, so I should have an answer soon.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-07 22:36:30</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>XHP for VoiceXML</title>
  <link>http://voiceingov.org/2010/02/14/xhp-for-voicexml/</link>
  <pubDate>Sun, 14 Feb 2010 22:23:08 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1607</guid>
  <description/>
  <content:encoded><![CDATA[Facebook has been busy lately doing all sorts of interesting things to the PHP scripting language.  Although most of the recent PR hype was centered around <a href="http://wiki.github.com/facebook/hiphop-php/">HipHop for PHP</a> (a name that, quite frankly, makes me want to use it less), Facebook also released another very interesting and potentially useful extension for PHP - <a href="http://github.com/facebook/xhp">XHP</a>.  From the <a href="http://wiki.github.com/facebook/xhp/">XHP wiki on Github</a>:

<blockquote>
<a href="http://github.com/facebook/xhp">XHP</a> is a PHP extension which augments the syntax of the language such that XML document fragments become valid PHP expressions. This allows you to use PHP as a stricter templating engine and offers much more straightforward implementation of reusable components.
 </blockquote>

Not sure where I read it, but one commenter compared XHP to <a href="https://developer.mozilla.org/En/E4X/Processing_XML_with_E4X">E4X in JavaScript</a>.  It's a neat idea, and its actually not all that hard to start playing around with XHP (if you're comfortable installing PHP extensions).

After thinking about XHP and playing around with it a bit, I started to think it might be useful as a way of generating not just HTML, but also other XML-based languages like VoiceXML.

The core XHP classes that are used for generating HTML are fairly easy to understand, once you get use to the syntax - extending these core classes to generate VoiceXML (or any other XML-based language) is not all that hard.  But before we do that, let's install XHP as a PHP extension and kick the tires a bit.

<h3>Installing XHP on Ubuntu</h3>

I've tried the following instructions on both Ubuntu 8.04 and 8.10, and I'm pretty sure they'll work with just about any recent Ubuntu version.

Make sure you've got the basics for building PHP extensions:
<blockquote>
$ sudo apt-get install build-essential
$ sudo apt-get install php5-dev
</blockquote>

Get the XHP source code:
<blockquote>
$ mkdir xhp
$ cd xhp
$ git clone git://github.com/facebook/xhp.git
</blockquote>

Get the PHP source code
<blockquote>
$ sudo apt-get source php5
</blockquote>

Make a directory in the PHP source code for the XHP extension
<blockquote>
$ mkdir  php-5.X.X/ext/xhp
$ cp -r xhp/xhp/* php-5.X.X/ext/xhp/
</blockquote>

Depending on your system, you may need to add some of the prerequisites for building this extension:
<blockquote>
$ sudo apt-get install flex bison
</blockquote>

I tried this approach on both Ubuntu 8.04 and 8.10 and in both cases only version 0.13.5 of re2c worked (earlier version obtained via apt-get did not cut the mustard).  If you're running a later version, you may be able to get this version of re2c from the standard repos.

For this example, I'll just build it from source:
<blockquote>
$ wget http://sourceforge.net/projects/re2c/files/re2c/0.13.5/re2c-0.13.5.tar.gz/download
$ tar -zxvf re2c-0.13.5.tar.gz
$ cd re2c-0.13.5/
$ ./configure
$ sudo make
$ sudo make install
</blockquote>

Move to new XHP extension directory and get 'er done.
<blockquote>
$ cd php-5.X.X/ext/xhp
$ phpize
$ ./configure
$ sudo make
$ sudo make install
</blockquote>

When you run <code>make install</code>, the new extension file is placed in a directory where Apache can load it - however, we need to modify the <code>php.ini</code> file so that Apache is aware of the extension.  Open <code>php.ini</code> and add the following:

<blockquote>
extension=xhp.so
extension_dir=directory_where_xhp.so_is_located
</blockquote>

When setting this last option, use the directory where xhp.so was placed by <code>make install</code>.  Now we just restart Apache:

<blockquote>
$ sudo /etc/init.d/apache2 restart
</blockquote>

Easy right?  Unfortunately, things get a little less clear at this point.  It turns out that to make XHP work properly, some PHP libraries need to be included in any of the XHP scripts we write.  These files are located in the <code>php-lib</code> directory of the XHP source code.

To make things easier (especially when we start to write our own extension to XHP for VoiceXML, lets move these files to a convenient local directory that we can include in our scripts:

<blockquote>
$ cp php-5.X.X/ext/xhp/php-lib/* my/local/directory/php-lib/
</blockquote>

So now we can do some interesting stuff like this:



What's especially interesting about XHP is that it enforces proper syntax at compile time, so if your markup isn't syntactically correct an exception gets tossed.

<h3>Generating VoiceXML with XHP</h3>

The XHP libraries we just discussed implement the HTML spec out of the box.  However, if you try and render tags that are not part of the HTML spec an exception will occur.  I wanted to find out how hard it would be to extend the concepts behind XHP for other markup languages, like VoiceXML.  Turns out, its not hard at all.

If you look at the <code>init.php</code> file that is included in the example above, you'll see its in turn including a file called html.php, which defines all of the HTML elements that can be rendered by XHP, the attributes that each can have and also the parent-child relationship between elements.

Using this is a guide (the syntax is new but fairly easy to follow), I knocked out a quick class file for some basic VoiceXML elements - just to illustrate the concept:



This is admittedly rough, and it only covers a few basic VoiceXML elements, but it demonstrates that extending XHP to render VoiceXML is actually quite easy.  To use this file, simple edit the <code>init.php</code> file mentioned previously and add an include statement:

<blockquote>

</blockquote>

Now we're ready to use XHP to generate VoiceXML:




How cool is that?

I'm still toying around with XHP, but this little experiment clearly shows that it has use beyond just simply rendering HTML.  I'd be interested in hearing from other developers - is this worth a full blown project to flush out a complete VoiceXML class library for XHP?  What other markup languages would make good candidates for this same type of approach?

Post a comment here, a tweet to <a href="http://twitter.com/mheadd">@mheadd</a> or shoot a quick e-mail to mheadd [at] voiceingov.org with your thoughts or comments.     ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1607</wp:post_id>
  <wp:post_date>2010-02-14 18:23:08</wp:post_date>
  <wp:post_date_gmt>2010-02-14 22:23:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>xhp-for-voicexml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Using Facebook's XHP extension to #PHP for #VoiceXML. #url# #opensource #facebook #ubuntu]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.voiceingov.org/blog/?p=1607]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/VMgJD]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1607]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1607]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Cloudvox: Cloud Telephony Applications Made Easy</title>
  <link>http://voiceingov.org/2010/02/25/cloudvox-cloud-telephony-applications-made-easy/</link>
  <pubDate>Thu, 25 Feb 2010 15:20:13 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1625</guid>
  <description/>
  <content:encoded><![CDATA[A couple of months ago, I did <a href="http://www.voiceingov.org/blog/?p=1235">a quick write up</a> on a new cloud telephony company named <a href="http://www.cloudvox.com/">Cloudvox</a>.  In the interim, I've been doing some playing around with their <a href="http://help.cloudvox.com/faqs/getting-started/http-api">HTTP/JSON API for creating telephone applications</a>, and I've been blown away by how simple and powerful a tool it is for building sophisticated cloud telephony applications.

This post will provide a quick overview of how the Cloudvox JSON API can be paired with PHP and the delightfully awesome <a href="http://limonade.sofa-design.net/">Limonade</a> Framework.  If you're not a PHP developer don't despair - this example can easily be ported to other languages like Ruby (using <a href="http://www.sinatrarb.com/">Sinatra</a>) or C# (using <a href="http://kayakhttp.com/">Kayak</a>).

<h3>Cloudvox API Helper Classes</h3>

When writing apps for the Cloudvox JSON API, there are two things that we need to manage - the JSON that we will send to Cloudvox (using plain old HTTP) and the response Cloudvox sends back to our app (this will include any user input collected from the caller, and also things like a unique identifier for the call, caller ID and other information about the call).

To make managing both sides of our exchange with Cloudvox easier, I've created a set of PHP classes that can be used with any standard PHP IDE to make writing Cloudvox JSON and parsing Cloudvox responses simple and easy.  You can download this class library from <a href="http://gist.github.com/308081">GitHub</a>.

Using these classes is pretty straightforward:

<blockquote>
<code>

</code>

Will render:

<code>[{"name":"Speak","phrase":"Hello world!"},{"name":"Hangup"}]</code>

</blockquote>

Required properties are included in the constructor for each class - in most IDE's this means that you can simply use <code>Shift + Control + Space Bar</code> when you create a new instance of the object to see what properties are required.

Optional properties on all classes are handled by using the <a href="http://www.php.net/manual/en/language.oop5.overloading.php">PHP __set() method</a> in the base class.  This effectively let's you overload the object and set properties which are not declared in the class definition.  So for example, if we wanted to collect input from the caller (e.g., their zip code) we would use the GetDigits class, and overload it to add a URL to post the results to:

<blockquote>
<code>
url = "http://somehost.com/myscript.php";

?&gt;
</code>
</blockquote>

The problem with overloading in PHP is that you don't get the benefit of having your IDE display overload options (it can't because the properties that we wish to set are not declared in the class definition).  There also isn't any way to control what overloaded properties get set, so its possible to add things the Cloudvox won't understand.

I'm not sure there is any way around this given the way that PHP has implemented overloading.  I do plan to work on a set of Cloudvox classes using another language that handles overloading a bit better, like C#, but for now you should only overload to set the <code><strong>url</strong></code> and <code><strong>method</strong></code> properites for classes that can use them (see the Cloudvox docs for more details).

<h3>Sipping on some Limonade</h3>

If you know of the excellent Ruby Framework <a href="http://www.sinatrarb.com/">Sinatra</a> but you want to code your project in PHP, fear not - check out the equally excellent PHP framework called <a href="http://limonade.sofa-design.net/">Limonade</a>.  It's the functional equivalent of Sinatra for PHP.

Using Limonade with our set of Cloudvox JSON classes makes building cloud telephony applications very simple.  The biggest benefit is that you don't have to split up the different steps in your application (i.e., collecting input, validating input, re prompting, etc.) into different PHP files (which can be kind of a pain) - all of your steps can be contained within a single file.

Limonade lets you set a URL "route" that Cloudvox can send HTTP requests to with results, and to get rendered JSON for another application step.  For example:

<blockquote>
<code>

</code>

</blockquote>

This "Hello World" example - defined in a script named <code>sample.php</code> - could be accessed by hitting <code>http://somehost.com/index.php?/start</code>.  To make things easier, we'll use a little Apache magic to allow URL rewriting:



This will let us access the above URL by hitting <code>http://somehost.com/index.php/start</code>.

A simple demo app using the Cloudvox JSON helper classes and the Limonade Framework can be seen below.  You can use this sample application with a <a href="http://www.cloudvox.com/signup" target="_blank">new Cloudvox account</a> to get started building cloud telephony applications.



This simple app demonstrates how powerful the <a href="http://help.cloudvox.com/faqs/getting-started/http-api">Cloudvox JSON API</a> is for creating cloud telephony apps.  When coupled with an elegant framework like Limonade, sophisticated, cloud-based telephony applications are readily available to any developer that wants to build one.

The helper classes for the Cloudvox API are obviously a work in progress, so if anyone reading this has comments or suggestions feel free to let me know - mheadd [at] voiceingov.org.


  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1625</wp:post_id>
  <wp:post_date>2010-02-25 11:20:13</wp:post_date>
  <wp:post_date_gmt>2010-02-25 15:20:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cloudvox-cloud-telephony-applications-made-easy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Cloud Telephony Applications Made Easy With #Cloudvox. #url# #ivr #voip #php #ifbyphone]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/0stLy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1625]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1625]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_14aea1e0110c716fc1d1257ba03f0367</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_13d51aa940b90bc9226d5160d90a5a01</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Classic Dilbert</title>
  <link>http://voiceingov.org/2010/03/22/classic-dilbert-2/</link>
  <pubDate>Mon, 22 Mar 2010 12:54:45 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1656</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://dilbert.com/strips/comic/2010-03-22/" title="Dilbert.com"><img src="http://dilbert.com/dyn/str_strip/000000000/00000000/0000000/000000/80000/5000/700/85737/85737.strip.gif" border="0" alt="Dilbert.com" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1656</wp:post_id>
  <wp:post_date>2010-03-22 08:54:45</wp:post_date>
  <wp:post_date_gmt>2010-03-22 12:54:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>classic-dilbert-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.voiceingov.org/blog/?p=1656]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/ruAY4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1656]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1656]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tropo Goes Global</title>
  <link>http://voiceingov.org/2010/03/25/tropo-goes-global/</link>
  <pubDate>Thu, 25 Mar 2010 12:45:17 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1661</guid>
  <description/>
  <content:encoded><![CDATA[A couple of months back, <a href="http://www.voiceingov.org/blog/?p=1314">I wrote a post</a> about how nontraditional communication channels - IM, SMS, social networks, etc. - are changing the way that businesses and governments interact with their customers.  These channels are "nontraditional" because they are not typically utilized to provide customer service, or to take orders.

That is changing, and the <a href="http://blog.tropo.com/2010/03/25/tropo-adds-twitter-and-goes-international/" target="_blank">announcement today from Voxeo</a> about their new Tropo service is both evidence of that change, and the catalyst for even more change.

<img src="http://voiceingov.files.wordpress.com/2010/01/tropo.jpg" alt="Voxeo Tropo Logo" title="Voxeo Tropo Logo" style="float:right;padding:5px;margin:20px;" />

I've always been impressed with <a href="https://www.tropo.com/home.jsp" target="_blank">Tropo</a>, and not long ago I worked on <a href="http://www.voiceingov.org/blog/?cat=58">a series of posts</a> demonstrating how to utilize the Tropo platform with the utterly awesome NoSQL database <a href="http://couchdb.apache.org/" target="_blank">CouchDB</a>.

The newly reworked Tropo adds an impressive array of new features.  It's not all that unusual any more to see cloud telephony services offering SMS support - it makes sense, and its right in line with what I have been saying about how nontraditional communications channels are becoming more important.  Tropo goes <a href="https://www.tropo.com/how-it-works/home.jsp" target="_blank">way beyond this</a> by adding support for an array of IM networks and also for Twitter (the 800 lb gorilla of nontraditional communication channels).

The international support for Tropo is also impressive - they provide international numbers for inbound calls, and can also handle outbound dialing to international numbers.  Phone applications can use international <acronym title="Text-to-Speech">TTS</acronym> engines to render content to non-English users.  Even more impressive, Tropo's speech recognition capabilities (which have always separated it from other cloud telephony providers) can now support a number of foreign languages - UK English, Dutch, French, German, Italian, Mexican Spanish or Castilian Spanish.

Tropo is an impressive platform for a number of reasons.  It used to be very hard (and, in some respects, still is) to build a great phone application.  The Tropo platform allows developers to build great phone applications, and to leverage the investment in these apps by extending them to other channels and other countries.

A single code base serving different customers on multiple channels.  That's powerful.

And now, with the release of the new Tropo service, a single code base can serve multiple channels in multiple countries in multiple languages.

The times they are indeed a-changin'.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1661</wp:post_id>
  <wp:post_date>2010-03-25 08:45:17</wp:post_date>
  <wp:post_date_gmt>2010-03-25 12:45:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tropo-goes-global</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="couchdb"><![CDATA[CouchDB]]></category>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Tropo Goes Global #url# #Voxeo #IVR #SMS #SIP #Twitter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/VES6s]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.voiceingov.org/blog/?p=1661]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1661]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1661]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>110</wp:comment_id>
    <wp:comment_author><![CDATA[Dan York]]></wp:comment_author>
    <wp:comment_author_email>dyork@voxeo.com</wp:comment_author_email>
    <wp:comment_author_url>http://blogs.voxeo.com/</wp:comment_author_url>
    <wp:comment_author_IP>74.70.78.98</wp:comment_author_IP>
    <wp:comment_date>2010-03-26 11:35:35</wp:comment_date>
    <wp:comment_date_gmt>2010-03-26 15:35:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mark,

Many thanks for your kind words. I'm glad to hear you liked the new release and I look forward to seeing what you'll do with it!

Thanks,
Dan]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-03-26 15:35:35</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>111</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2010-03-26 13:04:46</wp:comment_date>
    <wp:comment_date_gmt>2010-03-26 17:04:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I've got a few things in mind. ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-03-26 17:04:46</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Upgrading to CouchDB 0.11</title>
  <link>http://voiceingov.org/2010/04/07/upgrading-to-couchdb-011/</link>
  <pubDate>Wed, 07 Apr 2010 12:33:47 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1708</guid>
  <description/>
  <content:encoded><![CDATA[Just a few days ago, <a href="http://blog.couch.io/post/490755034/couchdb-0-11-0-released" target="_blank">CouchDB version 0.11 was released</a> - this new version is packed full of cool new features as <a href="http://blog.couch.io/post/468392274/whats-new-in-apache-couchdb-0-11-part-three-new" target="_blank">outlined on the Couch.io blog</a>.  It's also the first release without the Alpha or Beta label attached to it.
<img src="http://voiceingov.files.wordpress.com/2010/01/couchdb-logo.png" alt="Apache CouchDB Logo" />
What's more exciting, CouchDB version 0.11 is a feature-freeze release candidate for the upcoming version 1.0.  So if you've played around with CouchDB and have an old instance laying around, now is the time to upgrade.

If you've read <a href="http://www.voiceingov.org/blog/?p=1525">my previous series on using CouchDB</a> to build cloud telephony applications with Voxeo's <a href="https://www.tropo.com/home.jsp" target="_blank">Tropo platform</a>, and you used my instructions for setting up CouchDB on Ubuntu 8.04, then upgrading to CouchDB version 0.11 will be a piece of cake.   (Note - the mirror you download from may be different than below.  Go to the <a href="http://couchdb.apache.org/downloads.html" target="_blank">download page</a> to find the best one):

Before upgrading, make sure that any customizations you've made to the CouchDB configuration are in <code>/usr/local/etc/couchdb/local.ini</code>.  The upgrade process will overwrite any changes you have made in <code>default.ini</code>.

<blockquote>
$ sudo /usr/local/etc/init.d/couchdb stop

You should probably run <em>make uninstall</em> on the previous version of CouchDB before starting.
If you see leftover files in <em>/user/local</em>
$ find /usr/local -name *couch* | wc -l

 You should probably get rid of them:
$ find /usr/local -name *couch* | xargs rm -rf

$ wget http://www.trieuvan.com/apache/couchdb/0.11.0/apache-couchdb-0.11.0.tar.gz
$ tar -zxvf apache-couchdb-0.11.0.tar.gz
$ cd apache-couchdb-0.11.0/
$ ./configure &amp;&amp; make &amp;&amp; sudo make install
$ sudo /usr/local/etc/init.d/couchdb start
$ curl -X GET http://127.0.0.1:5984

You should see:

<strong>{”couchdb”:”Welcome”,”version”:”0.11.0"}</strong>
</blockquote>

Note - if you see an error that says <code>{"error":"error","reason":"eacces"}</code> when trying to create a database or insert documents, you may need to re run some commands listed in the previous install instructions:

<blockquote>
$ sudo chown -R couchdb /usr/local/etc/couchdb
$ sudo chown -R couchdb /usr/local/var/lib/couchdb
$ sudo chown -R couchdb /usr/local/var/log/couchdb
</blockquote>

I'm in the process of finishing up a project that will make use of the <a href="http://wiki.open311.org/API" target="_blank">Open311 API deployed by the City of San Francisco</a> and it shall be SQL-free - now that I have CouchDB 0.11 installed, I'm ready to finish up.

Stay tuned - this project is going to kill!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1708</wp:post_id>
  <wp:post_date>2010-04-07 08:33:47</wp:post_date>
  <wp:post_date_gmt>2010-04-07 12:33:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>upgrading-to-couchdb-011</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="couchdb"><![CDATA[CouchDB]]></category>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="post_tag" nicename="tropo"><![CDATA[Tropo]]></category>
  <category domain="post_tag" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Upgrading to CouchDB 0.11. #url# #couchdb #nosql #tropo]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/u9SqL]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1708]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1708]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>112</wp:comment_id>
    <wp:comment_author><![CDATA[Nils Breunese]]></wp:comment_author>
    <wp:comment_author_email>nils@breun.nl</wp:comment_author_email>
    <wp:comment_author_url>http://www.breun.nl/</wp:comment_author_url>
    <wp:comment_author_IP>212.123.179.58</wp:comment_author_IP>
    <wp:comment_date>2010-04-07 10:59:51</wp:comment_date>
    <wp:comment_date_gmt>2010-04-07 14:59:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If you'll be upgrading like that, make sure you remove any traces from older installs, as they can cause trouble when installing over an older version.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-04-07 14:59:51</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>113</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2010-04-07 11:14:55</wp:comment_date>
    <wp:comment_date_gmt>2010-04-07 15:14:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yeah, I should have added that detail.

I did a <em>make uninstall</em> on the older version, and then I ran <em>find /usr/local -name *couch* | xargs rm -rf</em> to get rid of some leftover files (not sure why they weren't removed).

Then I ran through the configure and make steps on the new version listed above.

Seemed to work...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-04-07 15:14:55</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>114</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2010-04-07 11:53:41</wp:comment_date>
    <wp:comment_date_gmt>2010-04-07 15:53:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hmmm.  It appears that something in this sequence of steps removed the local.ini config file from the previous install - I'm assuming that it as <em>make uninstall</em>.

Best to back that file up before using these steps if you want to retain your previous config.

Hope others find this helpful.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-04-07 15:53:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>115</wp:comment_id>
    <wp:comment_author><![CDATA[Dan York]]></wp:comment_author>
    <wp:comment_author_email>dyork@voxeo.com</wp:comment_author_email>
    <wp:comment_author_url>http://blogs.voxeo.com/</wp:comment_author_url>
    <wp:comment_author_IP>74.70.78.98</wp:comment_author_IP>
    <wp:comment_date>2010-04-07 13:32:43</wp:comment_date>
    <wp:comment_date_gmt>2010-04-07 17:32:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mark,

That new CouchDB replication sounds fascinating!  Thanks for linking to it... one of these days I have to get my brain out of PowerPoint and back into some coding.  Very cool stuff happening.

Dan]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-04-07 17:32:43</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>116</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2010-04-11 14:26:30</wp:comment_date>
    <wp:comment_date_gmt>2010-04-11 18:26:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Dan - agreed! There is some cool stuff happening, particularly in the NoSQL space.

One of things I am most taken with about CouchDB is <a href="http://books.couchdb.org/relax/reference/change-notifications" rel="nofollow">the _changes feed</a>.  Basically a way to "listen" to a CouchDB instance and be notified when there are changes.

Its a hugely powerful mechanism for building messaging applications - i.e., when something changes that you want to trigger a message off of.

I'm actually building a Twitter app using CouchDB and the _changes feed now - love to chat with you about it when you have a chance.  Very cool stuff.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-04-11 18:26:30</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>The American Cell Phone Gap</title>
  <link>http://voiceingov.org/2010/04/11/the-american-cell-phone-gap/</link>
  <pubDate>Sun, 11 Apr 2010 18:54:55 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1727</guid>
  <description/>
  <content:encoded><![CDATA[A few years back, I wrote and spoke a lot about <a href="http://www.voiceingov.org/blog/?s=%22all+about+the+phone%22">the importance of the cell phone</a>, and the potential it has to help deliver public services and provide information from government.  A lot has changed in those few years, as documented in <a href="http://www.nytimes.com/2010/04/10/us/10iht-currents.html" target="_blank">an illuminating article</a> published recently in the NY Times.

While the U.S. continues its lust for more powerful, sleeker and <a href="http://www.apple.com/ipad/" target="_blank">functionally dubious devices</a>, the rest of the world continues to leverage the power inherent in the ordinary cell phone.  The cell phone is at the heart of digital life in other countries, and huge numbers of people have them (or soon will):

<blockquote>
The number of mobile subscriptions in the world is expected to pass five billion this year, according to the International Telecommunication Union, a trade group. That would mean more human beings today have access to a cellphone than the United Nations says have access to a clean toilet.
</blockquote>

In the U.S., we continue to look to the build out of the broadband infrastructure as a way to connect those who remain unconnected.  I can't help but think (as I have for some time) that the effort to bring more people into the digital age would be enhanced by leveraging what many already have - an ordinary cell phone.  There would be a number of advantages to such an approach - as noted in the NY Times article, cell phones are "cheap and shareable and easily repaired."   They also do not present the same learning curve as other digital devices, like laptops or netbooks.

So why isn't the cell phone (and services like text messaging) as important in the U.S. as it is in other countries?  I think part of the answer is that it hasn't always been easy or efficient to build text messaging applications.

That's changing - new services like <a href="https://www.tropo.com/how-it-works/" target="_blank">Tropo</a> and <a href="http://blog.twilio.com/2010/02/introducing-a-new-api-twilio-sms.html" target="_blank">Twilio</a> make it (if you'll pardon the alliteration) trivial to build SMS apps.  Certainly other services will soon follow suit, and more powerful tools for building sophisticated SMS and telephone apps will emerge.

As it continues to get easier to build more sophisticated applications, perhaps our use of these devices will change and become more aligned with the rest of the world.

As someone to whom the power of the ordinary cell phone is readily apparent, I sure hope so.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1727</wp:post_id>
  <wp:post_date>2010-04-11 14:54:55</wp:post_date>
  <wp:post_date_gmt>2010-04-11 18:54:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-american-cell-phone-gap</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cell-phones"><![CDATA[Cell Phones]]></category>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="digital-divide"><![CDATA[Digital Divide]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] The American Cell Phone Gap. #url# #sms #digitaldivide #tropo #twilio]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/vvg7P]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1727]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1727]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>117</wp:comment_id>
    <wp:comment_author><![CDATA[Jeff Lawson]]></wp:comment_author>
    <wp:comment_author_email>jeffiel@twilio.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.twilio.com</wp:comment_author_url>
    <wp:comment_author_IP>64.81.243.179</wp:comment_author_IP>
    <wp:comment_date>2010-04-11 15:31:00</wp:comment_date>
    <wp:comment_date_gmt>2010-04-11 19:31:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Mark,

Great post.  It has traditionally been very challenging to build apps, and  I also think that SMS pricing in the US has lagged behind other countries.  Both are changing.  For mobile subscribers, all-you-can-eat text plans are becoming commonplace.   For application developers, $1 phone numbers give you have a cheap, plentiful and fully addressable endpoint for sending and receiving text messages... significantly reducing barriers to experimentation in the SMS space.

The floodgates are open!

-jeff
co-founder &amp; CEO
Twilio]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-04-11 19:31:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>118</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Headd]]></wp:comment_author>
    <wp:comment_author_email>mheadd@voiceingov.org</wp:comment_author_email>
    <wp:comment_author_url>http://voiceingov.org</wp:comment_author_url>
    <wp:comment_author_IP>69.242.19.182</wp:comment_author_IP>
    <wp:comment_date>2010-04-11 16:37:45</wp:comment_date>
    <wp:comment_date_gmt>2010-04-11 20:37:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Jeff - I agree. Pricing is another factor that differentiates the U.S from other countries.

Hopefully progress on that front will motivate more people to consume SMS-based services.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-04-11 20:37:45</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>eComm 2010: San Francisco</title>
  <link>http://voiceingov.org/2010/04/13/ecomm-2010-san-francisco/</link>
  <pubDate>Tue, 13 Apr 2010 12:15:02 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1734</guid>
  <description/>
  <content:encoded><![CDATA[Next week, an event is being held in San Francisco to discuss the future of communications.  The <a href="http://america.ecomm.ec/2010/" target="_blank">Emerging Communications Conference &amp; Awards (eComm)</a> will bring together top executives from communications companies, innovators, academics, hackers and others to discuss "what's next?" in telecom, mobile and Internet communications.

I'm thrilled and honored to be speaking at this event - I'll be talking about how the Open Data and Gov 2.0 movements are <a href="http://america.ecomm.ec/2010/speakers/markheadd/" target="_blank">changing the way that people communicate</a> with their governments.  But I'm even more thrilled to be an attendee at this event.

The <a href="http://america.ecomm.ec/2010/speakers/" target="_blank">speakers list</a> is like a who's who of the telecom world, and I'm looking forward to hearing many of the presentations.  (After eComm Europe in Amsterdam last year, I read some of the presentations that were given and was <a href="http://www.voiceingov.org/blog/?p=1314">mightily impressed with their quality and focus</a>.)

If you're in the San Francisco area, or are someone who is passionate about the changing landscape of communication technology, this is an event you should attend.

Hope to <a href="http://america.ecomm.ec/2010/register.php" target="_blank">see you there</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1734</wp:post_id>
  <wp:post_date>2010-04-13 08:15:02</wp:post_date>
  <wp:post_date_gmt>2010-04-13 12:15:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ecomm-2010-san-francisco</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] eComm 2010: San Francisco. #url# #ecomm #gov20 #opengov #ivr #SIP #IM #SMS #VoIP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/XArD2]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1734]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1734]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Building Cloud Communication Apps with Tropo: Part 1</title>
  <link>http://voiceingov.org/2010/06/06/building-cloud-communication-apps-with-tropo/</link>
  <pubDate>Sun, 06 Jun 2010 16:58:42 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1817</guid>
  <description/>
  <content:encoded><![CDATA[A few months back, I wrote a series of posts on <a href="http://www.voiceingov.org/blog/?p=1525">building NoSQL telephony applications with Tropo and CouchDB</a>.  Today I'm going to start a continuation of that series, focusing on how to build cutting edge cloud communications apps with the Tropo WebAPI.

<strong>What is the Tropo WebAPI?</strong>

The Tropo WebAPI is, in a nutshell, an <a href="https://www.tropo.com/docs/webapi/overview.htm" target="_blank">HTTP/JSON API</a> for building multi-channel communication applications - applications that you interact with via phone, IM, SMS or Twitter.  While my earlier series on Tropo focused on building applications in Tropo's <a href="http://www.voiceingov.org/blog/?p=1625">scripting environment</a> (another fine option for developers), this series will focus on building JSON-based applications (generated using PHP) that can be hosted anywhere and executed in the Tropo cloud environment.

Faithful readers will recognize some similarities here to a post I did a while back on the <a href="http://www.voiceingov.org/blog/?p=1625">HTTP/JSON API provided by CloudVox</a>, another cloud telephony provider.  While the concept behind these two API's is very similar, there are some key differences that make Tropo a highly attractive option for developers.

First, the Tropo service is truly multi-channel - using the Tropo WebAPI you can build applications that work on a range of different communication channels, not just phones (although you can build some pretty slamming phone apps as well).

Since I'm a phone app developer at heart, some of the features that Tropo provides for phone applications really get me excited.  Tropo supports both DTMF entry and speech recognition.  It also has broad multilingual support.  In addition, Tropo gives phone application developers the ability to <a href="http://blogs.voxeo.com/speakingofstandards/2008/05/06/what-is-a-p-header-in-sip-and-whyhow-would-you-use-one/" target="_blank">manipulate SIP headers</a>, an important feature in building sophisticated cloud communication apps that I hope to demonstrate down the road a bit.

<strong>Getting Started</strong>

Head on over to <a href="https://www.tropo.com/" target="_blank">Tropo.com</a> and set up a new account (if you don’t have one already). Take a little time to review the documentation for the Tropo WebAPI.  For the example applications in this series of blog posts I'll be using <a href="http://github.com/tropo/tropo-webapi-php" target="_blank">a PHP class library I developed</a> specifically to interact with the Tropo WebAPI.

The crew behind Tropo have provided a <a href="http://github.com/voxeo/tropo-webapi-ruby" target="_blank">Ruby Gem</a> for interacting with the Tropo WebAPI.  However, since I like to do my cloud telephony work with PHP I decided to write my own set of classes for doing this.  Whether you're a Ruby-head or a PHP enthusiast, using one of these tools to generate JSON for consumption by the Tropo WebAPI can make build an application significantly easier, particularly as you get into more sophisticated application development.

You can get the PHP Library, as well as some of the sample apps we'll be looking at, from GitHub:

<blockquote>
$ git clone git://github.com/tropo/tropo-webapi-php.git
</blockquote>

You'll need to host these classes and the PHP scripts you write with them on a server that can be accessed from the Tropo environment.  Any web server that supports PHP will do.

<strong>My First Tropo WebAPI Application</strong>

Let's start with the standard Hello World app:

<blockquote>
<code>
Say("Hello World!");

// Render the JSON for the Tropo WebAPI to consume.
$tropo-&gt;RenderJson();

?&gt;
</code>
</blockquote>

You can look at the rendered JSON in your browser, and you should see something like this:

<blockquote>
<code>
{
&nbsp;&nbsp;&nbsp;&nbsp;"tropo":&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"say":&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"value":&nbsp;"Hello&nbsp;World!"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;]
}
</code>
</blockquote>

Go to the <a href="https://www.tropo.com/applications/" target="_blank">Applications</a> section in your Tropo account and set up a new WebAPI application that points to the location of this script.

<img src="http://voiceingov.files.wordpress.com/2010/06/application_step_1.png" alt="Create a new Tropo WebAPI application" title="Create a new Tropo WebAPI application" width="385" height="224" style="margin:5px;padding:7px;" />

<img src="http://voiceingov.files.wordpress.com/2010/06/application_step_2.png" alt="Assign a URL to your new Tropo WebAPI application" title="Assign a URL to your new Tropo WebAPI application" width="385" height="200" style="margin:5px;padding:7px;" />

When you create your application, Tropo will automatically provision a Skype number, a SIP number and an <a href="http://www.inum.net/" target="_blank">iNum</a>.  You can additionally add a PSTN number in a range of different area codes at no charge.

You may also notice the section below the provisioned phone numbers entitled "Instant Messaging Networks" - this section allows you to set up any number of different IM accounts (and Twitter!) that your application can use.  We'll dive deeper into this in future posts.

For now, we'll keep it simple and use the auto provisioned Skype number - when you call this number, you will hear it say "Hello World."

The next post in this series will focus on a more sophisticated application that uses the <a href="http://github.com/tropo/tropo-webapi-php" target="_blank">TropoPHP classes</a> and the utterly awesome <a href="http://www.limonade-php.net/" target="_blank">Limonade PHP framework</a>.

Stay tuned...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1817</wp:post_id>
  <wp:post_date>2010-06-06 12:58:42</wp:post_date>
  <wp:post_date_gmt>2010-06-06 16:58:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>building-cloud-communication-apps-with-tropo</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="post_tag" nicename="im"><![CDATA[IM]]></category>
  <category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
  <category domain="post_tag" nicename="sip"><![CDATA[SIP]]></category>
  <category domain="post_tag" nicename="sms"><![CDATA[SMS]]></category>
  <category domain="category" nicename="tropo"><![CDATA[Tropo]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1817]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1817]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Building Cloud Communication Apps with Tropo: Part 2</title>
  <link>http://voiceingov.org/2010/06/14/building-cloud-communication-apps-with-tropo-part-2/</link>
  <pubDate>Mon, 14 Jun 2010 22:30:20 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1882</guid>
  <description/>
  <content:encoded><![CDATA[This post is a continuation of the series on building cloud communication applications with Tropo and the <a href="http://github.com/tropo/tropo-webapi-php">PHP WebAPI Library</a>.

In this post, we'll be looking at Tropo's support for multi-channel applications and using the incredibly flexible and powerful <a href="http://www.limonade-php.net/">Limonade</a> library for PHP (think <a href="http://www.sinatrarb.com/">Sinatra</a> for PHP).

<strong>Working with the Session Object</strong>

As I explained very briefly in the <a href="http://www.voiceingov.org/blog/?p=1817">previous post on this subject</a>, the Tropo WebAPI is an HTTP/JSON API for building multi-channel communication apps.

What this means essentially is that the Tropo platform does all of the hard stuff involved with executing a communication app - DTMF/speech recognition, rendering Text-To-Speech (TTS), maintaining and managing all of the connections to the different communication networks (PSTN, SMS, IM networks, Twitter).  You tell Tropo how to govern the interaction between a caller and your application on a specific channel by sending it a set of instructions in <a href="http://www.json.org/">JSON</a> format.

In this series of posts, we're using the <a href="http://github.com/mheadd/TropoPH">PHP WebAPI Library for Tropo</a> to generate the JSON that gets sent to, and consumed by Tropo.  But this exchange of JSON isn't one-way - Tropo also sends JSON packages to your application with important information about (among other things) the network a user selects to interact with your application on and any input they have provided in response to prompts.

At the beginning of a user session (when a user first connects to your application), Tropo will deliver a JSON <a href="https://www.tropo.com/docs/webapi/session.htm">Session</a> object to your application.  This object contains all sorts of useful information that your app can use when rendering out JSON instructions to send back to Tropo.  Let's examine what a real life Session object looks like.

The easiest way to do this is to simply go over to <a href="http://www.PostBin.org" target="_blank">PostBin.org</a> and make a new PostBin.  PostBin is a service that lets you see HTTP posts that get sent to the special URL that is generated when you create a new PostBin.

After you have created a new PostBin, log into your <a href="https://www.tropo.com">Tropo account</a> and create a new WebAPI application.  Use the PostBin URL as the URL that powers your new Tropo WebAPI app.  After your app is created, you will have a newly provisioned Skype number that you can use to call it.

When you call your application using the Skype number provisioned by Tropo, you won't hear anything - remember, we haven't yet generated any JSON to tell the Tropo platform what to say or do when a user connects.  After you make your call (it will be over quickly), go back to your PostBin URL (you may need to refresh) and you will see an object in JSON format, like this:



This is the Session object for the call you just made.  It's what is sent to your application (via HTTP POST) each time a new session is started on Tropo.  Working with this object using the PHP WebAPI Library is easy.  You just create a new instance of the Session object in PHP and you can start accessing the properties of this object:

<blockquote>
<code>
$session = new Session();
$from_info = $session-&gt;getFrom();
echo $from_info['channel'];

// Using the example Session object JSON from above would render VOICE.
</code>
</blockquote>

Being able to access the channel and network a user is accessing your application from can be useful when you want to tailor prompts or actions to a specific channel - e.g., a phone call vs. an IM session.

Also make note of the <em>initialText</em> property - this will be important when building SMS and IM applications, where a user will begin an interaction with your application by sending information to it.  This property will allow you to process the initial input for those channels without having to ask the user for it again (something users generally dislike).

Next, let's take a look a the Result object that is sent from Tropo to your application when a user provides input in response to a prompt or direction.  In order to do this, we need to take a sip of Limonade.

<strong>Mmmm... Limonade!</strong>

<a href="http://www.limonade-php.net/">Limonade</a> is a lightweight PHP framework that is very much like the Sinatra framework for Ruby.  I won't go into too much detail on it, as there is ample documentation available on the <a href="http://www.limonade-php.net/">Limonade site</a> , but here is quick introduction that will let us build enough of a structure to see the Tropo result object.

When you use Limonade, you set up routes for HTTP requests.  A route is comprised of an HTTP method, a URL matching pattern and a PHP method.  When an HTTP request is made to a URL that matches the pattern, and uses the method specified in the route, the designated PHP function gets invoked.  For example:

<blockquote>
<pre>
dispatch_post('/', 'test');
  function test() {
    echo 'This is a test.';
}
</pre>
</blockquote>

The 'dispatch_post()' directive specifies that the HTTP method for this route with be POST (which is what is used by Tropo to send JSON to your application).  The two parameters to this directive specify the URL pattern to match (in this case, the root directory on the domain were this script is located) and the PHP method to invoke, which is defined below this directive.  In a nutshell, whenever an HTTP POST is made to the root domain where this script is located, the text <em>This is a test</em> will be rendered.

Let's build out a simple shell that we'll use to construct our Tropo application for the next few posts in this series:

<blockquote>
<pre>
// Include Tropo classes.
require('TropoClasses.php');

// Include Limonade framework (http://www.limonade-php.net/).
require('path/to/limonade/lib/limonade.php');

dispatch_post('/start', 'zip_start');
function zip_start() {
	// Tell the user to enter their zip code.
}

dispatch_post('/end', 'zip_end');
function zip_end() {
	// Do something with the entered zip code.
}

dispatch_post('/error', 'zip_error');
function zip_error() {
	// Tell the user an error has occurred.
}

// Run this sucker!
run();

</pre>
</blockquote>

Our Tropo application will collect a user's zip code and then look up some information based on the input they provide.  As you can see, we've included the PHP WebAPI Library and the Limonade Framework.  We've also set up three Limonade routes <em>start</em>, <em>end</em> and <em>error</em> (all using the HTTP POST method) and stubbed out the PHP function that will render JSON for Tropo to consume.

To get a look at the Tropo Result object, lets add some logic to the <strong>zip_start()</strong> function:

<blockquote>
<pre>

dispatch_post('/start', 'zip_start');
function zip_start() {

	// Step 1. Create a new instance of the Session object, and get the channel information.
	$session = new Session();
	$from_info = $session-&gt;getFrom();
	$network = $from_info['channel'];

       // Step 2. Create a new instance of the Tropo object.
	$tropo = new Tropo();

	// Step 3. Welcome prompt.
	$tropo-&gt;say("Welcome to the Tropo PHP zip code example for $network");

	// Step 4. Set up options for zip code input.
	$options = array("attempts" =&gt; 3, "bargein" =&gt; true, "choices" =&gt; "[5 DIGITS]", "name" =&gt; "zip", "timeout" =&gt; 5);

	// Step 5. Ask the caller for input, pass in options.
	$tropo-&gt;ask("Please enter your 5 digit zip code.", $options);

	// Step 6. Tell Tropo what to do when the user has entered input. Enter your PostBin URL in the "next" array element.
	$tropo-&gt;on(array("event" =&gt; "continue", "next" =&gt; "http://www.PostBin.org/xxxxxxx", "say" =&gt; "Please hold."));

	// Step 7. Render the JSON for the Tropo WebAPI to consume.
	return $tropo-&gt;RenderJson();

}

</pre>
</blockquote>

As you can see, inside this function we create a new instance of the Session object and get the channel the user is accessing our application from.  We also create a new instance of the Tropo object (this is what we'll use to send JSON instructions back to the Tropo platform).

The next several steps are fairly self explanatory, but take special note of Step 6.  Here we are telling the Tropo platform that when a 'continue' event is raised (when a user finishes entering input) tell them to 'Please hold' and then POST the results of their input to a PostBin URL.  (Note - replace the value above with the PostBin URL you used at the beginning of this tutorial.)

<strong>Working with the Result Object</strong>

Save your script and change the URL for your WebAPI application in the Tropo Applications manager to point to it.  You can now test your script using the the Skype number for your app as we did before .  When you access your script, you'll get the instructions to enter a zip code, after which Tropo will POST the results to the PostBin URL you inserted into the script in Step 6 above.

Now, when you look at your PostBin URL, you'll see something like this:



As you can see, the Result object that gets sent from Tropo to your app has a wealth of information on what the user entered, how it was interpreted by Tropo and even the confidence level of the recognition (if speech recognition is used).

You can access the Result object using the PHP WebAPI Library just like you can the Session object:

<blockquote>
<code>

$result = new Result();
$zip = $result-&gt;getValue();
echo $zip

// Using the example Result object JSON from above would render 12345
</code>
</blockquote>

You would use the Result object in the <strong>zip_end()</strong> function we stubbed out above.  You use the value of the zip code entered to look up information relevant for that zip code (like a weather forecast) and present it to the caller.

In the next post in this series, we'll complete our simple zip code example by adding a weather forecast lookup and present it to the user.  We'll also tweak our script to optimize it for different channels that a user might employ to access it, to ensure the experience is optimized for phone, IM and SMS.

Stay tuned...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1882</wp:post_id>
  <wp:post_date>2010-06-14 18:30:20</wp:post_date>
  <wp:post_date_gmt>2010-06-14 22:30:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>building-cloud-communication-apps-with-tropo-part-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="post_tag" nicename="limonadephp"><![CDATA[limonadephp]]></category>
  <category domain="category" nicename="tropo"><![CDATA[Tropo]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Building Cloud Communication Apps with @Tropo: Part 2. #url# #VoIP #SMS #IM #IVR]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/QUQSa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.voiceingov.org/blog/?p=1882]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1882]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1882]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Building Cloud Communication Apps with Tropo: Part 3</title>
  <link>http://voiceingov.org/2010/06/21/building-cloud-communication-apps-with-tropo-part-3/</link>
  <pubDate>Mon, 21 Jun 2010 11:41:01 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1899</guid>
  <description/>
  <content:encoded><![CDATA[This post is a continuation of the series on building cloud communication applications with Tropo, the <a href="http://github.com/tropo/tropo-webapi-php">PHP WebAPI Library</a> and the <a href="http://www.limonade-php.net/">Limonade framework</a> for PHP .

If you're just starting, you can take a look back at <a href="http://www.voiceingov.org/blog/?p=1817">part 1</a> and <a href="http://www.voiceingov.org/blog/?p=1882">part 2</a> to get caught up.

In this post, we'll continue our work from the last post and complete a simple, yet powerful multi-channel application that can be accessed via telephone, SMS or IM client.

In the previous post, we looked closely at the <a href="https://www.tropo.com/docs/webapi/session.htm">Session</a> and <a href="https://www.tropo.com/docs/webapi/result.htm">Result</a> objects - these are JSON objects that are sent to your application by the Tropo platform that contain information about how a user is accessing your app (i.e., through which channel) and any input they have provided in response to prompts.  If you worked through the last post, you have a partially complete script that looks like this:



You should save this script to a server that can be accessed by the Tropo platform - any web hosting platform that supports PHP &gt;= 5.2.0 will do.  Let's call our script <code>get_zip_code.php</code>.

When you set up the start URL for this script in the Tropo Application Manager, you'll want to structure it like so:

<blockquote>
http://name_of_my_host.com/path/to/get_zip_code.php?<strong>uri=start</strong>
</blockquote>

As you can see, we've added a querystring parameter called <code>uri</code>.  This will ensure that the initial HTTP POST to this script by the Tropo platform matches our <em>/start</em> pattern and executes our <strong>zip_start()</strong> method, which is where we want users to begin.  Make sure you <a href="http://www.limonade-php.net/README.htm">review the Limonade documentation on setting up routes</a>, as there are multiple options for configuring route pattern matching.

Next, we'll want to start modifying our partially constructed script.  First go to step 6 in the <strong>zip_start()</strong> method, where we had set up a <a href="http://www.postbin.org/" target="_blank">PostBin</a> URL for Tropo to send a user's input to so we could examine the Result object.  Now that we know what the Result object looks like, we want to start using it to look up information and present it to the caller.

You'll want to set up a URL to the <code>get_zip_code.php</code> script that will match the route for the <strong>zip_end()</strong> method.  This is where we will access the Tropo Result object and process it.  Change the URL in the "next" array element to look like this:

<blockquote>
$tropo-&gt;on(array("event" =&gt; "continue", "next" =&gt; "get_zip_code.php?<strong>uri=end</strong>", "say" =&gt; "Please hold."));
</blockquote>

This change tells Tropo that when the "continue" event is raised (after the caller has completed entering input) POST the Result object back to the <code>get_zip_code.php</code> script using a relative URL and a querystring parameter that will ensure matching of our <em>/end</em> pattern.

Next, we need to build out the <strong>zip_end()</strong> method to process the results:

<blockquote>
<pre>
dispatch_post('/end', 'zip_end');
function zip_end() {

        // Step 1. Create a new instance of the result object
	$result = new Result();
	$zip = $result-&gt;getValue(); // get the value of the user input.

        // Step 2. Get weather information for the zip code the caller entered.
	$weather_info = getWeather($zip);
	$city = array_pop($weather_info);

        // Step 3. Create a new instance of the Tropo object.
	$tropo = new Tropo();

        // Step 4. Begin telling the user the weather for the city their zip code is in.
	$tropo-&gt;say("The current weather for $city is...");

        // Step 5. Iterate over an array of weather information.
	foreach ($weather_info as $info) {
	    $tropo-&gt;say("$info.");
	}

        // Step 6. Say thank you (never hurts to be polite) and end the session.
	$tropo-&gt;say("Thank you for using Tropo!");
        $tropo-&gt;hangup();

        // Step 7. Render the JSON for the Tropo WebAPI to consume.
       return $tropo-&gt;RenderJson();

}
</pre>
</blockquote>

As you can see, our <strong>zip_end()</strong> method looks similar to our <strong>zip_start()</strong> method - both use a Tropo object to format information that will be presented to the user, and both call the <strong>RenderJson()</strong> method of the Tropo object at the end.

You may be wondering about the <strong>getWeather()</strong> method that is called in step 2.  Let's build that out now and examine how it works - to keep things simple, we'll make use of the <a href="http://blog.programmableweb.com/2010/02/08/googles-secret-weather-api/">Google Weather API</a>, which provides weather information by zip code and returns the information in XML format.


<blockquote>
<pre>
// The URL to the Google weather service. Renders as XML doc.
define("GOOGLE_WEATHER_URL", "http://www.google.com/ig/api?weather=%zip%&amp;hl=en");

// A helper method to get weather details by zip code.
function getWeather($zip) {

	$url = str_replace("%zip", $zip, GOOGLE_WEATHER_URL);
	$weatherXML = simplexml_load_file($url);
	$city = $weatherXML-&gt;weather-&gt;forecast_information-&gt;city["data"];
	$current_conditions = $weatherXML-&gt;weather-&gt;current_conditions;
	$current_weather = array(
		"condition" =&gt; $current_conditions-&gt;condition["data"],
		"temperature" =&gt; $current_conditions-&gt;temp_f["data"]." degrees",
		"wind" =&gt; formatDirection($current_conditions-&gt;wind_condition["data"]),
		"city" =&gt; $city
	);
	return $current_weather;

}

// A helper method to format directional abbreviations.
function formatDirection($wind) {
	$abbreviated = array(" N ", " S ", " E ", " W ", " NE ", " SE ", " SW ", " NW ");
	$full_name = array(" North ", " South ", " East ", " West ", " North East ", " South East ", " South West ", " North West ");
	return str_replace($abbreviated, $full_name, str_replace("mph", "miles per hour", $wind));
}
</pre>
</blockquote>

The mechanics of these functions are pretty straighforward, so I won't go in to too much detail - you can now see the connection between the call to the <strong>getWeather()</strong> method mentioned above and the array of weather data that it returns.

The last thing we need to do in order to complete our zip code weather demo script is to finish the <strong>zip_error()</strong> method.  This is a method we'll use to tell a user an error occurred (never hurts to be prepared for the unexpected):

<blockquote>
<pre>
dispatch_post('/error', 'zip_error');
function zip_error() {

	// Step 1. Create a new instance of the Tropo object.
	$tropo = new Tropo();

	// Step 2. This is the last thing the user will be told before the session ends.
	$tropo-&gt;say("Please try your request again later.");

	// Step 3. End the session.
	$tropo-&gt;hangup();

	// Step 4. Render the JSON for the Tropo WebAPI to consume.
	return $tropo-&gt;renderJSON();
}
</pre>
</blockquote>

In order for this method to be invoked, we need to make sure that we set up the proper handler in our <strong>zip_start()</strong> method for it.  The Tropo WebAPI makes it possible to set up callback methods that handle things when certain events are raised.  This is done by <a href="https://www.tropo.com/docs/webapi/on.htm">using the On object</a>.

Setting up an event handler using the On object with the <a href="http://github.com/tropo/tropo-webapi-php">PHP WebAPI Library is easy</a>.  In fact, we've already done it once - look at the <strong>zip_start()</strong> method and you'll see a hander for the "continue" event (which is raised when a user has finished entering the proper input).  We want to set up something similar for when an error event is raised.  Let's add a handler in our zip_start() method for an error event:

<blockquote>
<pre>
	// Step 6. Tell Tropo what to do when the user has entered input, or if there is an error.
	$tropo-&gt;on(array("event" =&gt; "continue", "next" =&gt; "get_zip_code.php?uri=end", "say" =&gt; "Please hold."));
	$tropo-&gt;on(array("event" =&gt; "error", "next" =&gt; "get_zip_code.php?uri=error", "say" =&gt; "An error has occured."));
</pre><pre>
</pre></blockquote>

Our script is now <a href="http://gist.github.com/446713" target="_blank">complete</a> and ready to test.

Make sure you log into your <a href="https://www.tropo.com/">Tropo</a> account and set up the start URL to your script as discussed above.  You can test this script with the phone numbers that are automatically provisioned by Tropo when you set up your account.

Tropo will automatically provision a Skype number, a SIP number and an iNum. You can additionally add a PSTN number in a range of different area codes at no charge.  This PSTN number can also be used to send an SMS to, so you can interact with this script via text message. Additionally, you can add an IM account, so you can test this script using your favorite IM client/network.

You may notice, if you test this script using SMS or IM that there are things that don't yet work perfectly.  In the next post, we will make some very simple changes to this script to optimize it for use with SMS and IM (and even Twitter!).

This will transform our simple PHP script into a powerful <a href="http://www.voiceingov.org/blog/?p=1314">unified communications</a> application.

Stay tuned...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1899</wp:post_id>
  <wp:post_date>2010-06-21 07:41:01</wp:post_date>
  <wp:post_date_gmt>2010-06-21 11:41:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>building-cloud-communication-apps-with-tropo-part-3</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="post_tag" nicename="im"><![CDATA[IM]]></category>
  <category domain="post_tag" nicename="pstv"><![CDATA[pstv]]></category>
  <category domain="post_tag" nicename="sms"><![CDATA[SMS]]></category>
  <category domain="category" nicename="tropo"><![CDATA[Tropo]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <category domain="post_tag" nicename="voice"><![CDATA[voice]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_c5cf6431bfe1908d378c9863ca11d74b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3814acbf3d34cfb6fd349ca735c03429</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ed069ff6b885303b13bf586a82d1e391</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dba80bffce8052a32e86ca0322bc3b81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aebb3e42ed54be1d95cdfd0a4a5b096a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e8cc2c636a3d86a15a5b567f81db8419</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Building Cloud Communication Apps with @tropo and @limonadephp: Part 3. #url# #VoIP #IM #SMS #IVR #PHP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">
<!-- turing_cluster_prod -->
<html>
  <head>
    <title>cli.gs</title>
    <meta name="keywords" content="cli.gs">
    <meta name="description" content="cli.gs">
    <meta name="robots" content="INDEX, FOLLOW">
    <meta name="revisit-after" content="10">

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  </head>
  <frameset rows="100%,*" frameborder="no" border="0" framespacing="0">
    <frame src="http://www.dsnextgen.com?epl=01120090VGsLXARUBwxVAEQHVwgHWg9aB1oGCFQNCBtSSx5TXgpqRgdeXBdWRlwWFhAFVFQEVgVUBlADBEcIRmpVV1ZYCVAJUh5YBlBREUQ9BlYGCVcIWgEK" name="cli.gs">
  </frameset>
  <noframes>
	<body>
    <a href="http://www.dsnextgen.com?epl=01120090VGsLXARUBwxVAEQHVwgHWg9aB1oGCFQNCBtSSx5TXgpqRgdeXBdWRlwWFhAFVFQEVgVUBlADBEcIRmpVV1ZYCVAJUh5YBlBREUQ9BlYGCVcIWgEK">
      Click here to go to cli.gs </a>.
	</body>
  </noframes>
</html>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">
<!-- turing_cluster_prod -->
<html>
  <head>
    <title>cli.gs</title>
    <meta name="keywords" content="cli.gs">
    <meta name="description" content="cli.gs">
    <meta name="robots" content="INDEX, FOLLOW">
    <meta name="revisit-after" content="10">

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  </head>
  <frameset rows="100%,*" frameborder="no" border="0" framespacing="0">
    <frame src="http://www.dsnextgen.com?epl=01120090VGsLXARUBwxVAEQHVwgHWg9aB1oGCFQNCBtSSx5TXgpqRgdeXBdWRlwWFhAFVFQEVgVUBlADBEcIRmpVV1ZYCVAJUh5YBlBREUQ9BlYGCVcIWgEK" name="cli.gs">
  </frameset>
  <noframes>
	<body>
    <a href="http://www.dsnextgen.com?epl=01120090VGsLXARUBwxVAEQHVwgHWg9aB1oGCFQNCBtSSx5TXgpqRgdeXBdWRlwWFhAFVFQEVgVUBlADBEcIRmpVV1ZYCVAJUh5YBlBREUQ9BlYGCVcIWgEK">
      Click here to go to cli.gs </a>.
	</body>
  </noframes>
</html>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1899]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1899]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_84fbc49497f16ad7e86a966bd6dca3e4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5564c1793c1c7bd7a592693896ed4297</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0d0a0734ce948f4fc00c563f29ac725f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_81c91aa1c2ba0c77d847783b8b3725d2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2812ef9f6fe2ee295de86c66b9a82be3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_41a33c9a45ec7d53a4d3206fc775775b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Building Cloud Communication Apps with Tropo: Part 4</title>
  <link>http://voiceingov.org/2010/07/05/building-cloud-communication-apps-with-tropo-part-4/</link>
  <pubDate>Mon, 05 Jul 2010 21:18:31 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1918</guid>
  <description/>
  <content:encoded><![CDATA[This post is the final installment in the series on building cloud communication applications with Tropo, the <a href="http://github.com/tropo/tropo-webapi-php">PHP WebAPI Library</a> and the <a href="http://www.limonade-php.net/">Limonade framework</a> for PHP.

If you're just starting, you can take a look back at <a href="http://www.voiceingov.org/blog/?p=1817">part 1</a>, <a href="http://www.voiceingov.org/blog/?p=1882">part 2</a> and <a href="http://www.voiceingov.org/blog/?p=1899">part 3</a> to get caught up.

In the last installment, we finished our <a href="http://gist.github.com/446713" target="_blank">first complete script</a> using the <a href="http://github.com/tropo/tropo-webapi-php">PHP WebAPI Library</a> and Limonade.  We tested this script by calling it using one of the numbers automatically provisioned for applications on the Tropo platform.  In this case, we used the auto provisioned Skype number to make test calls.

In this post we'll refine our script by optimizing it so that the exact same code can efficiently service users on an array of different communication channels.  This is the definition of "multi-modality," and the Tropo platform does it better than pretty much any other platform currently available to developers.

<strong>So Many Channels, So Little Code</strong>

Tropo's strong suit is empowering developers to build applications that work across multiple channels from the same code base.  Enabling different channels for existing application is easy - log into your <a href="http://www.tropo.com">Tropo</a> account and go to "Your Applications."  Select the application we've been using for this series, and make note of the sections entitled "Phone Numbers" and "Instant Messaging Networks."

To SMS-enable your application (so that users can simply send a text message to get weather information) select <em>Add a New Phone Number</em>.  The phone number you add can be used for both voice phone calls and for SMS messages.  Under "Instant Messaging Networks" you can add any one of the many networks supported by Tropo - for this example, we'll add a Jabber account so we can test a channel other than voice.

If you set up a Jabber account for your app, you can interact with it by sending it a message - try starting things off by sending a simple message like "Hello."  Once you do, you'll see the same series of prompts that you can hear when you call into your application via Skype.

<img src="http://voiceingov.files.wordpress.com/2010/07/before.png" alt="IM Bot Before Changes" title="IM Bot Before Changes" width="487" height="353" style="margin:5px;padding:7px;" />


Now that we can see how our application behaves when we interact with it using an IM client, it becomes obvious that there are some things we'd like to change to optimize it for this channel.  User interface elements like a welcome message, reprompts (playing a prompt over again when a user has not entered any input), etc. don't really make much sense in the context of an IM session.  More importantly, it would be nice if we could simply send a zip code to our application to begin the session, as opposed to sending a message like "Hello."

Fortunately, Tropo was built with multi-modality baked into it so changes like these are rather trivial.  To illustrate how to optimize our application so that it can be used on multiple channels, consider the Session object we examined in detail in one of the previous posts in this series.



That Session object was created when we placed a phone call to our application - note that the property name <em>initialText</em> is <strong>null</strong>.

When we access our application using an IM client, the Session object looks like this:



This Session objects looks considerably different than the one created when we made a phone call to our application.  In particular, you can see that the <em>initialText</em> property is now populated with the text we first sent - the string "Hello."

We can access this property using the <a href="http://github.com/tropo/tropo-webapi-php">PHP WebAPI Library</a> like so:

<blockquote>
<pre>
$session = new Session();
$initial_text = $session-&gt;getInitialText();
</pre>
</blockquote>

After accessing the value of this property, we need to do something with it:

<blockquote>
<pre>
if(strlen($initial_text) == 5 &amp;&amp; is_numeric($initial_text)) {
	// Since the user submitted a zip code, look up weather info.
}
</pre>
</blockquote>

Now that we can access the <em>initialText</em> sent to our application, and we can examine it to determine if the user has sent us a valid zip code.  This allows us to tailor the behavior of our app more efficiently to an IM channel <em>without changing how it behaves when a caller makes a telephone call to it</em>.


<img src="http://voiceingov.files.wordpress.com/2010/07/after.png" alt="IM Bot Before Changes" title="after" width="484" height="196" style="margin:5px;padding:7px;" />


The modified script with changes to optimize it for IM <a href="http://gist.github.com/464579" target="_blank">can be found here</a>.

<strong>Conclusion</strong>

Clearly there are lots of other things we could do to tweak our application, to tailor it more efficiently to different channels supported by Tropo.  For example, breaking out the weather information into discreet segments for temperature, wind, etc. (by using a separate <a href="https://www.tropo.com/docs/webapi/say.htm">Say object</a> for each) might work well with a voice or IM channel, but it would probably not work well for SMS or Twitter.

Additional changes to optimize this script for these other channels is pretty straightforward.  I won't get into it in this post, but now that you've got the hang of how easy it is to create multi-modal communication apps with Tropo, Limonade and the <a href="http://github.com/tropo/tropo-webapi-php">PHP WebAPI Library</a> you should give it a try.

Rock on!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1918</wp:post_id>
  <wp:post_date>2010-07-05 17:18:31</wp:post_date>
  <wp:post_date_gmt>2010-07-05 21:18:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>building-cloud-communication-apps-with-tropo-part-4</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="tropo"><![CDATA[Tropo]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <category domain="category" nicename="twitter"><![CDATA[Twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jd_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[[New Blog Post] Turn a Phone Application into an #SMS #IM or #Twitter App with @Tropo and #PHP. #url#]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/r5z29]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/r5z29]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1918]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1918]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What Matters in Cloud Telephony</title>
  <link>http://voiceingov.org/2010/08/12/what-matters-in-cloud-telephony/</link>
  <pubDate>Thu, 12 Aug 2010 12:25:40 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1972</guid>
  <description/>
  <content:encoded><![CDATA[The landscape of cloud telephony continues to change.

I was heartened this week to see some of the sharpest minds I know in cloud telephony and unified communications get together with the acquisition of <a href="http://teleku.com">Teleku</a> by <a href="http://www.voxeo.com">Voxeo</a>.  Teleku and Voxeo's <a href="http://tropo.com">Tropo</a> service are complimentary ones that offer lots of goodies for developers, and I'm anxious to see what these guys will be cooking up now that they have joined forces.  Congrats to all involved!

While there is lots of discussion about <a href="http://gigaom.com/2010/08/11/voxeo-tropo-teleku/">what this acquisition means for the constantly changing landscape of cloud telephony</a>, this move validates (in my mind) some of the important trends that will determine which cloud telephony companies will be around for the long-term and how developers will use their services.

None of this is new - <a href="http://blog.cloudvox.com/post/443681724/mark-headd-on-open311-sip-portability-and-more">I've said it all before</a>.  It is worth noting, however, that all of the trends that I've observed before that are going to make the difference in the cloud telephony space are ones that both Tropo and Teleku do very well.

<strong>Portability</strong> - underscored not only by Teleku's support for the open standard VoiceXML, but also the Tropo crew's involvement in the Asterisk world, and the defacto standard for building Asterisk apps in Ruby - <a href="http://adhearsion.com/">Adhearsion</a>.

<strong>SIP integration</strong> - remember this kids: true cloud telephony has <a href="http://www.voip-info.org/wiki/view/SIP">SIP</a> baked in - the rest is just marketing fluff.  Both Tropo and Teleku support SIP interoperability and make it very easy for developers to use SIP as part of their applications.

<strong>Multi-channel / multi-modality</strong> - Both Tropo and Teleku have big multi-modal chops. Being able to interact with users on multiple communication channels from one code base is a key tenet of unified communications and cloud telephony, and this will become increasingly important in the future.

<strong>Speech recognition</strong> - cloud telephony isn't your grandfather's way to build a phone app, so why should users be restricted to their grandfather's way of interacting with a phone app?  Speech recognition is fully supported in both Tropo and Teleku, and this will matter more and more to cloud telephony developers going forward.

So if you're wondering what the next change in the cloud telephony landscape will be, you can bet that one of these trends will dictate the change.

Until then, I'll be hacking on some cloud-based, speech rec enabled UC apps. ;-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1972</wp:post_id>
  <wp:post_date>2010-08-12 08:25:40</wp:post_date>
  <wp:post_date_gmt>2010-08-12 12:25:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>what-matters-in-cloud-telephony</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="news"><![CDATA[News]]></category>
  <category domain="category" nicename="standards"><![CDATA[Standards]]></category>
  <category domain="category" nicename="tropo"><![CDATA[Tropo]]></category>
  <category domain="category" nicename="voip"><![CDATA[VoIP]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/ULeMe]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/ULeMe]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1972]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1972]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b533bf087c17b02a2d4dec22ddff59d8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5215</wp:comment_id>
    <wp:comment_author><![CDATA[situs judi poker Terpercaya]]></wp:comment_author>
    <wp:comment_author_email>lane_venning@care2.com</wp:comment_author_email>
    <wp:comment_author_url>http://Verizonringtonekcdbe.Blogspot.com/</wp:comment_author_url>
    <wp:comment_author_IP>138.128.228.4</wp:comment_author_IP>
    <wp:comment_date>2017-07-09 02:57:23</wp:comment_date>
    <wp:comment_date_gmt>2017-07-09 02:57:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Choose the type of poker site based on your level of skill and experience.

Every player may be read but when you can not read players you'll make poker impossible 
for yourself.  You will see this sort of tournament 
at virtually every poker playing site as Sit N GO,
SNG, Sng or Sit - NGo.]]></wp:comment_content>
    <wp:comment_approved>trash</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1546095868.511695;s:5:"event";s:12:"status-trash";s:4:"user";s:6:"mheadd";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
      <wp:meta_value>0</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
      <wp:meta_value>1546095868</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1499569045.1526529788970947265625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1499573087.507482051849365234375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Make the Cloud Listen (and Understand)</title>
  <link>http://voiceingov.org/2010/08/13/make-the-cloud-listen-and-understand/</link>
  <pubDate>Fri, 13 Aug 2010 15:11:28 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=1982</guid>
  <description/>
  <content:encoded><![CDATA[Yesterday I wrote <a href="http://www.voiceingov.org/blog/?p=1972">a post about the changing cloud telephony landscape</a>, and highlighted some key factors that will dictate which cloud telephony providers are around for the long haul and deliver the next innovations.

One of those factors - support for speech recognition - is a good differentiator for developers to use when choosing a cloud telephony platform.

Speech recognition is becoming increasingly important in our everyday lives.  Smartphones and powerful handheld devices enable multimodality, and there are <a href="http://www.ghsa.org/html/stateinfo/laws/cellphone_laws.html">more and more restrictions</a> placed on our use of phones while doing other tings (like driving).

Plus, I can't think of a more deflating concept than a cloud telephony provider that allows developers to build sophisticated apps and mashups in the language of their choice but that chains users of those apps to a telephone keypad.  No fun.

To give an example of how powerful speech recognition can be, and how easy it is to use with a cloud telephony provider that supports it, I worked up a small demo to illustrate the point.  The <a href="http://gist.github.com/522913">sample code</a> for this demo is on Github, and we'll dive into it in more detail below.

This demo uses two PHP libraries that are designed to work with the <a href="https://www.tropo.com/home.jsp">Tropo</a> platform (one of the only cloud telephony providers to support speech recognition):

<ul>
<li>A set of PHP classes <a href="http://github.com/tropo/tropo-webapi-php">for working with the Tropo WebAPI</a>.</li>
<li>A PHP library for <a href="http://github.com/mheadd/PHPGrammar">creating SRGS grammars</a> in XML format.</li>
</ul>

If you've read any of <a href="http://www.voiceingov.org/blog/?p=1918">my previous posts on build applications for the Tropo platform</a>, you'll see lots of similarities between this and previous sample apps.  Here I continue my use of the insanely awesome <a href="http://www.limonade-php.net/">Limonade Framework</a> for PHP.

Let's take the example of a company directory that allows callers to dial a single number, select a person or department at the company and then be transferred to the person they select.

With cloud telephony, there is no need to have such a system live on a machine in the server room - it can be hosted externally in the cloud, making it easier to manage and to scale.  In addition, with the Tropo Platform, it doesn't have to be the same tired old DTMF-based menu telling callers to press an extension number or to "dial by name...".

Using the <a href="http://github.com/tropo/tropo-webapi-php">PHP WebAPI Library</a> and <a href="http://www.limonade-php.net/">Limonade</a>, we can construct a simple, yet power script that looks like this:



This script is pretty self-explanatory, but there are some key points I want to emphasize.  First, note the <code>$options</code> array that holds the reference to an external grammar file (more on that in a bit).  Tropo seems to need for this reference to be an absolute one and not a relative reference to the file (not hard to do with PHP - you just need to be aware of it).

Also, the file reference needs to include a trailing parameter indicating that this is an XML grammar (<code>;type=application/grammar-xml</code>).  This seems to be true even if the grammar file is served with the correct MIME type by whatever is serving it.

Now lets have a look at this grammar file.



This simplistic example demonstrates how to use the <a href="http://github.com/mheadd/PHPGrammar">PHPGrammar library</a>.  Note the simple array structure that is being used to hold the details of employees for our fictitious company.  This could very easily be replaced with a dip into a data source of pretty much any kind, like an LDAP directory or database holding employee details.

Also note in this example that we want to do something referred to as <a href="http://www.w3.org/TR/semantic-interpretation/">Semantic Interpretation</a>.  Our grammar file is a set of rules that will be applied to what the caller says - Semantic Interpretation (SI) dictates the value that is given to our application from the grammar when a successful match occurs.

In this example, we want the caller to be able to say the name of the person they want to be transfered to.  We make the first name optional so they may either say the last name of the person or (optionally) the full name.  Obviously this may need to be changed based on the size of the directory to render in a grammar file (e.g., multiple employees with the same last name).

Do note that the Tropo platform seems to require the "Script" sytax for returning SI values on a successful match as opposed to the "String Literal" syntax.  (More on these alternatives <a href="http://www.w3.org/TR/semantic-interpretation/#SI3.2.2">here</a>.)

<blockquote>
Works on Tropo (Script syntax):
<code>&lt;item&gt;foo&lt;tag&gt;<strong>out="bar";</strong>&lt;/tag&gt;&lt;/item&gt;</code>

Does not work on Tropo (String Literal syntax):
<code>&lt;item&gt;foo&lt;tag&gt;<strong>bar</strong>&lt;/tag&gt;&lt;/item&gt;</code>
</blockquote>

So, when a caller says the name of a person in our company directory we want to return the number for that person to our Tropo script so we can transfer the call to them.  This can clearly be seen when we examine the Result object that is delivered by the Tropo platform.



Tropo's Result object includes the full grammar engine output, and lots of very detailed information about the recognition.  As you can see, the <strong>utterance</strong> that the speech recognition engine heard was the name of one of our faux employees.  The <strong>value</strong> that was returned is the number of that person.

We use this value in the <code>transfer_call()</code> method of our Tropo script.


<blockquote>
<code>
	// Create a new instance of the Result object.
	$result = new Result();

        // Get the value of the selection the caller made.
	$phone = $result-&gt;getValue();

	// Create a new instance of the Tropo object and transfer the call.
	$tropo = new Tropo();
	$tropo-&gt;transfer('+1'.$phone);

	// Write out the JSON for Tropo to consume.
	$tropo-&gt;RenderJson();
</code>
</blockquote>

Using the PHP WebAPI library, it takes just 5 lines of code (excluding comments) to get the value of the grammar result and transfer the call.  How cool is that?!

Obviously there are lots of things that can be done to enhance this script, to make it more robust, but it illustrates the essential concepts of speech recognition in the cloud.

What's more, because of all of the great functionality provided by the <a href="https://www.tropo.com/home.jsp">Tropo cloud platform</a> we can really push the envelope on the tired old company directory:

<ul>
<li>We could take an inbound call from a  Skype user and transfer to a cell phone (or a SIP endpoint).</li>
<li>We could let our caller select a department in our company and then ring several different numbers at once, transferring the call to the first one answered (sort of a "hunt group in the cloud").</li>
<li>We could use Tropo's built in IM capabilities to send a screen pop to the person receiving the call.</li>
</ul>

The sky is the limit.  Which I guess is the point of cloud telephony...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1982</wp:post_id>
  <wp:post_date>2010-08-13 11:11:28</wp:post_date>
  <wp:post_date_gmt>2010-08-13 15:11:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>make-the-cloud-listen-and-understand</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="post_tag" nicename="im"><![CDATA[IM]]></category>
  <category domain="post_tag" nicename="limonadephp"><![CDATA[limonadephp]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
  <category domain="post_tag" nicename="semantic-interpretation"><![CDATA[semantic interpretation]]></category>
  <category domain="post_tag" nicename="speech-recognition"><![CDATA[speech recognition]]></category>
  <category domain="category" nicename="tropo"><![CDATA[Tropo]]></category>
  <category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1982]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[1982]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Building Voice Applications with Tropo and Node.js</title>
  <link>http://voiceingov.org/2010/10/01/building-voice-applications-with-tropo-and-nodejs/</link>
  <pubDate>Fri, 01 Oct 2010 19:46:51 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=2045</guid>
  <description/>
  <content:encoded><![CDATA[I've been smitten of late with <a href="http://nodejs.org/">Node.js</a>.

Node.js is a framework for building server-based applications in JavaScript.  Node.js is event driven, so if you got a fairly good understanding of state-driven development frameworks you'll probably get it quickly.  If not, start <a href="http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb">here</a>.
<img src="http://voiceingov.files.wordpress.com/2010/10/nodejs_.jpg" alt="Node.js" title="Node.js" width="222" height="75" style="float:right;margin:15px;" />
I wanted to learn more about Node.js, so I decided to build a module.  There are lots of modules out there, but I wanted to do something very specific with mine.  I wanted to use Node.js to build voice applications.  (Not a shocker, it's what I do.)

Turns out Node.js is a very nice match for the <a href="https://www.tropo.com/docs/webapi/">Tropo WebAPI</a>, a cloud-based API for building sophisticated speech and communication applications.  The Tropo WebAPI speaks <a href="http://json.org/">JSON</a>, and I can't think of any more natural way of creating and consuming JSON than with good 'ol JavaScript.  Really, you can see why this gets me excited.

The Node.js module that I've been working on for interacting with the Tropo WebAPI is now <a href="http://github.com/tropo/tropo-webapi-node">available on GitHub</a>.  It comes with some very nice examples, and even a set of unit tests (yes, Virginia, you can write unit tests with Node.js).  It has everything you need to get started using Node.js to write voice apps in JavaScript.

If you decide to give it a try (which I hope you do), there are some additional ingredients I would recommend adding to the mix:

<ul>
<li>The <a href="http://expressjs.com/">Express.js framework</a> - a Node.js module very much like <a href="http://www.sinatrarb.com/">Sinatra</a> in Ruby or <a href="http://www.limonade-php.net/">Limonade</a> in PHP.</li>
<li><a href="http://couchdb.apache.org/">CouchDB</a> - The wonderfully powerful document-oriented storage engine that uses both JavaScript (for map/reduce and views) and JSON (for storing documents).  There are also many fine<a href="http://github.com/ry/node/wiki/modules"> Node.js modules </a>available for interacting with CouchDB.</li>
</ul>

With these ingredients you've got a pretty powerful foundation on which to build robust, sophisticated multi-channel communication apps.

But why would you want to build a voice application with JavaScript?
<img src="http://voiceingov.files.wordpress.com/2010/03/tropo.jpg" alt="Tropo" title="Tropo" width="194" height="119" style="float:left;margin:15px;" />
Pretty much all of the voice application development tools and technologies that have been developed over the last decade or so have one essential unifying characteristic - each of them seeks to leverage easy to understand, low cost web technologies to build phone applications.

This principle can be seen very clearly in the approach embodied by the new <a href="http://github.com/tropo/tropo-webapi-node">Node.js library for the Tropo WebAPI</a>.  If you can write JavaScript, you can build sophisticated, cloud-based communication applications that not long ago required specialized skills, training, software and hardware (Big bucks, people. Big bucks).

Cloud-based telephony services based around simple to use APIs that employ widely supported standards like HTTP and JSON are democratizing phone and voice application development.

It's really exciting to be a part of this trend and to contribute tools that others can use to build powerful applications.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2045</wp:post_id>
  <wp:post_date>2010-10-01 15:46:51</wp:post_date>
  <wp:post_date_gmt>2010-10-01 19:46:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>building-voice-applications-with-tropo-and-nodejs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[no]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2045]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2045]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5252</wp:comment_id>
    <wp:comment_author><![CDATA[76Marissa]]></wp:comment_author>
    <wp:comment_author_email>violette.mcvey@freenet.de</wp:comment_author_email>
    <wp:comment_author_url>https://SeymourBigg.blogspot.de</wp:comment_author_url>
    <wp:comment_author_IP>201.17.122.194</wp:comment_author_IP>
    <wp:comment_date>2017-08-12 13:41:32</wp:comment_date>
    <wp:comment_date_gmt>2017-08-12 13:41:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi admin, i must say you have hi quality posts here. Your blog should go viral.
You need initial traffic boost only. How to get it?
Search for: Mertiso's tips go viral]]></wp:comment_content>
    <wp:comment_approved>trash</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1546095867.970267;s:5:"event";s:12:"status-trash";s:4:"user";s:6:"mheadd";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
      <wp:meta_value>0</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
      <wp:meta_value>1546095868</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1502545292.803162097930908203125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1502549815.4186799526214599609375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>How to Build a Telephone</title>
  <link>http://voiceingov.org/2010/10/16/how-to-build-a-telephone/</link>
  <pubDate>Sat, 16 Oct 2010 15:38:36 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=2102</guid>
  <description/>
  <content:encoded><![CDATA[
<h3 style="margin-top:15px;">The old way.</h3>

<img src="http://voiceingov.files.wordpress.com/2010/10/old-phone.jpg" alt="The old way" title="The old way" />

<h3 style="margin-top:50px;">The new way.</h3>

<a href="http://phono.com/"><img src="http://voiceingov.files.wordpress.com/2010/10/new-phone.jpg" title="The new way" /></a>

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2102</wp:post_id>
  <wp:post_date>2010-10-16 11:38:36</wp:post_date>
  <wp:post_date_gmt>2010-10-16 15:38:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>how-to-build-a-telephone</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development-tools"><![CDATA[Development Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>jd_tweet_this</wp:meta_key>
    <wp:meta_value><![CDATA[yes]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_clig</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/yASqW]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wp_jd_target</wp:meta_key>
    <wp:meta_value><![CDATA[http://cli.gs/yASqW]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2102]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2102]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Interactive Screen Pops with Asterisk &amp; XMPP</title>
  <link>http://voiceingov.org/2010/10/28/interactive-screen-pops-with-asterisk-xmpp/</link>
  <pubDate>Thu, 28 Oct 2010 20:56:12 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=2145</guid>
  <description/>
  <content:encoded><![CDATA[I've got a thing about <a href="http://en.wikipedia.org/wiki/Screen_pop">screen pops</a>.
<img src="http://voiceingov.files.wordpress.com/2010/10/asterisk1.gif" alt="Asterisk" title="Asterisk" style="margin:10px;padding:15px;float:right;" />
I've <a href="http://www.voiceingov.org/blog/?p=326">written before</a> about using Asterisk and XMPP to enable IM-based screen pops, but the recent release of Asterisk 1.8 creates a whole new reason to be excited about this topic.

The <a href="http://www.asterisk.org/node/51444">new version of Asterisk</a> includes a new dialplan function called <a href="https://wiki.asterisk.org/wiki/display/AST/Function_JABBER_RECEIVE">JABBER_RECEIVE</a>.

This new function nicely compliments the existing <a href="https://wiki.asterisk.org/wiki/display/AST/Application_JabberSend">JabberSend() dialplan application</a> and lets you read incoming XMPP messages into dialplan variables (via <a href="https://wiki.asterisk.org/wiki/display/AST/Application_Set">Set()</a>).

Now that you can both send <strong>and</strong> receive XMPP messages via the dialplan, it is possible to build sophisticated CTI applications using standards-based XMPP servers and clients with nothing but <code>extensions.conf</code>.  Here's how.

You'll need an XMPP server with (at least) two accounts.  One for you, as a user.  One for Asterisk.  You'll also want to fire up your XMPP client and add the Asterisk user to your buddy list.

Set up jabber.conf with the details of the Asterisk account on your XMPP server (make sure you run <code>jabber reload</code> in the Asterisk CLI after modifying the file):



Once you've done that, you'll need to add some dialplan logic to use both JabberSend() and JABBER_RECEIVE (run <code>dialplan reload</code> in the Asterisk CLI after adding this logic):



In this simple example, anytime a call comes into the <code>default</code> context, a set of IM messages are sent to the XMPP account user@xxx.xxx.xxx.xxx (where xxx.xxx.xxx.xxx represents the host name/IP for your XMPP server).  The following line in the dialplan will cause Asterisk to wait 10 seconds to receive a response from user@xxx.xxx.xxx.xxx.

<blockquote>
exten =&gt; _XXXX,n,Set(OPTION = ${JABBER_RECEIVE(asterisk,user@xxx.xxx.xxx.xxx,10)})
</blockquote>

When a response is received, it is read into the variable OPTION.  Subsequent dialplan logic will either send the call to the extention that was dialed, or simply hang up (you could just as easily add options and logic to route the call to one of several different phone numbers or to voicemail).

That's it!

This powerful new addition to Asterisk makes building sophisticated, interactive XMPP-based screen pops easy.  Just imagine what other <a href="http://svn.digium.com/view/asterisk/branches/1.8/CHANGES?view=markup" target="_blank">juicy little nuggets</a> await in the new version of Asterisk.

Happy screen popping!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2145</wp:post_id>
  <wp:post_date>2010-10-28 16:56:12</wp:post_date>
  <wp:post_date_gmt>2010-10-28 20:56:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>interactive-screen-pops-with-asterisk-xmpp</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asterisk"><![CDATA[Asterisk]]></category>
  <category domain="category" nicename="open-source"><![CDATA[Open Source]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2145]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2145]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>twitter_cards_summary_img_size</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{i:0;i:239;i:1;i:195;i:2;i:1;i:3;s:24:"width="239" height="195"";s:4:"bits";i:7;s:8:"channels";i:3;s:4:"mime";s:9:"image/gif";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Witnessing the CfA Effect in Philadelphia</title>
  <link>http://voiceingov.org/2011/02/26/witnessing-the-cfa-effect-in-philadelphia/</link>
  <pubDate>Sat, 26 Feb 2011 18:56:05 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=2262</guid>
  <description/>
  <content:encoded><![CDATA[Yesterday in Philadelphia, at the offices of <a href="http://www.azavea.com/">Azavea</a> (a Philly-based geographic data and civic apps company), <a href="http://twitter.com/cfaphl">7 Code for America fellows</a> sponsored what was the last in a month-long series of workshops/gatherings/hackathons.
<img src="http://voiceingov.files.wordpress.com/2011/02/phillyseal.jpg?w=283&h=300" alt="City of Philadelphia" title="City of Philadelphia" width="200" height="210" style="float:right;margin:5px;" />
Yesterday's event was promoted as a <a href="http://phillydatacamp.com/projects/">Data Camp</a> - a one day sprint meant to identify useful sources of information about Philadelphia, and to build civic applications and mashups using that data.  The idea was to have "demoable" projects by the end of the day.

I had the <a href="http://phillydatacamp.com/projects/phillyapi/">pleasure of attending this event</a> yesterday, and was impressed by what I saw.  I'm referring not only to the projects that were worked on (which were cool), or the excitement visible on the faces of everyone there - from independent hackers, to Azavea employees to city officials (there  were several in attendance throughout the day). That was cool too.

What I was most impressed with was the ability of this event to highlight to those that were there what is truly possible when government data is open to and usable by developers.  It provided an object lesson for all those there in the true potential of civic hacking.

I spoke with a number of people after the event, when the demos for all of the projects were complete, and the unanimous sentiment was - "Wow, all this got done in <strong>one</strong> day?"

The idea of releasing open government data has been gaining momentum in Philadelphia for a while now, principally under the auspices of the <a href="http://technicallyphilly.com/2011/02/24/give-us-the-data-that-is-ours-digital-philadelphia-code-for-america-open-gov-event-video">Digital Philadelphia initiative</a>.

But yesterday's event - in my opinion, as someone from outside of Philadelphia looking in - seemed to crystalize the benefits of releasing open data for many people there.  They had already been supportive of releasing open government data in principle, and most had worked toward achieving this end.  But to actually see apps getting built with open data really made the lightbulbs go off.

Having the Code for America fellows in Philadelphia, and having them essentially kick start civic coding using city data, has accelerated the awareness of what is possible.  I think people would have achieved the awareness that was realized yesterday eventually, but the CfA fellows got people there sooner.

I call it "the CfA Effect."  It was pretty cool to see first hand.

Looking forward to more cool stuff from this gifted and dedicated group of young people.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2262</wp:post_id>
  <wp:post_date>2011-02-26 14:56:05</wp:post_date>
  <wp:post_date_gmt>2011-02-26 18:56:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>witnessing-the-cfa-effect-in-philadelphia</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2262]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2262]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Evolution of an Open Data Program</title>
  <link>http://voiceingov.org/2011/03/16/evolution-of-an-open-data-program/</link>
  <pubDate>Wed, 16 Mar 2011 20:55:48 +0000</pubDate>
  <dc:creator>mheadd</dc:creator>
  <guid isPermaLink="false">http://www.voiceingov.org/blog/?p=2282</guid>
  <description/>
  <content:encoded><![CDATA[The first great challenge for any municipal data program is deciding what data to release.

The second great challenge for municipalities that embark on open data programs can be summed up in how they react to applications that get built with their data.  This is particularly true if the apps that are built have not been fully considered by the municipality releasing the data.

Because of some work done by smart, passionate civic developers in Baltimore, this second challenge <a href="http://www.baltimoresun.com/business/technology/bs-bz-balttech-spotagent-city-data-20110314,0,2402943.story">now confronts officials in Charm City</a>:

<blockquote>
"Whether web developers can use the city data to make applications that bring in revenue is still unknown. Baltimore officials released the data without providing terms of service to guide developers seeking to create applications for for-profit ventures."

"Baltimore's law department is crafting guidelines for how developers could use the data in such ventures," said Rico Singleton, Baltimore's chief information officer.
</blockquote>

How Baltimore crafts the terms of service for their open data sets will dictate, to a large extent, how successful the program will ultimately be.  Will there be more apps like <a href="http://www.spotagent.com/">SpotAgent</a>? We'll have to wait and see.  I, for one, hope so.

It's not surprising that governments struggle with this important milestone in the evolution of an open data program.

To a large extent, releasing open data means that governments abdicate control.  There are typically some limitations on what developers can do with government data, but for the most part the creativity and personal ambitions of external developers are the engine that drives open data programs.

It can be a big leap for governments to give up this control, something that not all of them fully consider before the first data sets are released.

Here's hoping that Baltimore officials take an approach that encourags the kind of app development that has resulted in SpotAgent.  It would be great to see more of this.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2282</wp:post_id>
  <wp:post_date>2011-03-16 16:55:48</wp:post_date>
  <wp:post_date_gmt>2011-03-16 20:55:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>evolution-of-an-open-data-program</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general-discussion"><![CDATA[General Discussion]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2282]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2282]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
